.\" =========================================================================
.\" Copyright (c) 1990-2018 Info-ZIP.  All rights reserved.
.\"
.\" See the accompanying file LICENSE, version 2009-Jan-2 or later
.\" (the contents of which are also included in zip.h) for terms of use.
.\" If, for some reason, all these files are missing, the Info-ZIP license
.\" also may be found at:  ftp://ftp.info-zip.org/pub/infozip/license.html
.\" ==========================================================================
.\"
.\" zipcloak.1 by E. Gordon for Zip 3.0, 3.1
.\"
.TH ZIPCLOAK 1 "29 July 2018 (v3.1)" Info-ZIP
.SH NAME
zipcloak \- encrypt entries in a zipfile (v3.1)

.SH SYNOPSIS
.B zipcloak
.RB [ \-d ]
.RB [ \-b\ \fPpath ]
.RB [ \-kf\ \fPkeyfile ]
.RB [ \-O\ \fPfile ]
.RB [ \-Y\ \fPem ]
.RB [ \-h ]
.RB [ \-v ]
.RB [ \-L ]
zipfile

.SH ARGUMENTS
.TP
zipfile
Zipfile to encrypt/decrypt entries in

.SH DESCRIPTION
\fBzipcloak\fR encrypts all unencrypted entries in the zipfile.  This is
the default action.

The \fB\-d\fR option is used to decrypt encrypted entries in the zipfile.

\fBzipcloak\fR defaults to using original zip encryption, which is
considered weak.  Use of AES encryption is recommended.

.TP
Traditional (ZipCrypto) encryption notice:

The encryption code of this program is not copyrighted and is put in
the public domain.  It was originally written in Europe and can be freely
distributed from any country including the U.S.A.  (Previously if this
program was imported into the U.S.A, it could not be re-exported from
the U.S.A to another country.)  See the file README.CR included in the
\fBzip\fR source distribution for more on this.  Otherwise, the Info-ZIP
license applies.

.TP
AES encryption notice (applies when AES encryption included):

This distribution includes cryptographic software.  The country in which
you currently reside may have restrictions on the import, possession, use,
and/or re-export to another country, of encryption software.  BEFORE using
any encryption software, please check your country's laws, regulations and
policies concerning the import, possession, or use, and re-export of
encryption software, to see if this is permitted. See
<http://www.wassenaar.org/> for more information.

The U.S. Government Department of Commerce, Bureau of Industry and Security
(BIS), has classified this software as Export Commodity Control Number
(ECCN) 5D002.C.1, which includes information security software using or
performing cryptographic functions and makes it eligible for export under
the License Exception ENC Technology Software Unrestricted (TSU) exception.
.LP
\fBzip 3.0\fR and \fBunzip 6.0\fR do not support keyfiles.  \fBzip 3.1\fR
supports keyfiles.

.SH OPTIONS
.TP
.PD 0
.B \-b\ \fPpath
.TP
.PD
.B \-\-temp\-path \fPpath
Use the directory given by \fIpath\fR for the temporary zip file.

.TP
.PD 0
.B \-d
.TP
.PD
.B \-\-decrypt
Decrypt encrypted entries (copy if given wrong password).

.TP
.PD
.B \-\-etwodd\ 
When using Traditional zip encryption, perform a second pass to avoid the need
for using data descriptors.  Most unzips now understand the \fBzip\fR Traditional
encryption format so this should not be needed.  See the \fBzip\fR manual for
more on this.

This option does not impact AES encryption, which always uses one pass.

.TP
.PD 0
.B \-h
.TP
.PD
.B \-\-help\ 
Show a short help.

.TP
.PD 0
.B \-hh
.TP
.PD
.B \-\-more-help\ 
Show a longer help.

.TP
.PD 0
.B \-kf\ \fPkfile
.TP
.PD
.B \-\-keyfile\ \fPkfile
Use the contents of keyfile as part or all of password.  The contents of the
file \fIkfile\fR are read into a buffer, with NUL bytes ('\\0') removed.  After
the password (if any) is provided, the contents of the keyfile buffer are used
to fill the rest of the key buffer to the maximum key size.  So the password is
the given password with the beginning of the keyfile contents appended up to the
maximum size of the password (128 bytes).  A keyfile can contain binary.  If a
keyfile is used, the password is optional and can be left empty.

.TP
.PD 0
.B \-L
.TP
.PD
.B \-\-license
Show software license.  (\fB\-l\fR also works, but this should be considered
deprecated.)

.TP
.PD 0
.B \-O\ \fPzipfile
.TP
.PD
.B \-\-output\-file\ \fPzipfile
Write output to new archive \fIzipfile\fR, leaving original archive as is.

.TP
.PD 0
.B \-pn
.TP
.PD
.B \-\-non\-ansi\-password
\fBzipcloak\fR forces passwords to only contain 7-bit ANSI characters for
maximum portability.  The \fB\-pn\fR option removes this restriction and
allows other characters, such as UTF\-8, to be used for the password.

.TP
.PD 0
.B \-ps
.TP
.PD
.B \-\-short-password
\fBzipcloak\fR requires passwords to be a minimum length, that length
dependent on the encryption method being used.  This is so a relatively
easy to crack password is not used with a relatively strong encryption
method (such as AES-256), defeating the security of the strong encryption.
The \fB\-ps\fR option removes this restriction, allowing very short
passwords.

This option should only be used for testing, not for protecting real data!

.TP
.PD 0
.B \-P\ \fPpswd
.TP
.PD
.B \-\-password\ \fPpswd
Specify the password to use.  This is insecure!  On many systems the
command line can be viewed by other users on the system.

When used with a keyfile, an empty password can be used to prevent
prompting.

.TP
.PD 0
.B \-so
.TP
.PD
.B \-\-show-options
Show all available options on this system.

.TP
.PD 0
.B \-q
.TP
.PD
.B \-\-quiet
Quiet operation.  Suppresses some informational messages.

.TP
.PD 0
.B \-v
.TP
.PD
.B \-\-version
Show version information.

.TP
.PD 0
.B \-Y\ \fPem
.TP
.PD
.B \-\-encryption\-method\ \fPem
Set the encryption method.  Supported methods are \fBTraditional\fP
(weak), and WinZip-compatible AES (strong) with key lengths of
\fBAES128\fP, \fBAES192\fP and \fBAES256\fP.  AES encryption must be
enabled at build time, and requires a compatible Info-ZIP AES encryption
kit.  (See INSTALL in the \fBzip\fR source kit for more information.)
An AES-capable UnZip program is needed to extract AES-encrypted entries.

.SH EXAMPLES
Create zipfile:
.IP
\fCzip cloaktest foo.txt bar.c\fP
.LP
Encrypt zipfile:
.IP
.nf
\fBzipcloak cloaktest\fR
Enter password:
Verify password:
encrypting: foo.txt
encrypting: bar.c
.fi
.LP
Note that default (weak) \fBTraditional Encryption\fR was used.

Add file to archive:
.IP
\fCzip cloaktest foobar.txt\fP
.LP
Use \fBunzip\fR to view contents:
.IP
.nf
\fBunzip -Z cloaktest\fR
Archive:  cloaktest.zip
Archive size: 152964 bytes; Members: 3
-rw-a---    3.1 fat    62389 Tx defN 18-Apr-27 03:13 foo.txt
-rw-a---    3.1 fat    38768 Tx defN 17-Jul-12 22:12 bar.c
-rw-a---    3.1 fat   505115 tx defN 18-Jul-25 23:24 foobar.txt
Members: 3; Bytes uncompressed: 606272, compressed: 152200, 74.9%
Directories: 0, Files/links: 3
.fi
.LP
Note that the first two entries are encrypted ("Tx") but not the
last one ("tx").

Encrypt all entries:
.IP
.nf
\fBzipcloak cloaktest\fR
Enter password:
Verify password:
   copying: foo.txt
   copying: bar.c
encrypting: foobar.txt
.fi
.LP
List contents:
.IP
.nf
\fBunzip -Z cloaktest\fR
Archive:  cloaktest.zip
Archive size: 152996 bytes; Members: 3
-rw-a---    3.1 fat    62389 Tx defN 18-Apr-27 03:13 foo.txt
-rw-a---    3.1 fat    38768 Tx defN 17-Jul-12 22:12 bar.c
-rw-a---    3.1 fat   505115 Tx defN 18-Jul-25 23:24 foobar.txt
Members: 3; Bytes uncompressed: 606272, compressed: 152200, 74.9%
Directories: 0, Files/links: 3
.fi
.LP
All entries now encrypted.

Decrypt archive:
.IP
.nf
\fBzipcloak -d cloaktest\fR
Enter password:
decrypting: foo.txt
decrypting: bar.c
decrypting: foobar.txt
.fi
.LP
List contents:
.IP
.nf
\fBunzip -Z cloaktest\fR
Archive:  cloaktest.zip
Archive size: 152960 bytes; Members: 3
-rw-a---    3.1 fat    62389 tx defN 18-Apr-27 03:13 foo.txt
-rw-a---    3.1 fat    38768 tx defN 17-Jul-12 22:12 bar.c
-rw-a---    3.1 fat   505115 tx defN 18-Jul-25 23:24 foobar.txt
Members: 3; Bytes uncompressed: 606272, compressed: 152200, 74.9%
Directories: 0, Files/links: 3
.fi
.LP
All entries now decrypted.

Encrypt using AES-256 encryption:
.IP
.nf
\fBzipcloak -Y=AES256 cloaktest\fR
Enter password:
Verify password:
encrypting: api.c
encrypting: api.h
encrypting: zip.c
.fi
.LP

Decrypt archive:
.IP
.nf
\fBzipcloak -d cloaktest\fR
Enter password:
decrypting: foo.txt
decrypting: bar.c
decrypting: foobar.txt
.fi
.LP

Encrypt using a keyfile:
.IP
.nf
\fBzipcloak -Y=AES256 -kf=keyfile.txt cloaktest\fR
Keyfile read
Enter password: \fB(just hit return to just use keyfile)\fR
Verify password:
encrypting: foo.txt
encrypting: bar.c
encrypting: foobar.txt
.fi
.LP

If a password is given with the keyfile, they are combined and both
must be given to decrypt.

Decrypt using keyfile:
.IP
.nf
\fBzipcloak -d -kf=keyfile.txt cloaktest\fR
Keyfile read
Enter password: \fB(just hit return as no password was set above)\fR
decrypting: foo.txt
decrypting: bar.c
decrypting: foobar.txt
.fi
.LP

\fB\-P\fR can be used with a keyfile to avoid prompting for a password:
.IP
.nf
zipcloak -Y=AES128 -kf=keyfile.txt -P= cloaktest
zipcloak -d -kf=keyfile.txt -P= cloaktest
.fi
.LP

If the keyfile only contains printable text, then a zipfile encrypted
using a keyfile can be used by an unzip not supporting keyfiles by
just appending to the password the contents of the keyfile, then
truncating at 128 bytes if the combined password exceeds that.

.SH BUGS
Large files (> 2 GB) and large archives not yet supported.

Split archives not yet supported.

.SH SEE ALSO
zip(1), unzip(1)
.SH AUTHOR
Info-ZIP
