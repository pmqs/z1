.\" =========================================================================
.\" Copyright (c) 1990-2019 Info-ZIP.  All rights reserved.
.\"
.\" See the accompanying file LICENSE, version 2009-Jan-2 or later
.\" (the contents of which are also included in zip.h) for terms of use.
.\" If, for some reason, all these files are missing, the Info-ZIP license
.\" also may be found at:  ftp://ftp.info-zip.org/pub/infozip/license.html
.\" ==========================================================================
.\"
.\" zip.1 by Mark Adler, Jean-loup Gailly and  R. P. C. Rodgers
.\" updated by E. Gordon for Zip 3.0 (8 May 2005, 24 December 2006,
.\" 4 February 2007, 27 May 2007, 4 June 2007 by EG; 12 June 2007 by CS;
.\" 30 August 2007, 27 April 2008, 25 May 2008, 27 May 2008 by EG,
.\" 7 June 2008 by SMS and EG; 12 June 2008 by EG; 7 September 2008 by EG;
.\" 3 April 2009 by EG; 11 August 2009 by EG)
.\" updated for Zip 3.1 (5 October 2014 by EG; 23 April 2015 by SMS and EG;
.\" 29 July 2015, 30 October 2015, 27 July 2017, 14 May 2018, 17 June 2018,
.\" 29 July 2018, 6 February 2019 by EG)
.\"
.TH ZIP 1 "06 February 2019 (v3.1)" Info-ZIP
.\" Set line length (defaults to screen width if live, 90 if pipe)
.\" .ll 90
.\"
.SH NAME
zip \- package and compress (archive) files (v3.1)
.SH SYNOPSIS
.B zip
.RB [\- aABcdDeEfFghjklLmoqrRSTuvVwXyz!@$ ]
[\-\-longoption ...]
.RB [\- b " path]"
.RB [\- n " suffixes]"
.RB [\- t " date]"
.RB [\- tt " date]"
[zipfile [file \.\|.\|.]]
[\fB-xi\fR list]
.SH WARNING
Command line processing in \fBzip 3.0\fP and later
has been changed to support long options and handle all
options and arguments more consistently.  Some old (\fBzip 2.x\fP) command
lines that depend on command line inconsistencies may no longer
work.
.SH NOTE
\fBzipcloak\fR, \fBzipnote\fR and \fBzipsplit\fR now have their own manual pages.
.PP
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH DESCRIPTION
.B zip
is a compression and file packaging utility for Unix, VMS, MSDOS,
OS/2, Windows, Minix, Atari, Macintosh, MVS, z/OS, Amiga,
Acorn RISC, and other OS.  It is analogous to a combination of
the Unix commands
.BR tar (1)
and
.BR compress (1)
(or \fBtar\fP(1) and \fBgzip\fP(1))
and is compatible with \fBPKZIP\fR (Phil Katz's ZIP for MSDOS systems)
and other major zip utilities.
.LP
A companion program
.RB ( unzip (1))
unpacks
.B zip
archives.
The
.B zip
and
.BR unzip
programs can work with archives produced by most zip utilities
(depending on features used) and most unzip utilities can
work with archives produced by \fBzip\fR (though some utilities
may still not support streamed archives yet).  \fBzip\fR
supports most features of the zip standard up to version
4.6, and some later features as well.
\fBzip 3.0\fR and later supports the Zip64 extensions of \fBPKZIP 4.5\fR which
allow archives as well as files to exceed the previous 2 GB limit
(4 GB in some cases).  \fBzip 3.1\fP now
supports additional compression methods, including \fBbzip2\fP,
\fBLZMA\fP and \fBPPMd\fP.  (See below for more on Zip64 and
compression methods.)  \fBzip\fR also now supports AES encryption.

(Note that \fBPKUNZIP 1.10\fR cannot extract files produced
by \fBPKZIP 2.04\fR or \fBzip\ 2.0\fP (or later).  You must use \fBPKUNZIP
2.04g\fR or \fBunzip\ 5.0p1\fP (or later versions) to extract them.)

See the \fBEXAMPLES\fP section at the bottom of this page
for some basic examples and typical uses of \fBzip\fP.

For a brief help page on \fBzip\fP and \fBunzip\fP,
run each without specifying any parameters on the command line
(or using \fBzip -h\fR or \fBzip --help\fR).
Both \fBzip\fP and \fBunzip\fP now also support the \fB-hh\fP
option to show more detailed help.
.\" --------------------
.\"
.SS Large archives and Zip64
.\"\fBLarge\ Archives\ and\ Zip64.
.B zip
automatically uses the Zip64 extensions when files larger than 4 GB are
added to an archive, an archive containing Zip64 entries is updated
(if the resulting archive still needs Zip64),
the size of the archive will exceed 4 GB, or when the
number of entries in the archive will exceed about 64K.
Zip64 is also used for archives streamed from standard input as the size
of such archives are not known in advance, but the option \fB\-fz\-\fP can
be used to force \fBzip\fP to create \fBPKZIP 2\fR compatible archives (as long
as Zip64 extensions are not needed).  You must use a \fBPKZIP 4.5\fR
compatible unzip, such as \fBunzip\ 6\fP or later, to extract files
from archives using the Zip64 extensions.
.\" --------------------
.\"
.SS Compression methods
.\"
In addition to the standard \fBDeflate\fP compression (method 8) and
\fBStore\fP methods, \fBzip 3.1\fP now supports \fBbzip2\fP (compression
method 12),
\fBLZMA\fP (method 14) and \fBPPMd\fP (method 98) compression if the
appropriate libraries
are included when \fBzip\fP is compiled (which is now the default).
\fB.zipx\fP archives are
supported, except for some compression methods such as \fBWavPack\fP
(method 97), \fBJpeg\fP (method 96) and \fBXZ\fP (method 95).  Some
of these (in particular XZ) may be supported by \fBzip\fP in the future.

Each compression method has advantages over the others.  For instance,
\fBDeflate\fP tends to be faster than the other methods (except \fBStore\fP),
but \fBPPMd\fP tends to compress best in many situations (but can be slow).
See the \fB-Z\fP option below for more on available compression methods.

A modern unzip (such as \fBunzip 6.1\fP or later) is needed to extract entries
compressed with the new methods.  Make sure the destination unzip supports
the selected compression method before using it.
.\" --------------------
.\"
.SS Encryption
.\"
In addition to standard \fBTraditional\fP (\fBZipCrypto\fR) zip encryption,
which is now considered weak by current standards, \fBzip 3.1\fR now supports
relatively strong \fBAES\fR encryption.  See \fB-Y\fR below for more on
encryption.

If AES encryption is included in \fBzip\fR, the following Encryption Notice
applies:

.RS
This distribution includes cryptographic software.  The country in which
you currently reside may have restrictions on the import, possession, use,
and/or re-export to another country, of encryption software.  BEFORE using
any encryption software, please check your country's laws, regulations and
policies concerning the import, possession, or use, and re-export of
encryption software, to see if this is permitted. See
<http://www.wassenaar.org/> for more information.

The U.S. Government Department of Commerce, Bureau of Industry and Security
(BIS), has classified this software as Export Commodity Control Number
(ECCN) 5D002.C.1, which includes information security software using or
performing cryptographic functions and makes it eligible for export under
the License Exception ENC Technology Software Unrestricted (TSU) exception.
.RE

.\" --------------------
.\"
.SS Streamed archives
.\"\fBStreamed\ archives.\fP
\fBStreaming\fP is when \fBzip\fP receives its input from a stream such as
stdin or a pipe where the size of the input is not known or when \fBzip\fP
writes its output to a stream such as stdout or a pipe where the output is
not seekable (and so data structures in the archive cannot be updated once
the sizes are later known).  A \fBstreamed archive\fP is an archive that uses
data descriptors (a small record after the file data) to store size and
other information not known when the processing of a file was started.  Not
all streaming operations need to create streamed archives--it depends on
\fBzip\fP's ability to determine size and other information before the file
header is written.  Traditional encryption also requires use of data
descriptors (and so the resulting archives are streamed archives) due to how
zip Traditional encryption is defined (AES encryption does not have this
issue).  (The --etwodd Traditional encryption option removes the need for data
descriptors at the cost of a second pass through the file data.)  Split
archives created
with the pause option (\fB-sp\fR) also use data descriptors to allow the
archive splits to be written to write once media (such as optical media)
without later seeking.  Streaming is generally automatic and transparent
to the user.

Streamed archives may not be compatible with some utilities as those utilities
do not yet know how to read data descriptors.  (Note that the latest PKWare
published zip standard now includes a description of the data descriptor
format \fBzip\fP uses.)  Many other utilities do support these archives,
however.
If you run into problems, \fBzip\fP provides a way to strip data descriptors
from an existing archive using the \fB\-\-copy\fP option.  (Zip Traditional
encryption relies on data descriptors.  If Zip Traditional encryption was
used, \fBzipcloak\fP can be used to remove the encryption first.  AES
encryption does not need data descriptors, and given the weakness of Zip
Traditional encryption, only AES encryption should be used if something
is worth encrypting.)

\fBzip 3.1\fP now can generate archives that a compatible stream unzip can
use to fully extract files on the fly, including file attributes.  This
new mode adds needed information to the local file entries in the archive.
Use \fB-st\fP to enable this mode.  If you find you need this mode often,
consider adding \fB-st\fR to the ZIPOPT environment variable so it's always
enabled.  (See \fBZIPOPT\fR below for how to do this.)  As \fB-st\fR slightly
increases the size of an archive, we decided to leave this optional and not
enable this mode by default.
.\" --------------------
.\"
.SS MSDOS/Windows drive letters
If input paths include drive letters, \fBzip\fR will strip the drive letter
when making the path relative (as required by the zip standard).  This can
create conflicts if files from two drives are being zipped and both include
some of the
same paths.  If two or more drive letters are to be included in an archive,
\fB-pp\fR or \fB-pa\fR can be used to add a prefix to paths, such as
"-pa c/" to add "c/" to the start of each path from the C: drive.  Each
drive should probably be added using a separate \fBzip\fR operation so that
paths from each drive can be properly prefixed.
.\" --------------------
.\"
.SS Mac OS X
.\"\fBMac OS X.\fP
Though previous Mac versions had their own \fBzip\fP port,
\fBzip\fP supports \fBMac\ OS\ X\fP as part of the \fBUnix\fR port and most
Unix features
apply.  References to "\fBMacOS\fR" below generally refer to Mac OS versions
older than OS X.  Mac OS X features supported by the Unix port, such as
resource forks via AppleDouble, are identified as \fBUnix\ Mac\ OS\ X\fP
features.
.\" --------------------
.\"
.SS Option Summary
Below is a quick summary of \fBzip\fR options.  See the \fBOPTIONS\fR section
below for details.  Before using an option you are not familiar with, do read
the details first as the short descriptions below leave out many key details.

.nf
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
Sh | Long               |  Description
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
a  | ascii              | [EBCDIC] Convert EBCDIC text to ASCII.
.RE
.RS 0
aa | all-ascii          | [EBCDIC] Same as -a, but convert all files.
.RE
.RS 0
A  | adjust-sfx         | Adjust offsets in self-extracting archive.
.RE
.RS 0
AC | archive-clear      | [WIN32] Clear archive bits.
.RE
.RS 0
AF | argfiles           | Enable/disable argfile processing.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
AS | archive-set        | [WIN32] Only files with archive bit set.
.RE
.RS 0
ad | ad-sort            | Sort AppleDouble files.
.RE
.RS 0
as | sequester          | [Unix Mac OS X] Sequester AppleDouble files.
.RE
.RS 0
B  | binary             | [VM/CMS, MVS] Force file to be read binary.
.RE
.RS 0
B  |                    | [TANDEM] Set Edit/Enscribe formatting.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
b  | temp-path          | Set directory used for temp file.
.RE
.RS 0
BC | backup-control     | Set directory of backup control file.
.RE
.RS 0
BD | backup-dir         | Set backup directory.
.RE
.RS 0
BF | binary-full-check  | Check entire text file for binary.
.RE
.RS 0
BL | backup-log         | Set path where backup log written to.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
BN | backup-name        | Set name of backup.
.RE
.RS 0
BT | backup-type        | Set type of backup (FULL, DIFF, or INCR).
.RE
.RS 0
c  | entry-comments     | Add/edit comments for each file/entry.
.RE
.RS 0
cc | entry-comment-file | Read entry comment from file.
.RE
.RS 0
cd | chdir              | Change current directory for all operations.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
ci | chindir            | Change current directory for input only.
.RE
.RS 0
C  | preserve-case      | [VMS] Preserve all case on VMS.
.RE
.RS 0
C2 | preserve-case-2    | [VMS] Preserve ODS2 case on VMS.
.RE
.RS 0
C5 | preserve-case-5    | [VMS] Preserve ODS5 case on VMS.
.RE
.RS 0
Cl | case-lower         | Convert names of added/updated to lowercase.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
Cu | case-upper         | Convert names of added/updated to uppercase.
.RE
.RS 0
   | corrupt            | Corrupt various things for test purposes.
.RE
.RS 0
d  | delete             | Remove (delete) entries from existing archive.
.RE
.RS 0
db | display-bytes      | Display bytes zipped and to go.
.RE
.RS 0
dc | display-counts     | Display count of entries zipped and to go.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
dd | display-dots       | Display progress dots.  Set by -ds.
.RE
.RS 0
de | display-est-to-go  | Display estimate of time to go.
.RE
.RS 0
df | datafork           | [MacOS, Unix Mac OS X] Only data forks.
.RE
.RS 0
dg | display-globaldots | Display global progress dots.
.RE
.RS 0
dr | display-rate       | Display est of rate entries being zipped.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
ds | dot-size           | Turn on dots, set bytes processed per dot.
.RE
.RS 0
dt | display-time       | Display time each entry started.
.RE
.RS 0
du | display-usize      | Display uncompressed size of each entry.
.RE
.RS 0
dv | display-volume     | Display volume (disk number) each entry.
.RE
.RS 0
D  | no-dir-entries     | Do not create entries for directories.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
DF | difference-archive | Include just changes since base archive.
.RE
.RS 0
e  | encrypt            | Encrypt entries, prompt for password.
.RE
.RS 0
et | etwodd             | For Trad encrypt, don't use data descriptors.
.RE
.RS 0
E  | longnames          | [OS/2] Use .LONGNAME extended attr for name.
.RE
.RS 0
f  | freshen            | Update existing entry if OS version newer.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
F  | fix                | Try fix relatively intact archive.
.RE
.RS 0
FF | fixfix             | Try fix archive -F can't fix.
.RE
.RS 0
FI | fifo               | Read content from fifos (named pipes) found,
.RE
.RS 0
FS | filesync           | Synchronize/compare archive with file system.
.RE
.RS 0
fd | force-descriptors  | Force use of data descriptors.  (Debug only.)
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
fz | force-zip64        | Force use of Zip64 extensions.
.RE
.RS 0
g  | grow               | Add to (grow) existing archive.
.RE
.RS 0
h  | help               | Display basic help screen.
.RE
.RS 0
hh | more-help          | Display extended (detailed) help.
.RE
.RS 0
i  | include            | Include files that match patterns.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
I  | no-image           | [Acorn RISC OS] Don't scan image files.
.RE
.RS 0
ic | ignore-case        | Ignore case when matching archive entries.
.RE
.RS 0
j  | junk-paths         | Store just file names, not paths.
.RE
.RS 0
jj | absolute-path      | [MacOS] Record full absolute path.
.RE
.RS 0
J  | junk-sfx           | Strip any prepended data (e.g. SFX stub).
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
k  | dos-names          | Attempt convert paths to conform to MSDOS.
.RE
.RS 0
kf | keyfile            | Get part or all of encryption key from file.
.RE
.RS 0
l  | to-crlf            | Convert line ends from Unix to MSDOS/Windows.
.RE
.RS 0
la | log-append         | Append to existing logfile.
.RE
.RS 0
lf | logfile-path       | Open a logfile at the given path.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
lF | log-output         | As -lf, but use output name as log name.
.RE
.RS 0
li | log-info           | Include info messages, like names, in log.
.RE
.RS 0
ll | from-crlf          | Convert line ends from MSDOS/Windows to Unix.
.RE
.RS 0
lu | log-utf8           | Put paths in log as UTF-8.
.RE
.RS 0
L  | license            | Display the license.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
m  | move               | Move files into archive (delete on OS).
.RE
.RS 0
MM | must-match         | All input patterns must match, be readable.
.RE
.RS 0
MV | mvs-mode           | [MVS] Set MVS path translation mode.
.RE
.RS 0
n  | suffixes           | Suffix do not compress/special compress list.
.RE
.RS 0
nw | no-wild            | No (internal) wildcard processing.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
N  | notes              | [Amiga, MacOS] Save filenotes as comments.
.RE
.RS 0
o  | latest-time        | Set archive "last modified" time to latest.
.RE
.RS 0
O  | output-file        | Output archive to new file.
.RE
.RS 0
p  | paths              | Include relative paths (default).
.RE
.RS 0
pa | prefix-add-path    | Prefix paths of added/updated entries.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
pn | non-ansi-password  | Remove only ANSI 7-bit password restriction.
.RE
.RS 0
pp | prefix-path        | Prefix all paths in archive.
.RE
.RS 0
ps | allow-short-pass   | Allow passwords shorter than minimum.
.RE
.RS 0
pt | performance-time   | Time zip operation.
.RE
.RS 0
pu | pswd-to-unzip      | When test, pass password to unzip.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
P  | password           | Provide password on command line.
.RE
.RS 0
p0 | print0             | Input paths separated by NUL (find -print0).
.RE
.RS 0
q  | quiet              | Quiet mode (less messages, prompts).
.RE
.RS 0
Q  | q-flag             | [QDOS] Set storage mode.
.RE
.RS 0
r  | recurse-paths      | Recurse each directory path.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
R  | recurse-patterns   | Recurse current directory, match path ends.
.RE
.RS 0
RE | regex              | Enable (internal) [] list matching.
.RE
.RS 0
s  | split-size         | Enable splitting, set split size.
.RE
.RS 0
sb | split-bell         | If splitting using -sp, ring bell when pause.
.RE
.RS 0
sc | show-command       | Show command line as read and exit.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
sd | show-debug         | Show debugging information.
.RE
.RS 0
sf | show-files         | Show files that would be processed.
.RE
.RS 0
sF | sf-params          | Add information to -sf listing.
.RE
.RS 0
si | show-pid           | Show pid of zip process.
.RE
.RS 0
so | show-options       | Show available options as compiled.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
sp | split-pause        | Pause between splits (-s) to change media.
.RE
.RS 0
ss | show-suffixes      | Show current settings of suffixes (-n).
.RE
.RS 0
st | stream             | Enable stream mode, allowing stream extract.
.RE
.RS 0
su | show-unicode       | As -sf, but also include UTF-8 paths.
.RE
.RS 0
sU | show-just-unicode  | As -su, but only show UTF-8 paths.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
sv | split-verbose      | Be verbose about splitting.
.RE
.RS 0
S  | system-hidden      | [MSDOS, OS/2, ATARI] Include system/hidden.
.RE
.RS 0
S  | system-hidden      | [MacOS] Include finder files.
.RE
.RS 0
SI | rename-stdin       | Rename stdin "-" archive entry.
.RE
.RS 0
t  | from-date          | Include files modified on or after date.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
tt | before-date        | Include files modified before date.
.RE
.RS 0
td | date-diff          | Account for time zone differences.
.RE
.RS 0
T  | test               | Test archive using unzip.
.RE
.RS 0
TT | test-command       | Set command used with -T to test archive.
.RE
.RS 0
TU | unzip-path         | Set path to unzip to test archive with.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
TV | unzip-verbose      | When testing with -T and unzip, be verbose.
.RE
.RS 0
u  | update             | Update entries if OS file newer, and add new.
.RE
.RS 0
U  | copy-entries       | Copy entries from one archive to another.
.RE
.RS 0
UD | unicode-dont-use   | Don't use Unicode fields (only -UL entries).
.RE
.RS 0
UE | unicode-escapes    | Replace Unicode characters with escapes.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
UL | unicode-local      | Store local path (and UTF-8 in extra field).
.RE
.RS 0
UN | unicode            | On Unicode error (quit/warn/ignore/no).
.RE
.RS 0
US | unicode-show       | Force show Unicode (should be automatic).
.RE
.RS 0
UT | utest              | Perform Unicode tests.  (Currently disabled.)
.RE
.RS 0
v  | verbose            | Display additional diagnostic information.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
v  | version            | Display compile and version information.
.RE
.RS 0
vq | quick-version      | Display short version information.
.RE
.RS 0
V  | vms-portable       | [VMS] Save VMS file attributes.
.RE
.RS 0
VV | vms-specific       | [VMS] As -V, but also save all file blocks.
.RE
.RS 0
w  | vms-versions       | [VMS] Include file version numbers in names.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
wl | windows-long-paths | [WIN32] Include paths > 260 chars in archive.
.RE
.RS 0
ww | vms-dot-versions   | [VMS] Like -w, but use "." for numbers.
.RE
.RS 0
ws | wild-stop-dirs     | Wildcards don't cross directory boundaries.
.RE
.RS 0
x  | exclude            | Exclude paths that match files/patterns.
.RE
.RS 0
X  | strip-extra           | Exclude all but essential extra fields.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
y  | symlinks           | [UNIX, WIN32] Store symlinks, don't follow.
.RE
.RS 0
yy | mount-points       | [WIN32] Don't follow mount points.
.RE
.RS 0
Y\ \ | encryption-method  | Enable encryption and set encryption method.
.RE
.RS 0
z  | archive-comment    | Set zip file comment.
.RE
.RS 0
zc | show-zip-comment   | Show the archive (zipfile) comment.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
zz | comment-file       | Read archive comment from file.
.RE
.RS 0
Z  | compression-method | Set default compression method.
.RE
.RS 0
0-9|                    | Set compression level.
.RE
.RS 0
!  | use-privileges     | [WIN32] Use privileges (if granted).
.RE
.RS 0
@  | names-stdin        | Get list of input files from stdin.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.RS 0
@@ | names-file         | Get list of input files from file.
.RE
.RS 0
$  | volume-label       | Include volume label of first file.
.RE
.RS 0
-----------------------------------------------------------------------
.RE
.ad

Additional information on how \fBzip\fR operates is sometimes included in
the details.  For instance, details on how Windows reparse points are
handled are included in the below description for \fB-yy\fR.
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH "USE"
.PP

The program is useful for packaging a set of files for distribution;
for archiving files;
and for saving disk space by temporarily
compressing unused files or directories.
.LP
The
.B zip
program puts one or more compressed files into a single
.B zip
archive,
along with information about the files
(name, path, date, time of last modification, protection,
and check information to verify file integrity, for instance).
An entire directory structure can be packed into a
.B zip
archive with a single command.
Compression ratios of 2:1 to 3:1 are common for text files.
.B zip
has one standard compression method (\fBDeflate\fR) and can also store files
without compression.  In addition, \fBzip\ 3.1\fR supports
compression methods \fBbzip2\fR, \fBLZMA\fR, and \fBPPMd\fR.
See the \fB\-Z\fR option below for more on compression methods.

In some cases (typically for very small files or random data), an
attempt to compress a file may actually increase its size (by a little).
When this happens for the Deflate, Bzip2 or PPMd compression methods
(but currently not for LZMA),
.B zip
automatically reverts to the Store method for that file.
.\".LP
.\" --------------------
.\"
.SS Command format
.\"\fBCommand\ format.\fP
The basic command format is
.IP
\fBzip\fR options archive inpath inpath ...
.LP
where \fIarchive\fR is a new or existing \fBzip\fP archive
and \fIinpath\fR is a directory or file path optionally including wildcards.
When \fIarchive\fP is the name of an existing
.B zip
archive,
.B zip
will replace identically named entries in the
archive (matching the relative names as stored in
the archive) or add entries for new names to the archive.
For example,
if
.I foo.zip
exists and contains
.I foo/file1
and
.IR foo/file2 ,
and the directory
.I foo
contains the files
.I foo/file1
and
.IR foo/file3 ,
then:
.IP
\fCzip -r foo.zip foo\fP
.LP
or more concisely
.IP
\fCzip -r foo foo\fP
.LP
will replace
.I foo/file1
in
.I foo.zip
and add
.I foo/file3
to
.IR foo.zip .
After this,
.I foo.zip
contains
.IR foo/file1 ,
.IR foo/file2 ,
and
.IR foo/file3 ,
with
.I foo/file2
unchanged from before.
.LP
So if before the \fBzip\fP command is executed \fIfoo.zip\fP has:
.IP
\fC foo/file1 foo/file2
.LP
and directory foo has:
.IP
\fC file1 file3\fP
.LP
then after the command \fIfoo.zip\fP will have:
.IP
\fC foo/file1 foo/file2 foo/file3\fP
.LP
where \fIfoo/file1\fP is replaced and
\fIfoo/file3\fP is new.
.\".PP
.\" --------------------
.\"
.SS -@ and -@@ File Lists
.\"\fB\-@\ file\ lists.\fP
If
\fB\-@\fP
is used [Not on MacOS],
.B zip
takes a list of input files from standard input instead of from
the command line.  For example,
.IP
\fCzip -@ foo\fP
.LP
will store the files listed one per line on stdin in \fIfoo.zip\fP.
.\"(\fBzip 3.1\fR now strips leading and trailing white space from paths
.\"read by \fB\-@\fR and \fB\-@@\fR.  White space (such as spaces) in
.\"the middle of names is not affected.  To prevent this stripping, put
.\"double quotes around the name, or consider using \fB\-\-print0\fR.)
Note that surrounding white space is not trimmed.  Make sure the
entire line matches the name.
.LP
Under Unix,
this option can be used to powerful effect in conjunction with the
\fBfind (1)\fP
command.
For example,
to archive all the C source files in the current directory and
its subdirectories:
.IP
\fCfind . -name "*.[ch]" -print | zip sourcefiles -@\fP
.LP
(note that the pattern must be quoted to keep the shell from expanding it).
.LP
(\fBzip\fR can perform this same operation without \fBfind\fR:
.IP
\fCzip source . -r -RE -i "*.[ch]"\fP
.LP
where \fB\-RE\fR enables [] (regular expression) matching.)
.LP
If unusual characters will be returned in names from find (such as newline
characters), consider using \fB\-\-print0\fR with the similar option of find.
.IP
\fCfind . -name "*.[ch]" -print0 | zip sourcefiles -@\fP --print0
.LP
.LP
\fBzip\fP now also supports \fB\-@@\ \fP\fIfilename\fP, which acts like
\fB\-@\fP, but reads the list of input files from file
\fIfilename\fP instead of stdin, one name per line.
.\".PP
.\" --------------------
.\"
.SS Argument Files (@argfile)
Argument files (argfiles) are text files that contain command line arguments
for \fBzip\fR.  \fBzip 3.1\fR supports argument files.
To include the contents of an argfile in the \fBzip\fR
command line, include the argument \fB@\fP\fIfilename\fP (no space
between \fB@\fR and \fIfilename\fR) at the position in
the command line the args are to go.  \fBzip\fP opens file \fIfilename\fP,
reads white space separated arguments and inserts them into the command
line.  The default file extension of \fBzip\fP argfiles is \fI.zag\fP.
So the contents of argfile \fImyargs.zag\fP can be included using
\fI@myargs\fP.

Argument file support must be enabled using the \fB-AF\fR option.  (This
could be done in an environment variable to enable by default on the
command line.)

For example, if \fImyargs.txt\fP contains:
.IP
\fC file1.txt  file2.txt\fP
.LP
the command line:
.IP
\fCzip  -AF  archive  @myargs.txt\fP
.LP
would create the \fBzip\fP command line:
.IP
\fCzip  archive  file1.txt  file2.txt\fP
.LP
In an argfile, empty lines or lines with just white space are considered
comment lines.  In addition, an argument that is just "#" starts a comment
that goes to the end of the line.  (No non-space characters can be next to
the "#".)  For instance, if \fImyopts.zag\fR contains:
.IP
.RS
#  myopts.zag
.RE
.RS
#  my favorite options
.RE
.RS
  -3   -lF    #  compression level 3, create logfile
.RE
.LP
then the command line:
.IP
\fCzip  -AF  @myopts  archive  @myargs.txt\fP
.LP
would result in the command line:
.IP
\fCzip  -3  -lF  archive  file1.txt  file2.txt\fP
.LP
Argfiles can include argfiles to a depth of 4, so we can package this
command as \fIcommandline.zag\fR:
.IP
\fC@myopts  archive  @myargs.txt\fP
.LP
and the command line:
.IP
\fCzip  -AF  @commandline\fP
.LP
creates the same command line as above:
.IP
\fCzip  -3  -lF  archive  file1.txt  file2.txt\fR
.LP
Use the \fB-sc\fP option to see the resulting command line without
executing it.  So:
.IP
\fCzip  -AF  @commandline -sc\fP
.LP
displays
.IP
command line:
\fC 'zip'  '-AF'  '-3'  '-lF'  '-sc'  'archive'  'file1.txt'  'file2.txt'\fR
.LP
Argfiles can also contain directives.  A directive starts at the left
edge (excluding white space) and is an argument in the form #directive.
Currently the only directive is \fB#echo\fP, which echos what follows to the
console/message stream.  So if argfile \fImyfiles.zag\fP has the line:
.IP
\fC  #echo  I'm here in the argfile\fP
.LP
then the message \fB"myfiles.zag : I'm here in the argfile"\fP will display when
\fBzip\fP parses this line.  \fB#echo\fP can be useful when debugging complex
argfiles.

Option \fB-AF-\fP can be used to turn off processing argfiles, so
\fI@args.txt\fP becomes just another file.  \fB-AF-\fP must appear before any
argfile arguments on the command line.  Alternating \fB-AF\fR and \fB-AF-\fR
can be used to selectively turn on and off argfile processing on a per
argument basis as the command line is processed left to right.  For example:
.IP
\fCzip  archive  @somefile  -AF  @argfile  -AF-  @justanotherfile\fR
.LP
.\".PP
.\" --------------------
.\"
.SS Streaming input and output
.\"\fBStreaming\ input\ and\ output.\fP
.B zip
will also accept a single dash ("-") as the zip file name, in which case it
will write the zip file to standard output, allowing the output to be piped
to another program. For example:
.IP
\fCzip -r - . | dd of=/dev/nrst0 obs=16k\fP
.LP
would write the zip output directly to a tape with the specified block size
for the purpose of backing up the current directory.
.LP
.B zip
also accepts a single dash ("-") as the name of a file to be compressed, in
which case it will read the file from standard input, allowing \fBzip\fP to take
input from another program. For example:
.IP
\fCtar cf - . | zip backup -\fP
.LP
would compress the output of the \fBtar\fP command for the purpose of backing up
the current directory. This generally produces better compression than
the previous example using the -r option because
.B zip
can take advantage of redundancy between files. The backup can be restored
using the command
.IP
\fCunzip -p backup | tar xf -\fP
.LP
When no zip file name is given and stdout is not a terminal,
.B zip
acts as a filter, compressing standard input to standard output.
For example,
.IP
\fCtar cf - . | zip | dd of=/dev/nrst0 obs=16k\fP
.LP
is equivalent to
.IP
\fCtar cf - . | zip - - | dd of=/dev/nrst0 obs=16k\fP
.LP
(If \fB--stdinout-tty\fR is used, "\fBzip - -\fR" must be used.  See
\fB--stdinout-tty\fR for more regarding streaming on CYGWIN.)
.LP
.B zip
archives created in this manner can be extracted with the program
.B funzip
which is provided in the
.B unzip
package, or by
.B gunzip
which is provided in the
.B gzip
package (but some
.B gunzip
may not support this if
.B zip
used the Zip64 extensions). For example:
.IP
\fPdd if=/dev/nrst0  ibs=16k | funzip | tar xvf -\fC
.LP
The stream can also be saved to a file and
.B unzip
used.

(Note that \fBfunzip\fR only extracts the first entry in the streamed
archive.  The current \fBunzip 6.1\fR beta provides preliminary input stream
support.  By release of \fBunzip 6.1\fR, it should be possible to
use \fBunzip\fR instead of \fBfunzip\fR.)

If Zip64 support for large files and archives is enabled and
\fBzip\fR is used as a filter, \fBzip\fR creates a Zip64 archive
that requires a \fBPKZIP 4.5\fR or later compatible unzip to read it.  This
is to avoid ambiguities in the zip file structure as defined in the current
zip standard (PKWARE AppNote) where the decision to use Zip64 needs to
be made before data is written for the entry, but for a stream the size
of the data is not known at that point.  If the data is known to be smaller
than 4 GB, the option \fB\-fz\-\fP can be used to prevent use of Zip64,
but \fBzip\fP will exit with an error if Zip64 was in fact needed.
\fBzip\ 3\fR and \fBunzip\ 6\fR and later can read archives with Zip64
entries.  Also, \fBzip\fP removes the Zip64 extensions if not needed
when archive entries are copied (see the \fB\-U\fP (\fB\-\-copy\fP)
option).  \fBzip 3.1\fR now handles entries near 4 GiB more gracefully,
only using Zip64 when actually needed.  However, if both input and
output are streamed, Zip64 can't be avoided (but still can be turned
off using \fB\-fz\-\fR).

When directing the output to another file, note that all arguments should be
before the redirection including \fB-x\fP.  For example:
.IP
\fPzip archive "*.h" "*.c" -x donotinclude.h orthis.h > tofile\fC
.\".PP
.\" --------------------
.\"
.SS Zip files
.\"\fBZip\ files.\fP
When changing an existing
.B zip
archive,
.B zip
will write a temporary file with the new contents,
and only replace the old one when the process of creating the new version
has been completed without error.  (An exception is the \fB\-g\fP
(\fB\-\-grow\fP) option, which appends to the original archive.)

If the name of the
.B zip
archive does not contain an extension, the extension
\fB.zip\fP
is added. If the name already contains an extension other than
\fB.zip\fP,
the existing extension is kept unchanged.  However, split archives
(archives split over multiple files) require the \fB.zip\fP extension
on the last split and the correct extension numbers on the other splits.
.\".PP
.\" --------------------
.\"
.SS Scanning and reading files
.\"\fBScanning\ and\ reading\ files.\fP
When \fBzip\fP starts, it scans for files to process (if needed).  If
this scan takes longer than about 5 seconds, \fBzip\fP will display
a "Scanning files" message and start displaying progress dots every 2 seconds
or every so many entries processed, whichever takes longer.  If there is more
than 2 seconds between dots it could indicate that finding each file is taking
time and could mean a slow network connection for example.
(Actually the initial file scan is
a two-step process where the directory scan is followed by a sort and these
two steps are separated with a space in the dots.  If updating an existing
archive, a space also appears between the existing file scan and the new
file scan.)  The scanning files dots are not controlled by the \fB\-ds\fP
dot size option, but the dots are turned off by the \fB\-q\fP quiet option.  The
\fB\-sf\fP show files option can be used to scan for files and get the list of
files scanned without actually processing them.

If \fBzip\fR is not able to read a file, it
issues a warning but
continues.  See the \fB\-MM\fP option below for more on how \fBzip\fP handles
patterns that are not matched and files that are not readable.
If some files were skipped, a
warning is issued at the end of the zip operation noting how many files
were read and how many skipped.
.\".PP
.\" --------------------
.\"
.SS Command modes
.\"\fBCommand\ modes.\fP
\fBzip\fP now supports two distinct types of command
modes, \fBexternal\fP and \fBinternal\fP.  The \fBexternal\fP modes
(add, freshen, and update) read files from the file system (as well as from an
existing archive) while the \fBinternal\fP modes (copy and delete) operate
exclusively on entries in an existing archive.

.TP
External modes:

.TP
.B add\ \ \ \ \ \
Update existing entries and add new files.  If the archive does not exist
create it.  This is the default mode.
.TP
.B freshen\ \fP(\fB\-f\fP)
Update existing entries of an archive if newer on the file system.
Does not add new files to the archive.
.TP
.B update\ \fP(\fB\-u\fP)
Update existing entries if newer on the file system and add new files.  If
the archive does not exist, issue a warning and then create a new archive.

.TP
Internal modes:

.TP
.B copy\ \fP(\fB\-U\fP)
Select entries in an existing archive and copy them to a new archive.
This new mode is similar to \fBupdate\fP but command line patterns
select entries in the existing archive rather than files from
the file system and it uses the \fB\-\-out\fP option to write the
resulting archive to a new file rather than update the existing
archive, leaving the original archive unchanged.
.TP
.B delete\ \fP(\fB\-d\fP)
Select entries in an existing archive and delete them.  For backward
compatibility this deletes entries in the input archive, but \fBdelete\fR
can be used with \fB--out\fP to create a copy of the input archive
with the files deleted, leaving the input archive unchanged.  When used
with \fB--out\fR, \fBdelete\fR and \fBcopy\fR are opposites, where
\fBdelete\fR copies the files that \fBcopy\fR doesn't, and vice versa.
.LP
The new File Sync option (\fB\-FS\fP) is also considered a new mode,
though it is similar to \fBupdate\fP.  This mode synchronizes the
archive with the files on the OS, only replacing files in the
archive if the file time or size of the OS file is different, adding
new files, and deleting entries from the archive where there is
no matching file.  As this mode can delete entries from the archive,
consider making a backup copy of the archive first.

Also see \fB\-DF\fP for creating difference archives and \fB-BT\fR for
creating backup sets.

Be aware that system clock and time zone changes can impact matching
a particular archive entry time to a file system time, and could result
in files being considered changed when only the time zone changed or
there was a change in Daylight Saving Time status.  The \fB-td\fR option
may be useful in these situations.

See each option description below for details and the \fBEXAMPLES\fP section
below for examples.
.\".PP
.\" --------------------
.\"
.SS Split archives
.\"\fBSplit\ archives.\fP
\fBzip\fP version 3.0 and later can create split archives.  A
\fBsplit archive\fP is a standard \fBzip\fP archive split over multiple
files.  (Note that split archives are not just archives split into
pieces, as the offsets of entries are now based on the start of each
split.  Concatenating the pieces together will invalidate these offsets,
but \fBunzip\fP can usually deal with it.  \fBzip\fP will usually refuse
to process such a spliced archive unless the \fB\-FF\fP fix option is
used to fix the offsets.)

One use of split archives is storing a large archive on multiple
removable media.
For a split archive with 20 split files the files are typically named (replace
ARCHIVE with the name of your archive) \fIARCHIVE.z01\fP,
\fIARCHIVE.z02\fP, ..., \fIARCHIVE.z19\fP, \fIARCHIVE.zip\fP.  Note that
the last file is the \fB.zip\fP file.  In contrast,
\fBspanned archives\fP are the original multi-disk archive format generally
requiring floppy disks and using volume labels to store disk numbers.
\fBzip\fP supports split archives but not spanned archives, though a
procedure exists for converting
split archives of the right size to spanned archives.  The reverse is also
true,
where each file of a spanned archive can be copied in order to files with the
above names to create a split archive.

Use \fB\-s\fP to set the split size and create a split archive.  The size is
given as a number followed optionally by one of k (kiB), m (MiB), g (GiB),
t (TiB), or p (PiB) (the default is m).
The \fB\-sp\fP option can be used to pause \fBzip\fP between
splits to allow changing removable media, for example, but read the descriptions
and warnings for both \fB\-s\fP and \fB\-sp\fP below.
.LP
Though \fBzip\fP does not update split archives, \fBzip\fP provides the new
option \fB\-O\fP (\fB\-\-output\-file\fP or \fB\-\-out\fP) to allow split archives
to be updated and saved in a new archive.  For example,
.IP
\fCzip inarchive.zip foo.c bar.c \-\-out outarchive.zip\fP
.LP
reads archive \fBinarchive.zip\fP, even if split, adds the files \fBfoo.c\fP and
\fBbar.c\fP, and writes the resulting archive to \fBoutarchive.zip\fP.  If
\fBinarchive.zip\fP is split then \fBoutarchive.zip\fP defaults to the same
split size.  Be aware that if \fBoutarchive.zip\fP and any split files that are
created with it already exist, these are always overwritten as needed without
warning.  This may be changed in the future.

\fBunzip 6.00\fR and earlier do not read split archives.  One workaround is to use
\fB-s-\fR to convert a split archive to a single file archive that
\fBunzip 6.00\fR can read.  Another is to use \fBzipsplit\fR to convert
the split archive to a set of separate archives \fBunzip\fR can read as a
group.  \fBunzip 6.1\fR can read split archives.
.\".PP
.\" --------------------
.\"
.SS Unicode
.\"\fBUnicode.\fP
Though the zip standard requires storing file names/paths in
an archive using a specific character set, in practice zips have stored
paths in archives in whatever the local character set is.  This facilitates
local use of these archives, but creates
problems when an archive is created or updated on a system using one
character set and then extracted on another system using a different
character set.  When compiled with Unicode support enabled, \fBzip 3.0\fP
stores, in addition to the
standard local path for backward compatibility, the UTF-8 translation of
the path.  This provides a (mostly) common universal character set for storing
paths that allows these paths to be fully extracted on other systems that
support Unicode and to match as closely as possible the original path
on systems that don't.  (More on "mostly" below.)

However, since \fBzip 3.0\fP was released, the zip community has moved to
UTF-8 as the primary character set for storing paths in archives.  As
such, the default for \fBzip 3.1\fP is to store UTF-8 only.  The previous
mode of storing local and UTF-8 is available using the \fB-UL\fP
option.  (Entries made with either should be accepted by most modern unzips.)
Let us know if this change causes any issues.

For full Unicode support on Linux and similar Unix systems, make sure you
are using a UTF-8 locale.  The \fBlocale\fR command should show
something like "your_language.UTF-8", for example "en_US.UTF-8".  A
UTF-8 native locale is needed for \fBzip\fR to naturally work with multiple
languages.  If you are using a local locale (a local not ending in ".UTF-8"),
\fBzip\fR will detect this and issue Unicode escape sequences (such as
\fB#U1234\fR or \fB#L123456\fR, where the number is the hex code of the
Unicode character) instead of characters not in your current local character
set.  Using a native UTF-8 locale makes working with multiple languages much
easier and more natural.  "zip -v" should show the current character set.

On systems (such as Win32) where paths are internally stored as Unicode but
displayed in the local character set (Windows code page), it's possible that
some paths will be skipped during a local character set directory scan.
\fBzip\fP with Unicode file scan support now can read and store these paths.
Note that Win 9x systems and FAT file systems don't fully support Unicode.

Be aware that console windows on Win32 and Unix, for example, sometimes don't
accurately show all characters due to how each operating system switches in
character sets for display.  However, directory navigation tools should show the
correct paths if the needed fonts are loaded.  In particular, Windows 7 console
windows can't display characters not loaded in the console, such as Japanese.
Windows 10 looks to have full Unicode support in command windows.

Note that Unicode paths can be quite long.  On Windows the default maximum
path length is 260 bytes.  The new option \fB-wl\fP allows storing long
Windows paths, though restoring them requires support by the unzip.

Some systems, such as systems using the EBCDIC character set, have had
problems using the somewhat ANSI oriented Unicode character set.  Though
\fBzip\fR and \fBunzip\fR should handle these cases, be aware of this when
moving archives between EBCDIC systems and other non-EBCDIC systems such
as Unix and Windows.
.\".PP
.\" --------------------
.\"
.SS Unicode escapes
.\"\fBUnicode escapes.\fP
\fBzip\fR generally works in some local environment, but stores Unicode
paths in the archive to facilitate the archive being used in other
environments with possibly different local character sets.  So \fBzip\fR
needs to convert between local and Unicode character sets and back.

Characters that are not valid in the current character set when displayed
are escaped as \fB#Uxxxx\fP and \fB#Lxxxxxx\fP, where \fIx\fP is an ASCII
character for a hex digit.  The first is used if a 16-bit character number
is sufficient to represent the Unicode character and the second if the
character needs more than 16 bits to represent its Unicode character code.
\fBzip 3.1\fR does not do transliteration, any characters not in the
destination character set now being replaced by Unicode escapes.  This
allows one-for-one deterministic conversion between paths with UTF-8
characters and paths with Unicode escapes.

\fBzip\fR can read and use Unicode escapes.  This allows for working
with entries in an archive within an environment where some of the
characters in the paths are not supported by the local character set.
.\".PP
.\" --------------------
.\"
.SS Windows long paths
.\"\fBWindows long paths.\fP
The maximum path length fully supported on Windows
systems is generally 260 bytes.  Longer paths can be created programmatically,
however.  In the past \fBzip\fP could not read these longer paths and skipped
them.  \fBzip\ 3.1\fP can now read and store these paths and files.  However, an unzip
that can handle long paths is needed to restore such entries.  In particular,
Windows Explorer (as of Windows 7) will generally refuse to read archives
that contain long paths.  (7-Zip, for instance, can handle these long paths.)

That said, we have made including Windows long paths the default.  The user
needs to ensure long paths are not included in any archive to be opened by
Windows Explorer or other utilities that can't handle long paths.  \fBzip\fP
will warn if a Windows long path is being included.  \fB-wl-\fP can be used
to leave out long paths.
.\".PP
.\" --------------------
.\"
.SS Command line format
.\"\fBCommand line format.\fP
\fBzip 3.0\fP and later use updated command line
processing that includes support for long options.
.PP

\fBShort options\fP in an argument take the form
.IP
\fC-s[-][s[-]...][s[-|value|=value|\ value]]\fP
.LP
where s is a one or two character short option.  A short option
that takes a value must be last in an argument and anything after it is
taken as the value.  If the option can be negated and "-" immediately
follows the option, the option is negated.
Short options can also be given as separate arguments
.IP
\fC-s[-|value|=value|\ value]\ -s[-|value|=value|\ value]\ ...\fP
.LP
Short options in general take values either as part of the same
argument or as the following argument.  An optional = is also supported.
So
.IP
\fC-tt12071991\fP
.LP
and
.IP
\fC-tt=12071991\fP
.LP
and
.IP
\fC-tt 12071991\fP
.LP
all work to set the before date to 1991-12-07.  The \fB\-x\fP and
\fB\-i\fP options accept lists of values
and use a slightly different format described below.  See the
\fB\-x\fP and \fB\-i\fP options.

Some options in \fBzip 3.1\fR now take \fBoption value lists\fR.  These
are lists of flag values separated by commas.  For instance:
.IP
\fCzip  -sf  -sF usize,comment  archive\fP
.LP
shows the files in \fIarchive\fR, including uncompressed sizes and
any entry comments.  See \fB-sF\fR for more on option value lists.
.PP

\fBLong options\fP take the form
.IP
\fC--longoption[-|=value|\ value]\fP
.LP
where the option starts with "--", has a multicharacter name, can
include a trailing dash to negate the option (if the option
supports it), and can have a value (option argument) specified by
preceding it with = (no spaces) if the option can take a value.
Values can also be given as the following argument.  So
.IP
\fC--before-date=12071991\fP
.LP
and
.IP
\fC--before-date 12071991\fP
.LP
both work.

Long option names are currently not case sensitive.  So
.IP
\fC--before-date=12071991\fP
.LP
and
.IP
\fC--BEFORE-DATE 12071991\fP
.LP
both are the same long option.  Note that short options ARE
case sensitive.

Long option names can be shortened to the shortest unique
abbreviation.  See the option descriptions below for which
support long options.  To avoid confusion, avoid abbreviating
a negatable option with an embedded dash ("-") at the dash
if you plan to negate it (the parser would consider
a trailing dash, such as for the option \fB\-\-some\-option\fP using
\fB\-\-some\-\fP as the option, as part of the name rather
than a negating dash).  This may be changed to force the last
dash in \fB\-\-some\-\fP to be negating in the future.

As of \fBzip 3.1\fP the forms
.IP
\fC-s = value\fP
.LP
and
.IP
\fC--longoption = value\fP
.LP
are also accepted.  Any white space between the "=" and the option
or value is ignored.  For clarity, space around the "=" should be
avoided.  Better to use one of the other forms instead.  This form
may be deprecated in the future due to some cases where this can
be misinterpreted, such as when a file is named "=".

Some options support \fBoptional values\fP.  An optional value must
include a preceding "="; this is done to avoid ambiguities.
For example:
.IP
\fC-BL\fP
.LP
enables backup logging using the default backup log directory, while
.IP
\fC-BL=backuplogdir\fP
.LP
also enables backup logging but sets the backup log directory
to \fIbackuplogdir\fP.
.\".PP
.\" --------------------
.\"
.SS Unix shell processing
On Unix, \fBzip 3.0\fR and earlier relied on shell globbing to expand wildcards
on the command line.  So given
.IP
\fCzip  foo  *.[ch]  -i "test*"\fP
.LP
\fBzip\fR would receive all file names ending with \fI.c\fR and \fI.h\fR from
the shell instead of the wildcard expression \fI*.[ch]\fR, and then would filter
those names to find any starting with \fItest\fR internally.  (Filters, such
as \fB-i\fR, \fB-x\fR and \fB-R\fR have always required escaping or quoting
to avoid shell expansion.)  However, escaping input files, as in:
.IP
\fCzip  foo  "*.[ch]"  -i "test*"\fP
.LP
would not work on Unix as \fI*.[ch]\fR would be handled as a literal file name
and the wildcards would not be processed.  (This works on other ports, such
as Windows, that perform internal wildcard handling.  Just not on Unix.)

\fBzip 3.1\fR now internally processes wildcards in input file names so the
results with and without quotes should be the same.  This now allows file
names with spaces and wildcards to be properly processed:
.IP
\fCzip  foo  -RE  "file name with spaces*.[ch]"\fP
.LP
(\fB-RE\fR is needed to enable [] list matching.)
.\".PP
.\" --------------------
.\"
.SS Verbatim processing
The special argument "\fB--\fR" starts verbatim processing of the rest of the
command line.  This allows file paths starting with "-" to be processed as
files and not options.  Wildcard processing is also turned off after "\fB--\fR",
but shell expansion (globbing) will still happen unless wildcards are escaped
or paths quoted.

To include \fI*.[ch]\fR in foo as a literal file name, "\fB--\fR" can be used:
.IP
\fCzip  foo  --  "*.[ch]"\fP
.LP
All wildcard processing is disabled after \fB--\fR is seen on the command line,
these arguments taken as verbatim.
.IP
\fCzip  foo  --  -file  @justafile  "file*with?wildcards" \fP
.LP
will include these files in \fIfoo\fR.  Any shell wildcards or special
characters still need to be escaped or quoted to avoid shell processing.
.\".PP
.\" --------------------
.\"
.SS Time zones
As many operations, such as \fB-f\fP and \fB-u\fP, compare file times to
determine if a file has changed, it's important for these commands that
the time be consistent between zip operations.  Part of this is making
sure the proper time zone is set.

In addition, care must be taken when using file systems that do not store
file times as UT (such as FAT32).  Daylight Saving Time changes can cause
problems with using these and other options that depend on file times.
Creating an archive in one time zone and using it in another can also cause
issues.  In these cases a likely outcome is all files will look changed and
be included in an update operation.  So when an archive is being used in a
different time zone, it may be best to use file systems that store times as
UT or avoid operations that depend on comparing file times.  When an update
operation does capture unchanged files due to a time change, the \fB-td\fR
option may be useful to account for the time shift.

See the \fB-f\fP option for more on time zones.
.\".PP
.\" --------------------
.\"
.SS Listing files
The option \fB-sf\fR, when used with an existing archive and where no
input files are specified, lists the files in that archive.  When
input files are specified, \fB-sf\fR lists the files that would be
operated on if \fB-sf\fR was not in the command line.

When \fB-sf\fR is used with \fB-FS\fR, \fbzip\fR lists the operations
that would be needed to make the archive like the file system, essentially
showing the differences between the two.

See the descriptions of \fB-sf\fR and \fB-FS\fR below for more.
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH "OPTIONS"
See the \fBzip\fR extended help (\fBzip -hh\fR) for a quick breakdown of
options by function.

.TP
.PD 0
.BI \-a
.TP
.PD
.B \-\-ascii
[Systems using EBCDIC] Translate contents of text files from the EBCDIC
character set to the ASCII character set.
\fBzip\fR needs to detect the file as text for the conversion to happen,
otherwise the file is handled as having binary contents and not converted.

See \fB-ll\fR for more on binary/text detection.

.TP
.PD 0
.BI \-aa
.TP
.PD
.B \-\-all-ascii
[Systems using EBCDIC] Same as \fB-a\fR, but all files are considered text
and converted from EBCDIC to ASCII.

.TP
.PD 0
.B \-A
.TP
.PD
.B \-\-adjust-sfx
Adjust self-extracting executable archive.
A self-extracting executable archive is created by prepending
the SFX stub to an existing archive. The
.B \-A
option tells
.B zip
to adjust the entry offsets stored
in the archive to take into account this "preamble" data.

Note: Self-extracting archives for the Amiga are a special case.
At present, only the Amiga port of \fBzip\fR is capable of adjusting
or updating these without corrupting them. \fB-J\fR can be used to remove
the SFX stub if other updates need to be made.

.TP
.PD 0
.B \-AC
.TP
.PD
.B \-\-archive-clear
[WIN32]  Once archive is created (and tested if \fB\-T\fR is used,
which is recommended), clear the archive bits of files processed.
This option is typically used with \fB-AS\fR.

WARNING:
Once the bits are cleared they are cleared.  You may want to use the
\fB\-sf\fP show files option to store the list of files processed before
performing the archive operation in case
the archive operation must be repeated.  Also consider using
the \fB\-MM\fR must match option.  Be sure to check out \fB\-DF\fR and
\fB-BT\fR as possibly better ways to do incremental backups.

.TP
.PD 0
.B \-AF
.TP
.PD
.B \-\-argfiles
Enable processing argfiles.  An argfile is a text file that contains
command line arguments for \fBzip\fP separated by white space.  Given an
argfile with name \fImyargs.txt\fP, the command line:
.RS
.IP
\fCzip @myargs.txt\fR
.RE
.IP
results in \fi@myargs.txt\fR being replaced on the command line by the
arguments in the file.

Argfiles are disabled by default.  \fB-AF\fR turns on recognition of
arguments starting with '@' as argfiles.  Negating this option, \fB-AF-\fR,
turns off argfile processing, making \fI@myargs.txt\fR just
another file name on the command line.

Don't confuse argfiles with options \fB-@\fR and \fB-@@\fR, which read
file lists from stdin and from a file, respectively, those names separated
by either newlines or NUL bytes (if \fB\-\-print0\fR used).

For more information, see the subsection on \fBArgument Files\fR above.

.TP
.PD 0
.B \-AS
.TP
.PD
.B \-\-archive-set
[WIN32]  Only include files that have the archive bit set.  Directories
are not stored when \fB\-AS\fR is used, though by default the paths
of entries, including directories, are stored as usual and can be used
by most unzips to recreate directories.

The archive bit is set by the operating system when a file is modified
and, if used with \fB\-AC\fR, \fB\-AS\fR can provide an
incremental backup capability.  However, other applications can
modify the archive bit and it may not be a reliable indicator of
which files have changed since the last archive operation.  Alternative
ways to create incremental backups include using \fB\-t\fR and \fB-tt\fR
to use file dates
(though this won't catch old files copied to directories being archived),
file sync (\fB-FS\fR) to update an archive to match the file system,
and \fB\-DF\fR to create a differential archive.  For more serious backup
operations, consider \fB-BT\fR.

.TP
.PD 0
.B \-ad
.TP
.PD
.B \-\-ad-sort
Sort file system AppleDouble "._" files after the files they
apparently go with.  The default on Unix Mac OS X (Mac OS X) systems is to
sort AppleDouble "._" files created by \fBzip\fR (to store meta data) after
the files they go with.  The \fB-ad\fR option also includes any "._"
files already on the file system and in the target scope in this sorting
as if they were generated by \fBzip\fR.  On Unix Mac OS X systems this
generally has limited utility, as the AppleDouble files \fBzip\fR generates
should contain the latest meta data (e.g. resource fork information).

On systems other than Unix Mac OS X, \fB-ad\fR allows storing apparent
AppleDouble files found on the file system within the target scope after
the files they apparently go with, creating an archive that allows
\fBunzip\fR to restore the meta data on a Unix Mac OS X system.

This option supports the scenario where a \fbzip\fR archive is created
on a Unix Mac OS X system, transferred to another system that is not Unix
Mac OS X, the files extracted and the data files updated, then \fBzip\fR
used to rearchive the files for transfer to a Unix Mac OS X system.  Using
\fB-ad\fR when rearchiving the files will sort the AppleDouble files
properly so the resulting archive will have readable AppleDouble data
on the target Unix Mac OS X system.

See \fB-as\fR and \fB-df\fR for more information about AppleDouble.

.TP
.PD 0
.B \-as
.TP
.PD
.B \-\-sequester
[Unix Mac OS X]  Save AppleDouble resource files in a sequestered directory,
instead of in the directory where the data fork file is.   By default, on
Unix Mac OS X systems \fBzip\fR places the AppleDouble "._" files in the
same directory as the files they go with.  When sequestering is used, the
finder and resource information get stored in a single \fB__MACOSX/\fR
directory at the root of the zip archive.  (See \fB-df\fR for more on how
\fBzip\fR saves Mac OS metadata.)

.TP
.PD 0
.B \-B
.TP
.PD
.B \-\-binary
[VM/CMS and MVS] Force file to be read binary (default is text).

.TP
.B \-B\fR\fIn\fP
[TANDEM] Set Edit/Enscribe formatting options with \fIn\fP defined as
.RS
bit  0: Don't add delimiter (Edit/Enscribe)
.RE
.RS
bit  1: Use LF rather than CR/LF as delimiter (Edit/Enscribe)
.RE
.RS
bit  2: Space fill record to maximum record length (Enscribe)
.RE
.RS
bit  3: Trim trailing space (Enscribe)
.RE
.RS
bit  8: Force 30K (Expand) large read for unstructured files
.RE
.TP
\ \ \ \ \ \ \
Note:  For backward compatibility, this option requires a number directly
following the \fB\-B\fR (no spaces).

.TP
.PD 0
.BI \-b\ \fR\fIpath\fR
.TP
.PD
.B \-\-temp-path\ \fR\fIpath\fR
Use the specified
.I path
for the temporary
.B zip
archive. For example:
.RS
.IP
\fCzip -b /tmp stuff *\fR
.RE
.IP
will put the temporary
.B zip
archive in the directory
.IR /tmp ,
copying over
.I stuff.zip
to the current directory when done. This option is useful when
updating an existing archive and the file system containing this
old archive does not have enough space to hold both old and new archives
at the same time.  It may also be useful when streaming in some
cases to avoid the need for data descriptors.  Note that using
this option may require \fBzip\fP take additional time to copy
the archive file when done to the destination file system.

.TP
.PD 0
.B \-BC \fR\fIcontroldir\fP
.TP
.PD
.B \-\-backup-control \fR\fIcontroldir\fR
Set directory of backup control file.  The name of the \fBzip\fR backup
control file is given by \fB-BN\fR with \fB_control.zbc\fR appended.

Used with \fB-BT\fP to create a repeatable backup cycle.  \fB-BC\fP allows
selecting the location where the backup control file is written and
maintained.  If \fB-BC\fP is not given, \fB-BD\fP is used for the control
directory instead.  See \fB-BT\fP for more information on setting
up repeatable backup cycles.

.TP
.PD 0
.B \-BD \fIbackupdir\fP
.TP
.PD
.B \-\-backup-dir \fIbackupdir\fP
Set the directory for the backup archive.  Also sets the default location
of the control and log files unless \fB-BC\fR or \fB-BL\fR are used to
set a different control file directory or backup log directory.

Used with \fB-BT\fR to create a repeatable backup cycle.  \fB-BD\fR sets
the path/directory where the backup archive goes.  The archive name is
given by \fB-BN\fR.  See \fB-BT\fR for more information on setting up
repeatable backup cycles.

.TP
.PD 0
.B \-BF
.TP
.PD
.B \-\-binary-full-check
Check entire file for binary.  Normally \fBzip\fR only checks the first
couple buffers for binary and, if not found, the file is labeled a
text file.  This check is usually very reliable, but can be wrong if
there's binary late in a large file.  \fB-BF\fR forces \fBzip\fR to
check the entire file.

\fB-BF\fR is automatically set if \fB-l\fR, \fB\-ll\fR, or \fB-a\fR
are used so that the text/binary decision can be validated and action
taken if conversions were done to a binary file.

See \fB-ll\fR for more on text/binary checks.

.TP
.PD 0
.B \-BL
.TP
.PD 0
.B \-BL=\fR\fIbackuplogdir\fR
.TP
.PD 0
.B \-\-backup-log
.TP
.PD
.B \-\-backup-log=\fR\fIbackuplogdir\fR
Set the path/directory the backup log file is written to.

\fB-BL\fR is for use with \fB-BT\fR only.  For normal logging, use
\fB-lf\fR or \fB-lF\fR instead.

\fIbackuplogdir\fP is optional.  If \fB-BL\fR is given without specifying
a log directory, the backup directory given by \fB-BD\fR is used.  The
name of the log is the same as the archive, except that \fI.zip\fR is
replaced by \fI.log\fR.

Used with \fB-BT\fR to create a repeatable backup cycle.  \fB-BL\fR enables
logging of repeatable backup cycles and sets the location that the log is
written to if \fIbackuplogdir\fR is provided.  See \fB-BT\fR for more
information on setting up repeatable backup cycles.

Note that \fB-BT\fR creates date/timestamped archive names and so the logfiles
will also have date/timestamped names.

.TP
.PD 0
.B \-BN \fIbackupname\fR
.TP
.PD
.B \-\-backup-name \fIbackupname\fR
Set the name of the backup.  This name is used for the control file,
archive, and log.

Used with \fB-BT\fR to create a repeatable backup cycle.  \fB-BD\fR sets
the directory where the backup archive goes while \fB-BN\fR sets the name.
To this name is appended timestamp and other information to form the actual
archive name used for a particular backup cycle.  See \fB-BT\fR
for more information on setting up repeatable backup cycles.

.TP
.PD 0
.B \-BT \fIbackuptype\fR
.TP
.PD
.B \-\-backup-type \fIbackuptype\fR
Set the type of backup being done this cycle.

Used with \fB-BC\fR, \fB-BD\fR, \fB-BL\fR, and \fB-BN\fR to create a
repeatable backup cycle.  \fB-BT\fR sets the type of backup being done this
cycle.  Types include \fBFULL\fR (backup all files within scope),
\fBDIFFERENTIAL\fR (backup files that are new or changed since the last
\fBFULL\fR backup), or \fBINCREMENTAL\fR (backup files that are new or
changed since the last \fBFULL\fR backup or any \fBDIFFERENTIAL\fR or
\fBINCREMENTAL\fR backups since then).

Note that \fB-BT\fR is currently available only on systems that support
long file names.

\fBzip -BT\fR can be used in a time repeating script, for instance, to
perform repeatable backup cycles.  One approach is to use three separate
repeating scripts, one to run \fBFULL\fR backups, one to run
\fBDIFFERENTIAL\fR backups, and one to run \fBINCREMENTAL\fR backups.
For instance, the \fBFULL\fR script might include:
.RS
.IP
\fCzip -BT full -BD mybackups -BN foo_backup -BL -li -r foodir \fR
.RE
.IP
and run monthly.  The \fBDIFF\fP script might include:
.RS
.IP
\fCzip -BT diff -BD mybackups -BN foo_backup -BL -li -r foodir \fR
.RE

.IP
and run weekly.  The \fBINCR\fP script might include:
.RS
.IP
\fCzip -BT incr -BD mybackups -BN foo_backup -BL -li -r foodir \fR
.RE
.IP
and run daily.  \fB-BD\fR puts the backup archives, the logs,
and the control file in the \fImybackups\fR directory.  \fB-BN\fR
specifies that the archives,
logs, and control file will have names starting with \fIfoo_backup\fR.
\fB-BL -li\fR (options \fB-BL\fR and \fB-li\fR)
enables backup logging and tells \fBzip\fR to include informational
messages (such as the files processed) in the log.  The \fB-r\fR
directs \fBzip\fR to backup the directory \fIfoodir\fR and any
subdirectories.  It is
recommended that the times these scripts run be offset so that
\fBDIFF\fR runs after any \fBINCR\fP is expected to be finished
and \fBFULL\fR runs after any \fBDIFF\fR or \fBINCR\fR is expected to be
finished.  Avoid overlap if possible to minimize possible content
inconsistencies between backups.

To avoid issues, one script could be
used to run all three backup types, this script launching each backup
on a timed cycle, choosing the backup type based on a schedule, and
waiting for each backup to complete.  Since only one script is running,
this avoids conflicts between the types of backups.  Or a script could
be launched at each backup cycle and include a check to see if a
previous backup was still running and, if so, postpone the next backup
until the current one finished.  For instance, a simple lock file could
be used to prevent backup cycles from overlapping.  Some maximum age of
the lock file could be enforced to prevent an error keeping an old lock
file around from stopping future backups.

This mode of \fBzip\fR creates a control file that is written to the backup
path specified by \fB-BD\fR (or to the control path if \fB-BC\fR is used).
The name of the control file is given by \fB-BN\fR with \fB_control.zbc\fR
appended.  This control file tracks the archives
currently in the backup set.  The backup path is also used as the destination
of the created archives, so no output archive is specified.  Rather this mode
creates the output name by adding a mode (full, diff, or incr) and a date and
time stamp to the backup path.  This allows recurring backups to be generated
without altering the command line to specify new archive names each cycle to
avoid overwriting previous archives and logs.  \fBzip\fR does not delete
old archives and logs -- the user needs to track these and move or delete
them as appropriate.

The backup types are:
.RS
.IP
\fBFULL\fP - Create a normal \fBzip\fP archive that forms the core of the
backup set.  Also creates a control file that only lists this one archive.
Any listings of other (differential and incremental) archives from previous
backup operations are removed.  Backup type \fBFULL\fP essentially starts
a new backup set.

\fBDIFFERENTIAL\fR - Create a \fB--diff\fR archive against the \fBFULL\fR
archive listed in the control file, and update the control file to list both
the \fBFULL\fR and \fBDIFF\fR archives.  A \fBDIFF\fR backup set consists of
just the \fBFULL\fP and new \fBDIFF\fP archives, as these two archives capture
all files (except deletions, as noted below).  Any other \fBDIFF\fR or
\fBINCR\fR archives are removed from the backup set (the list in the control
file), but are not removed from the file system.

\fBINCREMENTAL\fP - Create a \fB--diff\fP archive against the \fBFULL\fP and
any \fBDIFF\fP or \fBINCR\fP archives in the control file, and update the
control file.  An \fBINCR\fP backup set consists of the \fBFULL\fP archive
and any \fBDIFF\fP and \fBINCR\fP archives created to that point.  An
\fBINCR\fP backup captures just new and changed files not yet included in
the backup set.  Any number of \fBINCR\fP archives can be included in the
backup set, each capturing an incremental change in the state of the target.
.RE
.IP
A \fBFULL\fR backup clears any \fBDIFF\fR and \fBINCR\fR entries from the
control file, hence starts a new backup set.  A \fBDIFF\fR backup clears
out any \fBINCR\fR archives listed in the control file, as the \fBFULL\fR
and \fBDIFF\fR are sufficient to describe the state of the target scope
(except as noted below).  An \fBINCR\fR backup just adds the new incremental
archive to the list of archives in the control file.

Note that \fBDIFF\fR and \fBINCR\fR backups do not account for deletion of
files in the target scope.  Only \fBFULL\fR backups account for deletions.
For this reason, occasional \fBFULL\fR backups should be done.  We may add
a way to incrementally track deleted files in the future.

All archives listed in the control file must be present in the backup file
location specified or an error will occur.  To save space, an archive to
create a difference archive against can be replaced by a \fBCD_ONLY\fR
archive.  See \fB-DF\fR and \fB-Z\fR for more on this.  All archives listed
in the control file can, in theory, be replaced with CD_ONLY equivalents,
which are essentially just listings of files with metadata that take up far
less space.

For repeating backups to properly work, the same \fBzip\fP command line should
be used for all backups (\fBFULL\fP, \fBDIFF\fP, and \fBINCR\fP), except
for changing \fB-BT\fP to set backup type.  The \fBzip\fP command should
also be run from the same directory each time to use the same file scope.
The same control file must be used by all backup operations maintaining the
same backup set for proper differential and incremental operation.  Different
backup sets use different control files.  To avoid issues, make sure each
backup configuration has a unique name as set by \fB-BN\fP.  Multiple backup
configurations can go in the same directory as long as they are uniquely
named.

Full backups will have names such as:
.RS
.IP
\fCmypath/mybackupset_full_FULLDT.zip \fP
.RE
.IP
and differentials/incrementals will have names such as:
.RS
.IP
\fCmypath/mybackupset_full_FULLDT_incr_INCRDT.zip\fP
.RE
.IP
where the name of the full backup the differential/incremental goes to is
part of the file name.  Above, \fBFULLDT\fR and \fBINCRDT\fR are
date-time stamps of the full and incremental backups, respectively.

It is recommended that the backup path be outside of what is being backed up,
either a separate drive, path, or other destination, or \fB-x\fP used
to exclude the backup path directory and everything in it.  Otherwise each
backup may get included in later backups, creating exponential growth.

If you don't need to track changes over time but simply want to save the
latest changes, consider just creating normal (\fBFULL\fP) \fBzip\fP archives
or using \fB--diff\fP to create \fBFULL\fP and \fBDIFF\fP archives.  The
\fB-u\fP Update and \fB-FS\fP File Sync options are other alternatives to
consider.

.TP
.PD 0
.B \-c
.TP
.PD
.B \-\-entry-comments
Add one-line comments for each entry (file).
File operations (adding, updating) are done first,
and the user is then prompted for a one-line comment for each file.
Enter the comment followed by return, or just return for no comment
(or to keep an existing comment).

\fBzip 3.1\fR now presents any existing comment and allows either
keeping it or replacing it.  \fBzip 3.1\fR also allows multi-line
comments for entries, but currently few other utilities can display
or edit them.  Check the target utility for multi-line comment support
before using them.

When editing comments of an existing archive, \fBzip\fR will accept
a list of names and/or filters to choose the entries to add/edit
comments for.  For instance, if the archive \fIfoo.zip\fR contains
the entries \fIa.txt\fR, \fIb.txt\fR, \fIe/c.txt\fR and \fIe/d.txt\fR,
to edit just the comment for \fIc.txt\fR, either
.RS
.IP
\fCzip foo -c e/c.txt\fR
.RE
.IP
or
.RS
.IP
\fCzip foo -c -i*c.txt\fR
.RE
.IP
could be used.  The result might be:
.RS
.IP
Current comment for e/c.txt:
 old comment
.IP
Enter comment for e/c.txt:
 (ENTER=keep, TAB ENTER=remove, SPACE ENTER=multiline)
 new comment
.RE
.IP
\fBTAB ENTER\fR is hitting TAB followed by ENTER.  \fBSPACE ENTER\fR is
hitting SPACE followed by ENTER.

If you will be using the resulting archive with other archivers, before
using multi-line comments be sure to test how that archiver handles them.
For instance, 7-Zip will remove the line ends and show the comment on
one line.  \fBunzip\fR will generally show the comment as entered.

Zip will accept UTF-8 comments on ports where UTF-8 is native (such
as a UTF-8 locale on Unix systems).  Before setting comments that
are not plain 7-bit ANSI text, check the target unzip for UTF-8
comment support.

As of \fBzip 3.1\fR, \fBzip\fR on Windows now reads comments as wide
characters, converting the comments to UTF-8 for storage.  If you will
be using the resulting archive with other archivers and relying on
Unicode comments, be sure to test with that archiver.  For instance,
7-Zip seems to properly handle Unicode entry comments.  As of this
writing, \fBunzip\fR handles UTF-8 on Linux, but does not display UTF-8
properly on Windows.  This should be addressed in the next release of
\fBunzip\fR.

As of \fBzip 3.1\fR, comments can also be entered on the \fBzip\fR
command line:
.RS
.IP
\fCzip foo -c="an entry comment for a" "a.*"\fR
.RE
.IP
This will set the entry comment for all entries starting with "a." to
"an entry comment for a".  All new/selected entries will get the same
comment.  However, \fBzip\fR could be used multiple times to select
and set the comments for different entries:
.RS
.IP
\fCzip foo -c="this is the comment for foo.txt" foo.txt\fR
.IP
\fCzip foo -c="this is the comment for bar.txt" bar.txt\fR
.RE
.IP
But note that this approach could be slow for a very large archive.

The contents of the comment can also be supplied from a file.  See \fB\-cc\fR
for details.

See \fBzipnote\fR as a way to do batch editing of file comments.

.TP
.PD 0
.B \-cc=entry_comment_file
.TP
.PD
.B \-\-entry-comment-file=entry_comment_file
This option works as \fB\-c="a comment"\fR, but reads the text of the comment
from a file.  The file can contain UTF-8.  All new/selected entries are updated
with the comment.

.TP
.PD 0
.B \-cd \fIdir\fR
.TP
.PD
.B \-\-chdir \fIdir\fR
Set the current directory to \fIdir\fR before beginning the \fBzip\fR
operation.  This sets the root of the resulting archive, i.e. relative
paths stored in the archive are relative to this location in the file
system.  Essentially, \fBzip\fR does a cd to the specified directory
before the archiving operation starts.

For instance, given
.RS
.IP
\fC/bar/t/test.txt
.RE
.IP
exists,
.RS
.IP
\fCcd /foo

\fCzip myarchive  -cd /bar  t/test.txt\fR
.RE
.IP
would look for an existing \fImyarchive.zip\fR in \fI/bar\fR and read that if it
exists or create it if it doesn't.  Then \fIt/test.txt\fR would be added to \fI/bar/myarchive.zip\fR.  After \fBzip\fR exists, the current directory
will be what it was before (\fI/foo\fR).

Note that all operations will now be relative to the new current directory.
For instance, \fBzip\fR will look for an existing archive in that new
location and will write the output zipfile to that location.  See
\fB\-ci\fR to just change where input files are looked for.

If \fB-q\fR is not used, the directory path changed to is displayed.
As \fBzip\fR typically runs in a separate process, the change to current
directory only impacts \fBzip\fR and not the process or shell it is
run from.

Without \fB-cd\fR, \fBzip\fR generally inherits the current directory of the
calling process, typically a shell.  \fB-cd\fR allows the relative
paths \fBzip\fR sees to be interpreted relative to the new current
directory \fIdir\fR, while leaving the current directory of the caller
unchanged.

On Windows, if \fIdir\fR includes a different drive letter, \fBzip\fR
will change the current drive to that drive.  For instance,
.RS
.IP
\fCC:\\foo> zip myarchive test.txt -cd E:\\bar \fR
.RE
.IP
will look in \fIE:\\bar\fR for \fItest.txt\fR and will write \fImyarchive\fR
to \fIE:\\bar\fR.

An alternative to \fB-cd\fR is to change the current directory in the
calling process before calling \fBzip\fR.

Note for LIB/DLL users:  The \fBZpZip\fR or \fBZpZipArgs\fR call requires a
root directory to be specified in the call.  This root directory becomes the
current directory of the archiving operation.  If \fB-cd\fR is also provided,
that directory change is made by \fBzip\fR after the root directory is set
by \fBZpZip\fR or \fBZpZipArgs\fR, and so overrides the root directory setting.

.TP
.PD 0
.B \-ci \fIdir\fR
.TP
.PD
.B \-\-chindir \fIdir\fR
Set the root directory that input paths are resolved from.  This essentially
sets the base for relative paths that will be stored in the archive to
\fIdir\fR.

Unlike \fB\-cd\fR, \fB\-ci\fR only impacts resolving input paths for adding
or updating the archive.  Other paths, such as the location of the zipfile,
remain relative to the original current directory.  Also, include files for
options such as \fB\-@@\fR are searched for relative to the original current
directory.

For instance, given
.RS
.IP
\fC/bar/t/test.txt
.RE
.IP
exists,
.RS
.IP
\fCcd /foo

\fCzip myarchive  -ci /bar  t/test.txt\fR
.RE
.IP
would look for an existing \fImyarchive.zip\fR in \fI/foo\fR and read that if it
exists or create it if it doesn't.  Then \fIt/test.txt\fR would be added to \fI/foo/myarchive.zip\fR.

.TP
.PD 0
.B \-C
.TP
.PD
.B \-\-preserve-case
[VMS]  Preserve all case on VMS.  Negating this option
(\fB\-C-\fP) downcases file names.

.TP
.PD 0
.B \-C2
.TP
.PD
.BI \-\-preserve-case-2
[VMS]  Preserve ODS2 case on VMS.  Negating this option
(\fB\-C2\-\fP) downcases.  Default:  \-C2\- (downcase ODS2 names).

.TP
.PD 0
.B \-C5
.TP
.PD
.B \-\-preserve-case-5
[VMS]  Preserve ODS5 case on VMS.  Negating this option
(\fB\-C5\-\fP) downcases.  Default:  \-C5 (preserve case of ODS5 names).

.TP
.PD 0
.B \-Cl
.TP
.PD
.B \-\-case-lower
Convert added/updated entry path names in output archive to lowercase.

It is an error to use \fB-Cl\fP and \fB-Cu\fP together.

Only the paths of added or updated entries are impacted.  If an existing
archive is being updated, the paths of entries not being updated remain
unchanged.  If an entry has a Unicode path, that is also updated.

This option occurs after VMS name processing and so has precedence over
the \fB-C\fP, \fB-C2\fP and \fB-C5\fP options.

See also \fB-pa\fP and \fB-pp\fP for prefixing paths.

.TP
.PD 0
.B \-\-corrupt
Corrupt various things when creating an archive.  This is for test purposes only.
Currently the list includes:  CRC-LOCAL, CRC-CENTRAL, CRC-BOTH, COMPRESSED-SIZE-LOCAL,
COMPRESSED-SIZE-CENTRAL, COMPRESSED-SIZE-BOTH, UNCOMPRESSED-SIZE-LOCAL,
UNCOMPRESSED-SIZE-CENTRAL, UNCOMPRESSED-SIZE-BOTH, and NONE.  Each thing corrupted
is incremented by 1 before being written to the output archive.  Currently only one
of these can be corrupted at a time.  The main purpose of this option is to test
how \fBzip\fR and \fBunzip\fR handle these cases.

.TP
.PD 0
.B \-Cu
.TP
.PD
.B \-\-case-upper
Convert added/updated entry path names in output archive to uppercase.  See \fB-Cl\fP
for more information.

.TP
.PD 0
.B \-d
.TP
.PD
.B \-\-delete
Remove (delete) entries from a
.B zip
archive.
For example:
.RS
.IP
\fCzip -d foo  foo/tom/junk  foo/harry/\\*  \\*.o\fR
.RE
.IP
will remove the entry
.IR foo/tom/junk ,
all of the files that start with
.IR foo/harry/ ,
and all of the files that end with
.B \&.o
(in any path).
Note that shell pathname expansion has been inhibited with backslashes,
so that
.B zip
can see the asterisks,
enabling
.B zip
to match on the contents of the
.B zip
archive instead of the contents of the current directory.
(The backslashes are not used on MSDOS-based or VMS platforms.)
Can also use quotes to escape the asterisks as in
.RS
.IP
\fCzip -d foo  foo/tom/junk  "foo/harry/*"  "*.o"\fR
.RE
.IP
Not escaping the asterisks on a system where the shell expands
wildcards could result in the asterisks being converted to a
list of files in the current directory and that list used to
delete entries from the archive, which is likely not what is
wanted.

\fB-@\fR and \fB-@@\fR can be used to provide \fBzip\fR with a
list of files to delete.  For example:
.RS
.IP
\fCzip foo -d  -@@filestodelete.txt\fR
.RE
.IP
will delete the files in \fIfilestodelete.txt\fR, listed one
per line, from archive \fIfoo.zip\fR.  Trimming leading and trailing
spaces from the names read in was considered, but was dropped for
various reasons.  So note that each line read in should match exactly
the path (possibly including wildcards) that is to be deleted, including
any leading or trailing spaces in the path.

Argfiles can also be used.  For instance:
.RS
.IP
\fCzip foo -AF -d @filestodelete.zag\fR
.RE
.IP
will delete files listed in \fIfilestodelete.zag\fR, those file names
separated by white space.  Unlike \fB-@@\fR, however, file names that
include white space must be enclosed in double quotes (as they would
need to be if included on the command line).

Under MSDOS and Windows (as well as other systems),
.B \-d
is case sensitive when it matches names in the
.B zip
archive.
This requires that file names be entered in upper case if they were
zipped by PKZIP on an MSDOS system.  (We considered making this
case insensitive on systems where paths were case insensitive,
but it is possible the archive came from a system where case does
matter and the archive could include both \fIBar\fP and \fIbar\fP
as separate files in the archive.)  But see the new option \fB\-ic\fP
to ignore case in the archive.

.TP
.PD 0
.B \-db
.TP
.PD
.B \-\-display-bytes
Display running byte counts showing the bytes zipped and the bytes to go.

.TP
.PD 0
.B \-dc
.TP
.PD
.B \-\-display-counts
Display running count of entries zipped and entries to go.

.TP
.PD 0
.B \-dd
.TP
.PD
.B \-\-display-dots
Display dots while each entry is zipped (except on ports that have their own
progress indicator).  See \fB-ds\fR below for setting dot size.  The default is
a dot every 10 MB of input file processed.  The \fB-v\fR option
also displays dots (previously at a much higher rate than this but now \fB\-v\fP
also defaults to 10 MB) and this rate is also controlled by \fB-ds\fR.

.TP
.PD 0
.B \-de
.TP
.PD
.B \-\-display-est-to-go
Display an estimate of the time to finish the archiving operation.  The estimate
is based on the calculated rate of bytes / second, so the estimated times can vary as
system loading and execution speed change.  (See \fB-dr\fR for more on this.)
\fBzip\fP does not display an estimate until enough entries are processed to get a
reasonable bytes / second rate.

.TP
.PD 0
.B \-df
.TP
.PD
.B \-\-datafork
[MacOS, Unix Mac OS X] Include only the data-forks of files zipped into
the archive.  Resource forks and Finder info will be ignored.  This is
useful when exporting files to foreign operating systems where the
resource information may not be needed.  The MacOS port (Mac OS before
Mac OS X) saves this information in extra fields while the Unix Mac OS X
(Mac OS X) port uses the AppleDouble format.  (See \fB-as\fR for more
on AppleDouble.)

.TP
.PD 0
.B \-dg
.TP
.PD
.B \-\-display-globaldots
Display progress dots for the archive instead of for each file.  The command
.RS
.IP
    zip -qdgds 100m
.RE
.IP
will turn off most output except dots every 100 MiB.  On
typical personal systems
in use as of this writing, this simply displays a dot every few seconds,
providing a low overhead way to monitor progress.  If the total number
of bytes is known (such as by using -sf first), the total number of dots
expected can be calculated.  The setting of \fB-ds\fP can be adjusted to
get the dot rate desired, for instance to 1g to get dots every 1 GiB
processed which is roughly a dot a minute on the above example systems.

This can be used with \fB-lFli\fP to store detailed information in a log
file while minimizing console output (which typically can slow progress).
As \fBzip\fP flushes the log file
as changes are made, one can open the log on occasion to see how far \fBzip\fP
is.

.TP
.PD 0
.B \-dr
.TP
.PD
.B \-\-display-rate
Display an estimate of the rate entries are being zipped in bytes / second.
The estimate can vary as system loading and execution speed change.  The
rate also can change depending on the size of the files (writing content is
a different rate than writing meta data, for instance, so the rate can change
as \fBzip\fR proceeds through different parts of a directory tree) and the
amount of console output (more output generally results in a slower rate).
\fBzip\fP does not display a rate estimate until enough entries are processed
to get a reasonable rate.  This is the rate used by \fB-de\fP.  This option
and \fB-de\fR are only available on systems that can provide sufficiently
accurate timimg.

.TP
.PD 0
.B \-ds\ \fR\fIsize\fP
.TP
.PD
.B \-\-dot-size\ \fR\fIsize\fP
Set amount of input file processed for each dot displayed.  Setting this option
implies \fB-dd\fR.  \fIsize\fP is in the format \fIn\fP\fIm\fP where \fIn\fP is
a number and \fIm\fP is a multiplier.  Currently \fIm\fP can
be k (KiB), m (MiB), g (GiB), t (TiB), or p (PiB), so if \fIn\fP is 100 and
\fIm\fP is k, \fIsize\fP would be
100k which is 100 KiB.  The default is 10 MiB.  A size of 0 turns dots off.
.IP
The \fB-v\fR option also displays dots and now defaults to
10 MiB.  This rate is now controlled by this option.
.IP
This option does not control the dots from the "Scanning files" message as
\fBzip\fP scans for input files.  The dot size for that is fixed at 2 seconds
or a fixed number of entries, whichever is longer.  Note that if the time
between these scanning dots is much greater than 2 seconds, this may indicate
a very slow data connection, such as a bad network connection.

.TP
.PD 0
.B \-dt
.TP
.PD
.B \-\-display-time
Display the current time as each entry is started.  This is in a day/time
format, where \fIday\fR is the calendar day of the month and \fItime\fR is
in 24 hour format.

.TP
.PD 0
.B \-du
.TP
.PD
.B \-\-display-usize
Display the uncompressed size of each entry.  This is displayed in parentheses
after the name.

.TP
.PD 0
.B \-dv
.TP
.PD
.B \-\-display-volume
Display the volume (disk) number each entry is being read from,
if reading an existing archive, and being written to.  These are the disk
numbers of multi-volume archives (or 1 for single volume archives), and
are not related to any file system volume names.  This option may be useful
when reading or writing split (multi-volume) archives.

.TP
.PD 0
.B \-D
.TP
.PD
.B \-\-no-dir-entries
Do not create entries in the
.B zip
archive for directories.  Directory entries are created by default so that
their attributes can be saved in the archive.
The environment variable ZIPOPT can be used to change the default options.  For
example, under Unix with sh:
.RS
.IP
ZIPOPT="-D"; export ZIPOPT
.RE
.IP
(The variable ZIPOPT can be used for any option, including \fB\-i\fP and \fB\-x\fP
using a new option format detailed below, and can include several options.)  The option
.B \-D
is a shorthand
for
.B \-x
"*/" but the latter previously could not be set as default in the ZIPOPT
environment variable as the contents of ZIPOPT gets inserted near the beginning
of the command line and the file list had to end at the end of the line.
.IP
This version of
.B zip
does allow
.B \-x
and
.B \-i
options in ZIPOPT if the form
.IP
\fC \-x \ file\ file\ ... \ @\fP
.IP
is used, where the @ (an argument that is just @) terminates
the list.

When changing the contents of environment variables, it's probably advisable to
test with "\fBzip -sc\fR" to see how the environment contents are ending up on the
command line before relying on the changes.

.TP
.PD 0
.B \-DF
.TP
.PD
.B \-\-difference-archive
Create an archive that contains all new and changed files since
the original archive was created.  For this to work, the input
file list and current directory must be the same as during the
original \fBzip\fP operation.
.IP
For example, if the existing archive was created using
.RS
.IP
\fCzip -r foofull .
.RE
.IP
from the \fIbar\fP directory, then the command
.RS
.IP
\fCzip -r foofull . -DF --out foonew
.RE
.IP
also from the \fIbar\fP directory creates the archive \fIfoonew.zip\fP
with just the files not in \fIfoofull.zip\fP and the files where
the size or file time of the files do not match those in \fIfoofull.zip\fP.

Note that the time zone environment variable TZ should be set according to
the local time zone in order for this option to work correctly.  A
change in time zone since the original archive was created could
result in no times matching and all files being included.  (This seems
a problem specific to file systems that do not store file times in UT.)
If time issues arise, the \fB-td\fR command may be able to help get
by the time differences.  (See \fB-f\fR for more on time zones.)

A possible approach to backing up a directory might be to create
a normal archive of the contents of the directory as a full
backup, then use this option to create differential backups.  The new
compression method \fBCD_ONLY\fR can be used to create a copy of the
normal (full backup) archive that only contains the file list data.  This
much smaller archive can't be used to restore files, but can be used as a
base archive to use \fB-DF\fR against, allowing the much larger full backup
archive to be moved off the system to save space.  (See \fB-Z\fR for more
on compression methods, including \fBCD_ONLY\fR.)

To just keep a single \fBzip\fP archive in sync with a directory, consider
\fB-FS\fP.  For more extensive backup operations, take a look at \fB-BT\fP.

.TP
.PD 0
.B \-e
.TP
.PD
.B \-\-encrypt
Encrypt the contents of the
.B zip
archive using a password which is entered on the terminal in response
to a prompt.  The password will not be echoed at the user's terminal.
If standard input (or /dev/tty or SYS$COMMAND, depending on
the operating system) is not a tty,
.B zip
will exit with an error.
The password is requested twice to save the user from typing errors.

See \fB-Y\fP for more on the types of encryption \fBzip\fP supports
and setting the encryption method.  Setting \fB-Y\fR implies \fB-e\fR,
unless \fB-P\fR is also used.  The default encryption method is standard
(weak) Traditional encryption, unless that encryption method has been
disabled.

.TP
.PD 0
.B \-et
.TP
.PD
.B \-\-etwodd
When using Traditional zip encryption, \fBzip\fP uses data descriptors to
avoid making multiple passes.  The \fB--etwodd\fP (encrypt traditional
without data descriptors) option forces \fBzip\fP to make the multiple
passes to avoid the need for data descriptors.  The result should be an
archive that is more generally compatible with other zip utilities.

Use of this option on a large archive or large file set could greatly
increase the time needed to create an archive, maybe taking 50% to 100%
more time.

Without this option, the archives created are backward compatible, and
these archives are generally readable by most utilities now.  Some old
utilities, however, may not be able to read \fBzip\fR traditionally encrypted
entries, and this option may be useful in those cases.

This issue only involves Traditional zip encryption, which is considered
rather weak nowadays.  AES encryption (such as \fB-Y AES128\fP) does not
have this problem.  In fact, the \fB--etwodd\fP option is only applicable
to Traditional encryption and does not impact anything else.

.TP
.PD 0
.B \-E
.TP
.PD
.B \-\-longnames
[OS/2] Use the .LONGNAME Extended Attribute (if found) as filename.

.TP
.PD 0
.B \-f
.TP
.PD
.B \-\-freshen
Replace (freshen) an existing entry in the
.B zip
archive only if it has been modified more recently than the
version already in the
.B zip
archive;
unlike the update option
.RB ( \-u )
this will not add files that are not already in the
.B zip
archive.
For example:
.RS
.IP
\fCzip -f foo *.c\fP
.RE
.IP
replaces any files ending in .c that are newer than the versions in the
archive.  This command should be run from the same directory from which
the original
.B zip
command was run, since paths stored in
.B zip
archives are always relative.
.IP
Note that the time zone environment variable TZ should be set according to
the local time zone in order for options such as
\fB\-f\fP, \fB\-u\fP and \fB\-o\fP
that compare times to work correctly.
The reasons behind this are somewhat subtle but have to do with the differences
between the Unix-format file times (always in GMT) and most of the other
operating systems (always local time) and the necessity to compare the two.

See the \fBtzset\fP man page for more information on setting TZ.  For
example, for New Zealand TZ might be set to:
.RS
.IP
\fCTZ="NZST-12.00:00NZDT-13:00:00,M10.1.0,M3.3.0"\fP
.RE
.IP
This specifies standard time (NZST) is 12 hours ahead of UTC, and Daylight
Saving Time (NZDT), 13  hours  ahead of UTC, runs from the first Sunday in
October to the third Sunday in March, and the changeovers happen at the
default time of 02:00:00.  Alternatively, if a time zone file is available,
TZ for New Zealand might be set to:
.RS
.IP
\fCTZ=":Pacific/Auckland"\fP
.RE
.IP
Older systems may use the older format, TTThhDDD,
where TTT is the time zone such as MET, hh is the
difference between GMT and local time such as -1 above, and DDD is
the time zone when Daylight Saving Time is in effect.  Leave off
the DDD if there is no Daylight Saving Time.  Using this format,
the US Eastern time zone TZ would be set to EST5EDT.  Middle European
time with automatic adjustment for "summertime" or Daylight Saving Time
would be "MET-1MEST".

Daylight Saving Time can impact options that compare times when some
entries are added during standard time and some during Daylight Saving Time,
or when the current Daylight Saving Time status is different than when some or
all of the entries were added or updated in an archive.  In particular,
options like \fB-FS\fR that look for time equality will likely not find
time matches if the archive is processed in a different time zone.

Time zone issues typically are caused by file systems that do not store file
times as UT (GMT).  When issues occur, \fB-td\fR may be able to help.

.TP
.PD 0
.B \-F
.TP
.B \-\-fix\ \ \ \ \ \
.TP
.B \-FF
.TP
.PD
.B \-\-fixfix\ \
Fix the
.B zip
archive.  The \fB\-F\fP option can be used if some portions of the archive
are missing, but requires a reasonably intact central directory.
The input archive is scanned as usual, but \fBzip\fP will ignore
some problems.  The resulting archive should be valid, but any
inconsistent entries will be left out.
.IP
When doubled as in
\fB\-FF\fP,
the archive is scanned from the beginning and \fBzip\fP looks for special
signatures to identify the limits between the archive members. The
single
.B \-F
is more reliable if the archive is not too much damaged, so try this
option first.
.IP
If the archive is too damaged or the end has been truncated, you
must use \fB\-FF\fP.  This is a change from \fBzip\ 2.32\fP, where
the \fB\-F\fP option is able to read a truncated archive.  The
\fB\-F\fP option now more reliably fixes archives with minor
damage and the \fB\-FF\fP option is needed to fix archives where
\fB\-F\fP might have been sufficient before.
.IP
Neither option will recover archives that have been incorrectly
transferred in ascii mode instead of binary. After the repair, the
.B \-t
option of
.B unzip
may show that some files have a bad CRC. Such files cannot be recovered;
you can remove them from the archive using the
.B \-d
option of
\fBzip\fP.
.IP
Note that \fB\-FF\fP may have trouble fixing archives that include an
embedded zip archive that was stored (without compression) in the archive
and, depending on the damage, it may find the entries in the embedded
archive rather than the archive itself.  Try \fB\-F\fP first as it
better handles embedded archives.
.IP
The format of the fix commands have changed.  For example, to fix
the damaged archive \fIfoo.zip\fP,
.RS
.IP
\fCzip -F foo --out foofix
.RE
.IP
tries to read the entries normally, copying good entries to the
new archive \fIfoofix.zip\fP.  If this doesn't work, as when the
archive is truncated, or if some entries you know are in the archive
are missed, then try
.RS
.IP
\fCzip -FF foo --out foofixfix
.RE
.IP
and compare the resulting archive to the archive created by \fB\-F\fP.  The
\fB\-FF\fP option may create an inconsistent archive.  Depending on
what is damaged, you can then use the \fB\-F\fP option to fix that archive.
.IP
A split archive with missing split files can be fixed using
\fB\-F\fP if you have the last split of the archive (the \fI\.zip\fP file).
If this file is missing, you must use \fB\-FF\fP to fix the archive,
which will prompt you for the splits you have.
.IP
Currently the fix options can't recover entries that have a bad checksum
or are otherwise damaged.

.TP
.PD 0
.B \-FI
.TP
.PD
.B \-\-fifo\ \
[Unix]  Normally \fBzip\fP skips reading any FIFOs (named pipes) encountered,
as \fBzip\fP can hang if the FIFO is not being fed.  This option tells
\fBzip\fP to read the contents of any FIFO it finds.

\fBzip 3.0\fR skipped FIFOs if \fB-FI\fR was not used.  \fBzip 3.1\fR now
creates empty entries for FIFOs if \fB-FI\fR is not used.  This shows where
these FIFOs were, and will allow \fBunzip\fR to recreate the FIFOs in the
future.  With \fB-FI\fR, \fBzip 3.1\fR still stops and waits for the FIFO to
be fed as with \fBzip 3.0\fR.

.TP
.PD 0
.B \-FS
.TP
.PD
.B \-\-filesync
Synchronize the contents of an archive with the files on the OS.
Normally when an archive is updated, new files are added and changed
files are updated but files that no longer exist on the OS are not
deleted from the archive.  This option enables a new mode that checks
entries in the archive against the file system.  If the file time and
file size of the entry matches that of the OS file, the entry is
copied from the old archive instead of being read from the file system
and compressed (similar to \fB-u\fR for files that don't require
updating).  If the OS file has changed, the entry is read and
compressed as usual.  If the entry in the archive does not match a
file on the OS, the entry is deleted.  Enabling this option should
create archives that are the same as new archives, but since existing
entries are copied instead of compressed, updating an existing archive
with \fB\-FS\fP can be much faster than creating a new archive.  Also
consider using \fB\-u\fP for updating an archive.
.IP
For this option to work, the archive should be updated from the same
directory it was created in so the relative paths match.  If few files
are being copied from the old archive, it may be faster to create a
new archive instead.
.IP
Note that the time zone environment variable TZ should be set according to
the local time zone in order for this option to work correctly.  A
change in time zone since the original archive was created could
result in no times matching and recompression of all files.  See \fB-f\fP
for more on time zones.  Also see \fB-td\fR if time zone issues occur.
.IP
This option deletes files from the archive.  If you need to preserve
the original archive, make a copy of the archive first or use the
\fB\-\-out\fP option to output the updated archive to a new file.
Even though it may be slower, creating a new archive with a new archive
name is safer, avoids mismatches between archive and OS paths, and
is preferred.

\fBzip 3.1\fR now supports the use of \fB-sf\fR with \fB-FS\fR.  When
these are used together, \fBzip\fR shows the differences between the
archive and the file system as a set of \fBadd\fR, \fBfreshen\fR and
\fBdelete\fR operations.  This is a show files mode and the archive is
not modified.

.TP
.PD 0
.B \-fd
.TP
.PD
.B \-\-force-descriptors
Force use of data descriptors.  This is generally only used for debugging.

.TP
.PD 0
.B \-fz
.TP
.PD
.B \-\-force-zip64
Force use of the Zip64 extensions.  This may be needed when a file is just
under the 4 GiB limit but bad compression or use of -l to convert to Windows
line ends pushes the resulting file over the limit.  Using -fz tells Zip to
use the Zip64 large file extensions.  Negating this option (\fB-fz-\fP) will
prevent the use of these extensions.

\fBzip 3.1\fR now handles files close to the 4 GiB limit more gracefully and
\fB-fz\fR and \fB-fz-\fR should not be needed except in rare cases.

.TP
.PD 0
.B \-g
.TP
.PD
.B \-\-grow \ \ \ \ \ \
Grow (append to) the specified
.B zip
archive, instead of creating a new one.  This can be fast if only a few
entries are being added, as any old entries remain where they are in
the archive as new entries are appended.  If this operation fails,
.B zip
attempts to restore the archive to its original state. If the restoration
fails, the archive might become corrupted. This option is ignored when
there's no existing archive or when at least one archive member must be
updated or deleted.

Before using this option, it may be a good idea to make a copy of the
archive.

.TP
.PD 0
.B \-h
.TP
.PD 0
.B \-H
.TP
.PD 0
.B \-?
.TP
.PD
.B \-\-help \ \ \ \ \ \
Display the
.B zip
help information (this also appears if
.B zip
is run with no arguments).

On CYGWIN, where stdin and stdout are pipes, \fBzip\fR (Windows binary) may
have problems detecting that \fBzip\fR is not being used in a pipe.  See the
\fB--stdinout-tty\fR option for a workaround to this.

.TP
.PD 0
.B \-h2
.TP
.PD 0
.B \-hh
.TP
.PD 0
.B \-HH
.TP
.PD
.B \-\-more-help
Display extended help including more on command line format, pattern matching,
and more obscure options.

Most major features of \fBzip\fP are covered in the extended help, and this
option has evolved into a sort of mini man page and quick reference.

.TP
.PD 0
.B \-i\ \fR\fIfiles\fP
.TP
.PD
.B \-\-include\ \fR\fIfiles\fP
Include only the specified files, as in:
.RS
.IP
\fCzip -r foo .  -i \\*.c\fP
.RE
.IP
which will include only files that end in
\fI.c\fP
in the current directory and its subdirectories in the archive \fIfoo\fR.
(Note for PKZIP users: the equivalent command is
.RS
.IP
\fCpkzip -rP foo *.c\fP
.RE
.IP
PKZIP does not allow recursion in directories other than the current one.)
The backslash avoids shell filename substitution, so that the name
matching is performed by
.B zip
at all directory levels.  Double quotes can also be used:
.RS
.IP
\fCzip -r foo .  -i "*.c"\fP
.RE
.IP
[This is for Unix and other systems where \\ escapes the next
character, in this case preventing the shell from replacing
* with a list of files in the current directory.  For other systems
where the shell does not expand * (does not do file globbing), do not
use \\ (as on MSDOS, for example, this would be handled as a directory
separator, which may not be what you want) and the above would be
.RS
.IP
\fCzip -r foo .  -i *.c\fP
.RE
.IP
Examples are for Unix unless otherwise specified.]

\fB-i\fR accepts a list of file paths or patterns, where a \fBpattern\fR
is a path that includes wildcards and \fBpaths\fR are relative to the
zip operation root (either the current directory or the directory set by
\fB-cd\fR if used).  When \fB-i\fR is used, \fBzip\fR proceeds with the
file system scan as normal.  After the file list to operate on is
generated, \fBzip\fR then filters that list using the patterns in the \fB-i\fR
(include) and \fB-x\fR (exclude) lists.  As \fB-i\fR and \fB-x\fR filter the
files list, these are called \fBfilters\fR.

It's important to note that the size of the file scan (and so how long it
takes) is not impacted by filters; they are applied after the scan.  If a
scan is taking a long time, consider choosing a zip root directory farther
down the tree or zipping specific subdirectories.  For instance, on Unix if
the current directory is root (/):
.RS
.IP
\fCzip foo -r .  -i "/usr/*"\fR
.RE
.IP
will have \fBzip\fR scan the entire system to come up
with a file list that then will be cut down to just the /usr directory.
.RS
.IP
\fCzip foo -r usr\fR
.RE
.IP
would likely be much faster.  (\fB-pa\fR can be used to prefix "usr/" to
the front of paths if needed.
.RS
.IP
\fCzip foo -r usr -pa usr/\fR
.RE
.IP
for example.)

Though the examples here focus on Unix paths (and Windows paths, as they are
similar), other ports may use syntax similar to how paths are defined on
that port.  For instance, on VMS \fB-i\fR and \fB-x\fR paths and patterns
are specified similar to how VMS paths are specified.

\fB-i\fR and \fB-x\fR take values in two forms.  If the option is immediately
followed by a pattern (no space, or "=" is used) the list has only one item.
If there is white space between the option and the first pattern, this is a
value list of patterns that terminates either at the end of the line, the next
option, or the special argument "@" (just @ with white space around it).  For
example, in:
.RS
.IP
\fCzip  -i=somefile.txt  archivename  -r  .\fR
.RE
.IP
\fB-i\fR has a list with one item, \fIsomefile.txt\fR.  A one item list is
self terminated.  (In practice, "=" must be used to define a single file
list, as characters immediately following "i" might be taken as part of the
option name.  For example, "-icat" would be taken as \fB-ic\fR, followed by
\fB-a\fR and \fB-t\fR.  An exception is "-i@" described below.)  In contrast,
in:
.RS
.IP
\fCzip  archivename -r .  -i  somefile.txt  anotherfile\fR
.RE
.IP
\fB-i\fR has a two value list that terminates at the end of the line, and
includes \fIsomefile.txt\fR and \fIanotherfile\fR.  This can be
rearranged as in:
.RS
.IP
\fCzip  -i  somefile.txt  anotherfile  @  archivename  -r  .\fR
.RE
.IP
where @ is used to terminate the list.  Also equivalent is:
.RS
.IP
\fCzip  -i  somefile.txt  anotherfile  -r  archivename  .\fR
.RE
.IP
where the \fB-r\fR option ends the list.

On Unix, any wildcards in patterns need to be escaped to prevent the
shell from expanding them, otherwise the results of shell globbing
will be used by \fBzip\fR to filter the file list.  For complex patterns,
it's typically easiest to enclose the entire pattern in double quotes:
.RS
.IP
\fCzip  -RE  -i  "*.txt"  "*.[ch]"  -r  archivename  .\fR
.RE
.IP
where \fB-RE\fR is needed to enable \fBzip\fR processing of the
regular expression "[ch]".  This \fB-i\fR list will include files
that end in ".txt", ".c", and ".h".

So to include \fIdir\fR,
a directory directly under the current directory, use
.RS
.IP
\fCzip -r foo . -i "dir/*"
.RE
.IP
to match paths such as \fIdir/a\fR and \fIdir/b/file.c\fR.
Note that currently the trailing / is needed
for directories (as in
.RS
.IP
\fCzip -r foo . -i dir/
.RE
.IP
to include directory \fIdir\fR and
.RS
.IP
\fCzip -r foo . -i "dir/*"
.RE
.IP
to include directory \fIdir\fR and its contents).

But note that the above just is demonstrating use of \fB-i\fR.  Actually
.RS
.IP
\fCzip -r foo dir
.RE
.IP
would be more efficient to zip up \fIdir\fR and its contents.

The long option form of the first example is
.RS
.IP
\fCzip -r foo . --include \\*.c
.RE
.IP
and does the same thing as the short option form.

Use \fB\-sc\fR (show command line) to see how your command line
will be parsed.  This also will catch if you left off a
needed \\ or quote and the shell expanded a wildcard.
\fB-sc\fR will exit before the file scan is actually done and
so is relatively fast.
.RS
.IP
\fCzip -r -sc foo . --include \\*.c
.RE
.IP

Adding \fB-sf\fR (show files) to the command line will prompt \fBzip\fR
to perform the file scan and filter the list, and then display the list
of files to operate on without performing the actual archiving operation.
.RS
.IP
\fCzip -r -sf foo . --include \\*.c
.RE
.IP

Also possible:
.RS
.IP
\fCzip -r foo  . -i@include.lst\fR
.RE
.IP
which will only include the files in the current directory and its
subdirectories that match the patterns in the file \fIinclude.lst\fP, one
file pattern per line.  Note that there is no space between \fB-i\fR and \fB@\fR.
(This is a variation of the \fB-i\fP option and
should not be confused with invoking an argfile.)  Note that paths and
patterns must appear on each line in the file exactly.  For instance,
leading and trailing spaces are significant.  No trimming is done.

The above is the single item list format.  It's also possible to specify
multiple include files and patterns:
.RS
.IP
\fCzip -r foo  . -i @include.lst @include2.lst "*.txt"\fP
.RE
.IP
\fBzip\fR will perform the file scan, then filter the list to only include
files that match a pattern in \fIinclude.lst\fR or \fIinclude2.lst\fR, or
that end in ".txt".  The list terminates at the end of the line.  Note that
\fI@include.lst\fR and \fI@include2.lst\fR are part of the \fB-i\fR value
list and so are read as include files, one path or pattern a line, not
as argfiles.  Use \fB-sc\fR to see how the line is parsed by \fBzip\fR if
you are not sure if an argument was read as an argfile or as a list file.
Argfile names will be replaced by the content of the argfile, where as list
files won't.  All will be considered list files if \fB-AF\fR is not used to
enable argfiles.

See \fB-R\fR for more on patterns and \fB-x\fR for more on include and exclude.
Also see the section on \fBPATTERN MATCHING\fR below.

\fB-i\fP, \fB-x\fP and \fB-R\fP are filters.  In the case of \fB-i\fP and
\fB-x\fP, if recursion is enabled by \fB-r\fP, each directory tree listed
on the command line will be traversed.  In the case of \fB-R\fP, the
current directory tree will be traversed.  Then the \fB-i\fP, \fB-x\fP and
\fB-R\fP patterns are matched against the resulting list.  To save time,
keep the directory trees searched as small as possible.  Instead of \fB-R\fP,
consider a more targeted use of \fB-r\fP.

.TP
.PD 0
.B \-I
.TP
.PD
.B \-\-no-image
[Acorn RISC OS] Don't scan through Image files.  When used, \fBzip\fP will not
consider Image files (eg. DOS partitions or Spark archives when SparkFS
is loaded) as directories but will store them as single files.

For example, if you have SparkFS loaded, zipping a Spark archive will result
in a zipfile containing a directory (and its content) while using the 'I'
option will result in a zipfile containing a Spark archive. Obviously this
second case will also be obtained (without the 'I' option) if SparkFS isn't
loaded.

.TP
.PD 0
.B \-ic
.TP
.PD
.B \-\-ignore-case
[VMS, WIN32] Ignore case when matching archive entries.  This option is
only available on systems where the case of files is ignored.  On systems
with case-insensitive file systems, case is normally ignored when matching
files on the file system but is not ignored for \fB-f\fP (freshen),
\fB-d\fP (delete), \fB-U\fP (copy),
and similar modes when matching against archive entries (currently \fB-f\fP
ignores case on VMS) because archive entries can be from systems where
case does matter and names that are the same except for case can exist
in an archive.  The \fB\-ic\fR option makes all matching case insensitive.
This can result in multiple archive entries matching a command line pattern.

.TP
.PD 0
.B \-j
.TP
.PD
.B \-\-junk-paths
Store just the name of a saved file (junk the path), and do not store
directory names.  By default,
.B zip
will store the full path (relative to the current directory).

Using this option can result in the same file name occuring multiple times.
\fBzip \fR will exit with an error if the same path (in this case name)
occurs more than once in the file list.

Also note that using \fB-j\fR and performing two separate \fBzip\fR
operations where the same name occurs in each operation (once the path
is stripped) may result in the first file being overwritten by the second
in the archive.

If negated, as in \fB-j-\fR, full relative paths are stored (cancels any
previous \fB-j\fR on the command line or in the \fBZIPOPT\fR environment
variable).

.TP
.PD 0
.B \-jj
.TP
.PD
.B \-\-absolute-path
[MacOS] Record Fullpath (+ Volname).  The complete path including
volume will be stored.  By default the relative path will be stored.

.TP
.PD 0
.B \-J
.TP
.PD
.B \-\-junk-sfx
Strip any prepended data (e.g. a self extracting SFX stub) from the archive.

.TP
.PD 0
.B \-k
.TP
.PD
.B \-\-dos-names
Attempt to convert the names and paths to conform to MSDOS,
store only the MSDOS attribute (just the user write attribute from Unix),
and mark the entry as made under MSDOS (even if it was not);
for compatibility with PKUNZIP under MSDOS which cannot handle certain
names such as those with two dots.

.TP
.PD 0
.B \-kf\ \fIkeyfilepath\fR
.TP
.PD
.B \-\-keyfile\ \fIkeyfilepath\fR
When encrypting, a key is needed.  The key is normally the password, either
prompted for (by using \fB-e\fR or \fB-Y\fR) or provided using \fB-P\fR.
\fBzip 3.1\fR now supports providing part or all of the key using the
contents of a file.  The file providing the contents is called a
\fBkeyfile\fR.  (This should not be confused with certificate keyfiles,
which \fBzip\fR does not support.  Currently there are no immediate
plans for \fBzip\fR to support certificate encryption or authentication.
If we do add that support, that file would probably be referred to as
a keystore.)

When \fB-kf\fR is used, the file at \fIkeyfilepath\fR is used as the
keyfile.

When using \fBAES\fR encryption, the password to \fBzip\fR is limited to
128 bytes.  This is a limitation of the \fBAES\fR encryption implementation.
(\fBTraditional\fR encryption has a longer maximum length, but due to the weak
nature of \fBTraditional\fR encryption the same algorithm described below is
used for both \fBTraditional\fR and \fBAES\fR encryption.)

When \fB-kf\fR is used to specify a keyfile, the file is opened and up to the
first 128 non-NUL bytes are read from it.  This is buffered as possible key
content in a keyfile buffer.  Note that this content can include any byte
values except for zero value bytes ('\\0'), which are skipped.

When \fB-kf\fR is used and \fB-e\fR or \fB-P\fR are not used, the entire
contents of the keyfile buffer is used as the password.

When \fB-kf\fR is used and a password is also specified, the password is
used as the first part of the key.  Then any remaining space up to the 128
byte limit is filled in using the contents of the keyfile buffer.  So
essentially the keyfile buffer contents are appended to the password to
form the key, and then the key truncated to 128 bytes.

If the keyfile buffer contains normal text, the result is equivalent to
specifying the entire key as the password.  This fact can be used to pass
the keyfile content to a utility that does not recognize keyfiles by
just appending the keyfile content to the specified password.  However, if
the keyfile content includes binary, this may not work and a utility that
understands the implementation of keyfiles used by \fBzip\fR may need to
be used.  \fBzipcloak\fR understands keyfiles and can be used to decrypt
the archive at the receiving end.

.TP
.PD 0
.B \-l
.TP
.PD
.B \-\-to-crlf
Translate the Unix end-of-line character LF (linefeed, \\n) of file content
into the MSDOS convention CR LF (carriage return and linefeed, \\r\\n).
This option should not be used on binary files, and \fBzip\fR checks files
for binary before performing the conversions.

This option can be used on Unix if the \fBzip\fP file is intended for MSDOS
or Windows, converting Unix format text to Windows format text. If the input
files already contain CR LF, this option adds an extra CR. This is to ensure
that \fBunzip -a\fR on Unix will get back an exact copy of the original file,
to undo the effect of \fBzip -l\fR.

See \fB-ll\fR for more on how binary files are handled.

.TP
.PD 0
.B \-la
.TP
.PD
.B \-\-log-append
Append to existing logfile.  Default is to overwrite.

.TP
.PD 0
.B \-lf\ \fP\fIlogfilepath\fP
.TP
.PD
.B \-\-logfile-path\ \fP\fIlogfilepath\fP
Open a logfile at the given path.  By default any existing file at that location
is overwritten, but the \fB\-la\fP option will result in an existing file being
opened and the new log information appended to any existing information.
Only warnings and errors are written to the log unless the \fB\-li\fP option is
also given, then all information messages are also written to the log.

Log files are generally flushed after all writes to keep the log current.

Also see the \fB-lF\fR option.

.TP
.PD 0
.B \-lF
.TP
.PD
.B \-\-log-output
Open a logfile as \fB-lf\fP, but use the same path as the output archive
except that the \fI.zip\fP extension is replaced by \fI.log\fP.  This
option is useful if the archive path is not known (as in a script) or
to avoid typing a long path twice.

.TP
.PD 0
.B \-li
.TP
.PD
.B \-\-log-info
Include information messages, such as file names being zipped, in the log.
The default is to only include the command line, any warnings and errors, and
the final status.

.TP
.PD 0
.B \-ll
.TP
.PD
.B \-\-from-crlf
Translate MSDOS/Windows CR LF (carriage return and linefeed, \\r\\n)
line ends of file content into Unix LF (linefeed, \\n) line ends.  This option
should not be used on binary files, and \fBzip\fR will check for binary before
converting the line ends.

This option can be used on MSDOS or Windows if the \fBzip\fR file is intended
for \fBunzip\fR under Unix, converting Windows line ends to Unix line ends.

As \fB-ll\fR removes the CR from CR LF line end pairs, it is possible that
the results can't be reversed by \fB-l\fR, especially if the file had a
mix of Windows and Unix line ends.

The first couple buffers of each file to be converted
are checked for binary.  (How many characters are checked varies for each
compression method, but generally this is a few thousand characters, or the
whole file if smaller than that.)  This check is used to determine if the
file is text (has no binary).  \fBzip\fR then proceeds with the conversions
if the file is text.  If later the file is found to contain binary, a
corrupted file warning is issued.

As of \fBzip 3.1\fR, if binary is found during the conversion, and the output
file is seekable and rewritable, \fBzip\fR will back up and reprocess the file
as binary.  This corrects the original incorrect text/binary decision.  No
conversions are done on binary files (except for EBCDIC to ASCII conversions
when \fB-aa\fR is used to force them).  If the output is not rewritable,
\fBzip\fR issues a corruption warning and leaves the file as is.  Generally
we find the first couple buffers check to be very reliable, only failing
on test files we create to fool it, but the user should be aware that it
can fail.

Usually, for speed, \fBzip\fR uses the result of the first couple buffers
check to set the text/binary attribute of the file.  However, the \fB-BF\fR
(binary full check) option can be used to force checking the entire file
for binary.  When \fB-l\fR, \fB-ll\fR or \fB-a\fR are used, \fB-BF\fR is
automatically set so the entire file is checked to validate the conversion
was done to a text file.

As of \fBzip 3.0\fR, a new algorithm is being used for binary detection.
\fBUTF-8\fR, for instance, now is considered text and will be processed
as such.

.TP
.PD 0
.B \-lu
.TP
.PD
.B \-\-log-utf8
Put file paths in log as UTF-8.  Need an application that can understand
UTF-8 to accurately read the log file, such as Notepad on Windows XP and
later.

\fBzip\fR should now be sending UTF-8 to the console if the console
can handle it.  If it isn't already getting UTF-8, sending log output
to stdout to see UTF-8 probably won't work.  If your console can
understand UTF-8, but \fBzip\fR hasn't detected that it can, the
\fB-US\fR option can be used to pass UTF-8 to the console.  However,
detection should now be automatic and using \fB-US\fR to force UTF-8
output may have mixed results at best.

Note that on Windows, \fBzip 3.1\fR now writes Unicode directly to the
console.  However, because of deficiencies with the Windows command window
in Windows 7 and earlier, full Unicode can't be displayed.  For instance,
if English is the OS language, Asian fonts (such as Japanese) may not display
(just boxes instead).  This is a deficiency in the console window, not
\fBzip\fR.  However, copying and pasting those boxes to a Unicode aware editor
(such as Notepad) should show that these are the correct Unicode characters.
Windows 10 command windows look to have full Unicode support.

.TP
.PD 0
.B \-L
.TP
.PD
.B \-\-license
Display the
.B zip
license.

.TP
.PD 0
.B \-m
.TP
.PD
.B \-\-move \ \ \
Move the specified files into the
.B zip
archive; actually,
this deletes the target directories/files after making the specified
.B zip
archive.  If a directory becomes empty after removal of files, the
directory is also removed.  No deletions are done until
.B zip
has created the archive without error.
Using \fB-m\fR is useful for conserving disk space in some cases,
but is potentially dangerous so it is recommended to use it in
combination with
.B \-T
which tests the archive before removing input files.

.TP
.PD 0
.B \-MM
.TP
.PD
.B \-\-must-match
All input patterns must match at least one file and all input files
found must be readable.

Normally when an input pattern does not match
a file the "name not matched" warning is issued, and when an input file
has been found but later is missing or not readable a "could not open"
warning is issued.  In either case
.B zip
continues creating the archive, with missing or unreadable new files
being skipped and files already in the archive remaining unchanged.
After the archive is created, if any files were not readable
.B zip
returns the OPEN error code (18 on most systems) instead of the normal
success return (0 on most systems).

With \fB\-MM\fP set,
.B zip
exits as soon as an input pattern is not matched (whenever the
"name not matched" warning would be issued) or when an input file is
not readable.  In either case \fBzip\fR exits with an OPEN error
and no archive is created.

This option is useful when a known list of files is to be zipped so
any missing or unreadable files will result in an error.  It is less
useful when used with wildcards, but \fBzip\fR will still exit with an
error if any input pattern doesn't match at least one file and if any
matched files are unreadable.  If you want to create the archive
anyway and only need to know if files were skipped, don't use
.B \-MM
and just check the return code.  If you need to know what names were
not matched and which files could not be opened, consider logging the
operation using \fB\-lf\fP and checking the log afterwards.

.TP
.PD 0
.B \-MV\ \fImode\fP
.TP
.PD
.B \-\-mvs\-mode\ \fImode\fP
[MVS] Set the MVS path translation mode to \fImode\fP.  Paths on MVS
are generally in the form \fIaa.bb.cc.dd\fP, where the dots separate the
parts of the path.  To make these paths more compatible with non-MVS
systems, \fBzip\fP converts the dots to slashes.  The default
translation has caused problems, however, so this option now allows
control of how the paths are translated.  \fImode\fP can be:

\fBdots\fP \- Store paths as they are on the file system (typically in
the form \fIaa.bb.cc.dd\fP).

\fBslashes\fP \- Change MVS paths in form \fIaa.bb.cc.dd\fP (using dots) to
\fIaa/bb/cc/dd\fP (using slashes).
.IP
\fBlastdot\fP \- Change paths in form \fIaa.bb.cc.dd\fP to \fIaa/bb/cc.dd\fP
where all but the last dot is converted to slashes.  This is the default
for backward compatibility and is probably the most compatible
format for old MSDOS 8.3 file systems.
.IP
\fImode\fP can be appreviated to the first letter (\fBd\fP, \fBs\fP, or
\fBl\fP).

.TP
.PD 0
.BI \-n\ \fR\fIsuffixes\fP
.TP
.PD
.B \-\-suffixes\ \fR\fIsuffixes\fP
Do not attempt to compress files ending with the given
\fIsuffixes\fR (file extensions, on Unix, Windows, VMS, and similar systems).
Such files are simply stored (no compression) in the output \fBzip\fP file,
so that
.B zip
doesn't waste time trying to compress them.
The suffixes are separated by
either colons or semicolons.  For example:
.RS
.IP
\fCzip -rn .Z:.zip:.tiff:.gif:.snd  foo foodir\fP
.RE
.IP
will compress everything from
.I foodir
into
.IR foo.zip ,
but will store any files that end in
.IR .Z ,
.IR .zip ,
.IR .tiff ,
.IR .gif ,
or
.I .snd
without trying to compress them
(image and sound files often have their own specialized compression methods).
By default,
.B zip
does not compress files with the following extensions:

.I .7z .arc .arj .bz2 .cab .gz .lha .lzh .lzma .pea
.I .rar .rz .tbz2 .tgz .tlz .txz .xz .Z .zip .zipx .zoo .zz

(This list subject to change.)  Such files are stored directly in the output
archive.
The environment variable ZIPOPT can be used to change the default options on
a more permanant basis. For
example, under Unix with csh:
.RS
.IP
setenv ZIPOPT "-n .gif:.zip"
.RE
.IP
To attempt compression on all files, use:
.RS
.IP
zip -n : foo
.RE
.IP
where the single \fI:\fR is an empty \fB-n\fR list.  The maximum compression
option
.B \-9
previously attempted compression on all files regardless of extension, but now
\fBzip 3.1\fR lets \fB-9\fP also obey the suffix list.  To get the previous
\fB-9\fP behavior, use \fB-9\fP and "\fB-n :\fP":
.RS
.IP
zip -9n : foo file1 file2
.RE
.IP
On Acorn RISC OS systems the suffixes are actually filetypes (3 hex digit
format).  By default, \fBzip\fP does not compress files with filetypes in the list
DDC:D96:68E (i.e. Archives, CFS files and PackDir files).

As of \fBzip 3.1\fP, the \fB\-n\fP option now allows additional control over
which compression method
is used for each suffix.  The general enhanced forms of this option are:
.RS
.IP
\-n \fIMethod\fP=\fISuffixList\fP
.RE
.IP
and
.RS
.IP
\-n \fIMethod\fP-\fILevel\fP=\fISuffixList\fP
.RE
.IP
The first form allows setting a list of suffixes that use the specified
\fIMethod\fP,
overriding any global compression method set by \fB\-Z\fP when files with a
suffix in \fISuffixList\fP are processed.  So when a file with one of the
listed suffixes is processed, it will be compressed using \fIMethod\fR.

The second form allows even finer granularity, forcing use of \fIMethod\fP at
compression level \fILevel\fP to compress files whose suffixes are in
\fISuffixList\fP, overriding any general \fB-Z\fP and \fB-0\fP to \fB-9\fP
compression and level settings.  (Setting a level of 0 is not allowed as it
would force use of Store instead of the specified compression method.)

\fIMethod\fP is any valid method that would be provided to \fB\-Z\fP.
\fILevel\fP is a single
digit from 1 to 9 representing the compression level that would be
specified by
the options \fB\-1\fP .. \fB\-9\fP, or can be "\-" to specify the default
compression level.

The \fIStore\fP compression method (\fB-0\fP, no compression) cannot be
overridden, the method for \fIStore\fP always being \fIStore\fP.

\fISuffixList\fP is specified as a colon-separated list.  A list with
just ":" is the
empty list.  (";" can be used instead of ":" as the list separator.)

When a list is supplied for a compression method (Store, if no method is
given), it wipes out any previous list.  For instance
.RS
.IP
\-n .zip:.txt\fP
.RE
.IP
would wipe out the default Store list.  To include any previous list
contents, use "*", as in
.RS
.IP
\-n "*:.zip:.txt"\fP
.RE
.IP
The * must be escaped or quoted on Unix.  The * is replaced by the current
list.  Using *, it's possible to chain lists together, as in
.RS
.IP
\-n "*:.zip:.txt"  -n "*:.gz"\fP
.RE
.IP
This works for other compression methods as well:
.RS
.IP
\-n "lzma=.zip"  -n "lzma=*:.gz"\fP
.RE
.IP
If a suffix is listed in more than one \fB-n\fR, the last one on the
command line including the suffix controls that suffix.  For instance
.RS
.IP
\-n "lzma=.zip"  -n "ppmd=*:.zip"\fP
.RE
.IP
Given .zip starts in the default Store list, the first \fB-n\fR pulls
\fI.zip\fR from the Store list and puts it in the LZMA list, and the
second \fB-n\fR pulls it from the LZMA list and puts it in the PPMd
list.  A suffix can only be in one list.

For example, to use LZMA compression with \.txt and \.log files, but
otherwise use default Deflate compression on all other files not in
the default Store list, use:
.RS
.IP
zip archive *  -n lzma=.txt:.log
.RE
.IP

To use PPMd compression at compression level 8 with \.txt and \.log files:
.RS
.IP
zip archive *  -n ppmd-8=.txt:.log
.RE
.IP

As a more complex example:
.RS
.IP
zip archive *  \-Z bzip2  \-8  \-n lzma\-6=.exe:.obj:.olb
.RE
.IP
Files matching suffixes in ".exe:.obj:.olb" will be compressed with LZMA
at level 6.  Files matching suffixes in the default Store suffix list are
stored.  Other files will be compressed using bzip2 at level 8.

See also \fB\-1\fP .. \fB\-9\fP for setting a default compression level for
specific compression methods.

.TP
.PD 0
.B \-nw
.TP
.PD
.B \-\-no-wild
Do not perform internal wildcard processing (shell processing of wildcards is
still done by the shell unless the arguments are escaped).  Useful if a list
of paths is being
read and no wildcard substitution is desired.

.TP
.PD 0
.B \-N
.TP
.PD
.B \-\-notes
[Amiga, MacOS] Save Amiga or MacOS filenotes as zipfile comments. They can be
restored by using the \fB-N\fP option of \fBunzip\fP. If \fB-c\fP is used
also, you are
prompted for comments only for those files that do not have filenotes.

.TP
.PD 0
.B \-o
.TP
.PD
.B \-\-latest-time
Set the "last modified" time of the
.B zip
archive to the latest (oldest) "last modified" time
found among the entries in the
.B zip
archive.
This can be used without any other operations, if desired.
For example:
.IP
\fCzip -o foo\fP
.IP
will change the last modified time of
\fIfoo.zip\fP
to the latest time of the entries in
\fIfoo.zip\fP.

\fB-o\fR can be impacted if entries in the archive were added under different
time zones.  See \fB-f\fR for more on time zones.

.TP
.PD 0
.B \-O \fP\fIoutput-file\fP
.TP
.PD
.B \-\-output-file \fP\fIoutput-file\fP
Process the archive changes as usual, but instead of updating the existing
archive,
output a new archive named \fIoutput-file\fR.  Useful for updating an archive
without changing the existing archive.  The input archive must be a
different file than the output archive.

This option can be used to create updated split archives.
It can also be used with \fB\-U\fP to copy entries from an existing archive
to a new archive.  See the \fBEXAMPLES\fP section below.

Another use is converting \fBzip\fP files from one split size to another.
For instance, to convert an archive with 700 MB (CD) splits to one with
2 GB (DVD) splits, can use:
.RS
.IP
zip -s 2g cd-split.zip --out dvd-split.zip
.RE
.IP
which uses copy mode.  (If \fB--out\fR is used without any input files,
copy mode is assumed.  See \fB\-U\fP below.)  Also:
.RS
.IP
zip -s 0 split.zip --out unsplit.zip
.RE
.IP
(split size of zero) will convert a split archive to a single-file archive.
(\fB-s-\fR will also set the split size to zero.)

Copy mode will convert stream entries (using data descriptors, which
should be compatible with most unzips) to normal entries (which should
be compatible
with all unzips), except if Traditional encryption was used.  For
archives with encrypted entries, \fBzipcloak\fP can be used to decrypt
the entries and convert them to normal entries.  But lately it seems
most utilities out there will read entries using data descriptors so this
may not be as big an issue as it once was.

.TP
.PD 0
.B \-p
.TP
.PD
.B \-\-paths
Include relative file paths as part of the names of files stored in the archive.
This is the default.  The \fB\-j\fP option junks the paths and just stores the
names of the files.

Note that \fB-p\fR and \fB-j-\fR are equivalent.

.TP
.PD 0
.B \-pa\ \fR\fIprefx\fP
.TP
.PD
.B \-\-prefix-add-path\ \fR\fIprefx\fP
Prefix paths of added/updated files with the string
\fIprefx\fP.

The string must not contain '\\' (escapes not supported) or '../'
(changing to a higher directory level not supported).  All characters
must be printable characters.  Other restrictions have been relaxed
and it's up to the user to ensure the resulting paths are valid.

Slashes are allowed so that the prefix can put the new/updated files into
a directory.

Note that prefixing is done to archive paths in the Unix format (with
slash directory separators), not to the OS format paths.  So, given
the current directory is \fIfoo\fR:
.RS
.IP
\fCzip  archive  *  -pa foo/\fR
.RE
.IP
should put all the files in the \fIfoo\fR directory into a \fIfoo\fR directory
in the archive on most all systems.

See also \fB-pp\fR (\fB--prefix-path\fR) which prefixes all paths (not just
added/updated paths), \fB-Cl\fR (\fB--case-lower\fR) and
\fB-SI\fR (\fB--name-stdin\fR).

.TP
.PD 0
.B \-pn
.TP
.PD
.B \-\-non-ansi-password
Normally a password is forced to only use ANSI printable 7-bit characters to avoid
character set issues when an archive is moved to another system or
locale.  This option allows the password to include
any characters, such as UTF-8.

.TP
.PD 0
.B \-pp\ \fR\fIprefx\fP
.TP
.PD
.B \-\-prefix-path\ \fR\fIprefx\fP
Prefix all paths in the archive with the string \fIprefx\fP.

See \fB-pa\fR for limitations.

See also \fB-Cl\fP.

.TP
.PD 0
.B \-ps
.TP
.PD
.B \-\-allow-short-pass
AES encryption (not Traditional encryption) requires a minimum password length
dependent on the level of encryption selected.  This is to avoid encrypting a
file using a strong algorithm but using such an easy to crack password that the
encryption is essentially useless.  The minimums are still weak (see \fB-Y\fP),
but are hopefully short enough to be used.  Ideally the password length should
approach the key length for the encryption used.

This option disables the password length checks.  A zero length password is
still not allowed, however.  \fB-ps\fP is mainly provided for testing and
should not be used if security is a concern.

.TP
.PD 0
.B \-pt
.TP
.PD
.B \-\-performance-time
The \fB-pt\fR option enables timing of the execution of \fBzip\fR.  When
\fB-pt\fR is included in the command line, \fBzip\fR will note the time
it starts up.  When the operation finishes, a message is displayed noting
how long the operation took.  The time is provided with millisecond
accuracy.

This option is only available on systems where an accurate enough clock
is available to provide millisecond timing.

This option is intended as a way to get execution timing data regardless of
the system and how \fBzip\fR is invoked.

.TP
.PD 0
.B \-pu
.TP
.PD
.B \-\-pswd-to-unzip
As of \fBzip 3.1\fR, when \fB-T\fR is used to test the archive after
creation, any password given to \fBzip\fR (via \fB-e\fR or \fB-Y\fR
(prompted), or directly by \fB-P\fR) is no longer passed on to
\fBunzip\fR unless \fB-pu\fR is used.  This change generally results
in \fBunzip\fR prompting for the password.  As the password is no longer
passed on the command line (using \fB-P\fR) to \fBunzip\fR by default, this
is inherently safer.  (See \fB-P\fR for more on this.)  Including \fB-pu\fR
on the command line will restore passing the password given to \fBzip\fR
to \fBunzip\fR.

See \fB-T\fR for more on testing archives.

.TP
.PD 0
.B \-P\ \fR\fIpassword\fP
.TP
.PD
.B \-\-password\ \fR\fIpassword\fP
Use \fIpassword\fP to encrypt zipfile entries (if any).  \fBTHIS IS
INSECURE!\fP  Many multi-user operating systems provide ways for any user to
see the current command line of any other user; even on stand-alone systems
there is always the threat of over-the-shoulder peeking.  Storing the plaintext
password as part of a command line in an automated script is even worse.
Whenever possible, use the non-echoing, interactive prompt (\fB-e\fR or
\fB-Y\fR) to enter passwords.

(And where security is truly important, be sure to use AES encryption with a
strong password, or an external encryption program such as GNU Privacy Guard
(GnuPG, gpg) instead of the relatively weak \fBTraditional\fR zip encryption.)

(As of \fBzip 3.1\fR it's now possible to use \fB-P\fR in an argument file and
then use the argument file on the command line.  This effectively hides the
password, but then security of the argfile must be maintained to prevent
another user from opening the file and seeing the password.  However, this
approach is still limited to text passwords.  See \fB-kf\fR for a way to
get around this limitation.)

See \fB-Y\fR for more on encryption.

See \fB-pu\fR and \fB-T\fR for more on how passwords are passed to \fBunzip\fR
when using \fB-T\fR to test the resulting archive.

.TP
.PD 0
.B \-p0
.TP
.PD
.B \-\-print0
When reading file lists using \-@ or \-@@, expect file paths to be separated
by a NUL ('\\0') character.  This allows \fBzip\fR to directly read the output
of \fBfind\fR using the \fB\-print0\fR option.  Using \fB\-\-print0\fR allows
\fBzip\fR to read paths that may include things such as newline characters,
which would normally terminate the path.

.TP
.PD 0
.B \-q
.TP
.PD
.B \-\-quiet
Quiet mode; eliminate informational messages and comment prompts.
(Useful, for example, in shell scripts and background tasks).

.TP
.PD 0
.BI \-Q\fR\fIn\fP
.TP
.PD
.B \-\-Q\-flag\ \fR\fIn\fP
[QDOS] Store information about the file in the file header with \fIn\fP defined
as
.RS
bit  0: Don't add headers for any file
.RE
.RS
bit  1: Add headers for all files
.RE
.RS
bit  2: Don't wait for interactive key press on exit
.RE
For backward compatibility this is a number value following the short option
without a space.

.TP
.PD 0
.B \-r
.TP
.PD
.B \-\-recurse\-paths
Travel the directory structure recursively;
for example:
.RS
.IP
zip -r foo.zip foo
.RE
.IP
or more concisely
.RS
.IP
zip -r foo foo
.RE
.IP
In this case, all the files and directories in directory
.I foo
are saved in a
.B zip
archive named \fIfoo.zip\fP,
including files with names starting with \fB"."\fP (on Unix),
since the recursion does not use the shell's file-name substitution mechanism.
If you wish to include only a specific subset of the files in directory
\fIfoo\fP
and its subdirectories, use the
\fB\-i\fP
option to specify the pattern of files to be included.
You should not use
\fB\-r\fP
with the name \fB".*"\fP,
.RS
.IP
\fCzip -r foo .*\fP
.RE
.IP
since that matches \fB".."\fP (due to Unix globbing)
which will attempt to zip up the parent directory
(probably not what was intended).  Putting it in quotes
.RS
.IP
\fCzip -r foo ".*"\fP
.RE
.IP
should just match the "." files in the current directory
and if any are directories the files under them (as \fBzip\fR
skips ".." when recursing).

Multiple source directories are allowed as in
.RS
.IP
\fCzip -r foo foo1 foo2\fP
.RE
.IP
which first zips up \fIfoo1\fP and then \fIfoo2\fP, going down each directory.

Note that while wildcards to \fB-r\fR are typically resolved while recursing down
directories in the file system (including only matching files in the resulting
file list), any \fB-R\fN, \fB-x\fR, and \fB-i\fR wildcards
are applied to internal archive pathnames (the file list) as filters once the
directories are scanned.

To have wildcards apply to files in subdirectories when recursing on
Unix and similar systems where the shell does wildcard substitution, either
escape all wildcards or put all arguments with wildcards in quotes.  This lets
\fBzip\fR see the wildcards and match files in subdirectories using them as
it recurses.

Previously \fBzip\fR did not process wildcards in input file names on
Unix, so any escaped wildcards on the command line used as part of an input
file were kept as literal characters.  (Wildcards in patterns to \fB-i\fR,
\fB-x\fR, and \fB-R\fR have always been processed by \fBzip\fR when escaped,
and should always be escaped.)  As of \fBzip 3.1\fR, escaped wildcards in
input file names are now processed by \fBzip\fR.  Unescaped wildcards will
still be processed by the shell.

.TP
.PD 0
.B \-R
.TP
.PD
.B \-\-recurse\-patterns
Travel the directory structure recursively, starting at the
current directory, and match the ends of paths against the
given patterns.  For example:
.RS
.IP
\fCzip -R foo "*.c"\fP
.RE
.IP
In this case, all relative file paths starting at the current directory
where the end of the path matches \fI*.c\fP are stored into a \fBzip\fR
archive named \fIfoo.zip\fR.  More than one pattern can be listed as separate
arguments.  Note for PKZIP users: the equivalent command is
.RS
.IP
\fCpkzip -rP foo *.c\fP
.RE
.IP
Patterns are relative file paths as they appear in the archive, or will after
zipping, and can have optional wildcards in them.  On Unix and other systems
where the shell expands wildcards, all patterns should be quoted, or the
wildcards escaped, to keep the shell from replacing them with file lists.

As an example, given the current directory is \fIfoo\fP and under it are
directories \fIfoo1\fR and \fIfoo2\fR and in \fIfoo1\fP is the file
\fIbar.c\fR and in \fIfoo2\fR is \fIbar.c\fR and also directory \fIfoo22\fR
and in that \fIbar2.c\fR:
.RS
.IP
\fCfoo/foo1/bar.c\fR
.IP
\fCfoo/foo2/bar.c\fR
.IP
\fCfoo/foo2/foo22/bar2.c\fR
.RE
.IP
Then
.RS
.IP
\fCzip foo -R "bar.c"\fP
.RE
.IP
will include \fIfoo1/bar.c\fR and \fIfoo2/bar.c\fR in the archive
\fIfoo.zip\fR.

For each pattern given on the command line, \fB-R\fR counts the number of
directory components in the pattern.  Let's call that \fBn\fR.  The number of
components in a pattern (\fBn\fR) is one more than the number of slashes in
the pattern.  (The slash (/) is always used as the directory separator for
paths in an archive, which is what \fB-R\fR patterns are matching against.)

Then \fB-R\fR compares the last \fBn\fR components of each path to that
pattern and, if they match, the path is included.  So above, the pattern
\fIbar.c\fR has no slashes and so \fBn = 1\fR and only paths that end in
the name "bar.c" are included in the archive.  Note that directories always
end in "/" and so will not be matched unless the pattern ends in "/".

As another example,
.RS
.IP
\fCzip foo -R "foo*/*"\fR
.RE
.IP
has two components ("foo*" and "*"), so \fBn = 2\fR.  So only the last two
components of paths will be matched against this pattern.  Note that
when \fB-R\fR is used, "*" only matches one component and does not
span directory boundaries.  So only paths where the next to last component
matches "foo*" and the last component matches "*" will be included in the
archive \fIfoo\fR.  So \fIfoo1/bar.c\fR, \fIfoo2/bar.c\fR, and
\fIfoo2/foo22/bar2.c\fR will be included.  In the last case, "foo22/bar2.c"
is compared to "foo*/*", and matches, and so is included.

On Unix, all input patterns should be
quoted, or any wildcards escaped, as the wildcards are part of the patterns
\fBzip\fR is to match against as it recurses.  Letting the shell process
them will likely have undesired results.  See \fB-r\fR for more on escaping
wildcards.

\fB-i\fR and \fB-x\fR can be used to filter the matches further.

See \fB-i\fP and \fB-x\fP for more on pattern matching.

.TP
.PD 0
.B \-RE
.TP
.PD
.B \-\-regex
Before \fBzip 3.0\fP, list matching was enabled by default on
Windows platforms.  Because of confusion resulting from the need to
escape "[" and "]" in names, as of \fBzip 3.0\fP it is now off by default
for Window so "[" and "]" are just normal characters in names.  This option
enables bracketed list matching again.  Since then we've had complaints on other
platforms, so in \fBzip 3.1\fP use of [] for list matching is now off
for all platforms unless \fB-RE\fP is used.

Note that for shells that recognize [] lists (such as modern Unix shells), it's
still necessary to escape [ and ] (unless you want the shell to process the
[] lists).

\fB-RE\fP enables the use of "[" and "]" for delimiting a list of
characters where, if any character in that list matches the character
at the position the square bracketed list is, that character is matched.
Essentially a bracketed list acts as a selective wildcard.  For instance,
.RS
.IP
\fCzip zipfile "foo[abc]"\fP
.RE
.IP
would look for a file named \fIfoo[abc]\fP, while
.RS
.IP
\fCzip zipfile "foo[abc]" -RE\fP
.RE
.IP
would match files \fIfooa\fP, \fIfoob\fP, and \fIfooc\fP.
On Unix, without quotes, as in
.RS
.IP
\fCzip zipfile foo[abc]\fP
.RE
.IP
the shell would process the list, and \fIfooa\fP, \fIfoob\fP, and \fIfooc\fP
would be matched.

Examples of list patterns when \fB-RE\fP enabled:
.IP
\fB[abcd]\fP - Match any one of characters \fIa\fP, \fIb\fP, \fIc\fP,
\fId\fP.
.IP
\fB[a-d]\fP - Match any character in range (\fIa\fP, \fIb\fP, \fIc\fP,
\fId\fP).
.IP
\fB[!a-d]\fP - Match any character not in the range.  (Leading ! or ^
negates range.)
.IP
\fB[[]\fP - Match "[".
.IP
\fB[ad-f[3]\fP - Match \fIa\fP, \fId\fP, \fIe\fP, \fIf\fP, \fI[\fP, or \fI3\fP.

\fB-nw\fP turns off wildcard matching, including bracketed list matching (if escaped).

See the section on \fBPATTERN MATCHING\fR below for more on wildcards and
matching.

.TP
.PD 0
.B \-s\ \fP\fIsplitsize\fP
.TP
.PD
.B \-\-split\-size\ \fP\fIsplitsize\fP
Enable creating a split archive and set the split size.  A split archive is an
archive that could be split over many files.  As the archive is created, if
the size of the archive reaches the specified split size, that split is closed
and the next split opened.  In general all splits but the last will be the
split size and the last will be whatever is left.  If the entire archive is
smaller than the split size, a single-file archive is created.

Split archives are stored in numbered files.  For example, if the output
archive is named \fIarchive\fP and three splits are required, the resulting
archive will be in the three files \fIarchive.z01\fP, \fIarchive.z02\fP, and
\fIarchive.zip\fP.  Do not change the numbering of these files or the archive
will not be readable as these are used to determine the order splits are read.

\fIsplitsize\fR is a number optionally followed by a multiplier.  Currently the
number must be an integer.  The multiplier can currently be one of
\fBk\fP (kilobytes), \fBm\fP (megabytes), \fBg\fP (gigabytes), \fBt\fP
(terabytes), or \fBp\fP (petabytes).  (Note that these are powers of 2,
so k = 1024 and so on.)  As
\fB64k\fP is the minimum split size, numbers without multipliers
default to megabytes.  For example, to create a split archive called \fIfoo\fP
with the contents of the \fIbar\fP directory with splits of 670 MB that might
be useful for burning on CDs, the command:
.RS
.IP
zip -s 670m -r foo bar
.RE
.IP
could be used.

Currently the old splits of a split archive are not excluded from a new
archive with the same name (and so would be included in the new archive
if in scope), but they can be specifically excluded.  If possible, keep
the input and output archives out of the path being zipped when creating
split archives.

Using \fB\-s\fP without \fB\-sp\fP as above creates all the splits where
\fIfoo\fP is being written, in this case the current directory.  This split
mode updates the splits as the archive is being created, requiring all
splits to remain writable, but creates split archives that are readable by
any unzip that supports standard split archives.  See \fB\-sp\fP below for
enabling split pause mode which allows splits to be written directly to
removable media.  Also \fB-sb\fR to ring the bell when \fBzip\fR prompts
for the next split.

The option \fB\-sv\fP can be used to enable verbose splitting, which provides
details of how the splitting is being done.

Split archives cannot be updated, but see \fB\-O\fP (big o, \fB\-\-out\fP) for
how a split archive can be updated as it is copied to a new archive.
A split archive can also be converted into a single-file archive using a
split size of 0 (zero) or negating the \fB\-s\fP option:
.RS
.IP
zip -s 0 split.zip --out single.zip
.RE
.IP
\fBunzip 6.00\fR does not support split archives.  Some workarounds include
using \fBzip\fR to convert the split archive to a single file archive
that \fBunzip\fR can read.  Another is to combine the splits manually
into one file, which \fBunzip\fR can process with some effort, adjusting
the now incorrect offsets in the archive.  Yet another possibility is
using \fBzipsplit\fR to convert the split archive into a set of normal
archives, which \fBunzip\fR can read by using a wildcard in the zip file
name given to \fBunzip\fR.

\fBunzip 6.1\fR does support split archives.

See \fB\-U\fP (\fB\-\-copy\fP) and \fB-O\fR (\fB--output-file\fR) for
more on using copy mode.

.TP
.PD 0
.B \-sb
.TP
.PD
.B \-\-split\-bell
If splitting and using split pause mode, ring the bell when \fBzip\fP pauses
for each split destination.

.TP
.PD 0
.B \-sc
.TP
.PD 0
.B \-sc=\fImode\fR
.TP
.PD 0
.B \-\-show\-command
.TP
.PD
.B \-\-show\-command=\fImode\fR
Show the command line read by \fBzip\fP (as \fBzip\fP parsed it) and exit.  The
new command parser permutes the arguments, putting all options and any values
associated with them before any non-option arguments.  This allows an option
to appear anywhere in the command line as long as any values that go with the
option immediately follow it.  This option displays the command line as
\fBzip\fR sees it, including any arguments from the environment, such as from
the \fBZIPOPT\fP variable, as well as the results of processing any argfiles.
Once the command line is displayed, \fBzip\fR exits without performing the file
scan or any processing.

The \fB-sc\fP option is useful when a \fBzip\fP command line is not executing
as expected.  It allows seeing just what the command line is, including any
shell wildcard expansions that may or may not be intended.

\fB-sc\fR normally displays the command line as read, showing the arguments
in the final order they will be processed.  This includes any environment and
argfile content.  This is "read" mode and is generally sufficient to see
what's going on and is the default mode.  If \fImode\fR is set to "parsed",
\fBzip\fR goes a step further and rebuilds the command line based on how
internal structures were set.  This can sometimes help identify a bug in
\fBzip\fR, but usually "read" mode is best for debugging command lines.
Note that "read" mode presents a command line that should be a valid
command line that \fBzip\fR can read and process.  The output of "parsed"
mode currently may not be a valid command line.  If mode is set to "all",
the "read" mode and "parsed" mode outputs are both displayed.

See \fB-sf\fR (\fB--show-files\fR) as a way to see what files \fBzip\fR would
operate on.

.TP
.PD 0
.B \-sd
.TP
.PD
.B \-\-show-debug
Output debugging messages detailing what \fBzip\fP is doing each step of the
way.  We use this as a development tool, but found this feature can be useful
to help users track down bugs and so left it in the release version of
\fBzip\fR.

When used with \fB\-pt\fR, includes time from start of \fBzip\fR to that point.

.TP
.PD 0
.B \-sf
.TP
.PD
.B \-\-show\-files
Show the files that would be operated on, then exit.  For instance, if creating
a new archive, this will list the files that would be added.  If the option is
negated, \fB\-sf\-\fP, output only to an open log file.  Screen display is
not recommended for large lists.

If the command line contains no input files, \fB-sf\fR will show the contents
of an archive (similar to \fBunzip -l\fR).

See \fB-sF\fR to add information to the files listing provided by \fB-sf\fR.

When used with \fB-FS\fR (file sync), \fB-sf\fR shows the differences between the archive
and the file system.  See \fB-FS\fR for more on this.

\fB-i\fR and \fB-x\fR can be used with \fB-sf\fR to filter the list.  This
allows listing all *.txt files in an archive, for instance.

See also \fB-su\fP and \fB-sU\fP.

.TP
.PD 0
.B \-sF \fIparam\fP
.TP
.PD
.B \-\-sf\-params \fIparam\fP
Add additional information to the \fB-sf\fP listing.

Currently the following are supported:
.RS
.IP
\fBusize\fR     adds uncompressed size in parentheses after the name

\fBcomment\fR   adds file comment under the name
.RE
.IP
Example:
.RS
.IP
zip  -sf  -sF usize  archive
.RE
.IP
This would list all files in \fIarchive\fP and include the uncompressed
size of each file in the listing.

To include both usize and comments in the listing:
.RS
.IP
zip  -sf  -sF usize,comment  archive
.RE
.IP
This is an option value list, which uses a comma to separate values.
No spaces should be in the list.

Multiple \fB-sF\fR can be used, each adding to the listing:
.RS
.IP
zip  -sf  -sF usize  -sF comment  archive
.RE
.IP
This would include both usize and comment in the list.  Items can be
removed from the listing using "\fB-\fR".  Also, "\fB+\fR" alone adds
all available fields to the list, while "\fB-\fR" alone removes all optional
fields.  So:
.RS
.IP
zip  -sf  -sF +  -sF -comment  archive
.RE
.IP
adds all optional fields, then removes the comment field, resulting in
only usize being added to the \fB-sf\fR listing.
.RS
.IP
zip  -sf  -sF +,-comment  archive
.RE
.IP
is another way to specify this.

"\fBnone\fR" is equivalent to "\fB-\fR" alone and "\fBall\fR" is equivalent
to "\fB+\fR" alone.  So the above is equivalent to:
.RS
.IP
zip  -sf  -sF all,-comment  archive
.RE
.IP


.TP
.PD 0
.B \-si
.TP
.PD
.B \-\-show\-pid
[UNIX, when enabled] Display the PID of the \fBzip\fP process.  This is
useful if the progress reporting feature is enabled and the PID is needed
to signal the \fBzip\fR process.

.TP
.PD 0
.B \-so
.TP
.PD
.B \-\-show\-options
Show all available options supported by \fBzip\fP as compiled on this system.
As this command reads the option table, it should include all available
options.  Each line
includes the short option (if defined), the long option (if defined), the
format of any value that goes with the option, if the option can be negated,
and a small description.  The value format can be:
.RS
.IP
(blank)     no value

\fBreq\fR         required value

\fBopt\fR         optional value

\fBlist\fR        list of values

\fBchar\fR        single character value

\fBnum\fR         number value

\fB=val\fR        optional value requiring '=' to signal presense of value
.RE
.IP
The output of this option is not intended to show how to use any option but
only show what options are available.

Note that "single character value" and "number value" option values require
the option value to be next to the option, without spaces.  This is to
maintain backward compatibility with how these option values were defined
in \fBzip 2.x\fP.

.TP
.PD 0
.B \-sp
.TP
.PD
.B \-\-split\-pause
If splitting is enabled with \fB\-s\fP, enable split pause mode.  This
creates split archives as \fB\-s\fP does, but stream writing is used so each
split can be closed as soon as it is written and \fBzip\fP will pause between
each split to allow changing split destination or media.

The \fB\-sb\fP option can be used to ring the bell when \fBzip\fP pauses for
the next split destination.

Though this split mode allows writing splits directly to removable media, it
uses the stream archive format that may not be readable by some unzips.  Before
relying on splits created with \fB\-sp\fR, test a split archive with the unzip
you will be using.

To convert a stream split archive (created with \fB\-sp\fR) to a standard
archive see the \fB-O\fR (\fB\-\-output-file\fR) option.

If space is available, it may be easier to just use \fB-s\fP without \fB-sp\fP
and then burn the splits to removable media.

.TP
.PD 0
.B \-ss
.TP
.PD
.B \-\-show-suffixes
Show the current settings for file suffixes.  This list is impacted by \fB-n\fP
and the \fB-0\fP through \fB-9\fP options.

.TP
.PD 0
.B \-st
.TP
.PD
.B \-\-stream
This option enables stream mode, where central directory file information is
also stored local to each stored file.  Archive entries created using stream
mode are fully extractable using a stream reading unzip, where as normal
entries need information from the central directory (at the end of the archive)
to be fully extracted.

.TP
.PD
.B \-\-stdinout\-tty
Tells \fBzip\fR that stdin and stdout are TTYs.  This option is useful when
using a \fBzip\fR Windows binary on CYGWIN, as stdin and stdout are pipes
and isatty() returns false for them.  Setting this option tells \fBzip\fR
to ignore isatty() and treat stdin and stdout as TTYs.

Binaries compiled by CYGWIN do not have this issue.  This is only an issue
when a \fBzip\fR binary compiled by Windows is used in CYGWIN or git BASH.
A result of this issue is the Windows compiled zip.exe without parameters:
.RS
.IP
\fC./zip.exe\fP
.RE
.IP
generates the output:
.RS
.IP
\fC  adding: - (stdin)
.RE
.IP
and hangs, waiting for input.  Setting this option in the environment
variable \fBZIPOPT\fR allows commands like "\fBzip -v\fR" to correctly work.

One negative effect of this is \fBzip\fR can't be used without parameters
as a filter:
.RS
.IP
\fCprog1 | zip | prog2\fP
.RE
.IP
However, this works:
.RS
.IP
\fCprog1 | zip - - | prog2\fP
.RE
.IP
Another option is using winpty:
.RS
.IP
\fCwinpty zip.exe\fP
.RE
.IP
This will correctly show the \fBzip\fR help.

.TP
.PD 0
.B \-su
.TP
.PD
.B \-\-show\-unicode
Similar to \fB\-sf\fP, but also shows Unicode versions of the paths if they
exist.  As storing UTF-8 is now the default and \fB-sf\fR handles that, this
option is of marginal use.  It still may be useful if \fB-UL\fR is used.

.TP
.PD 0
.B \-sU
.TP
.PD
.B \-\-show\-just\-unicode
Similar to \fB\-sf\fP, but shows only Unicode versions of the paths.  If a
Unicode version doesn't exist, show the standard version of the path.  As
with \fB-su\fR, this is now of marginal use.

.TP
.PD 0
.B \-sv
.TP
.PD
.B \-\-split\-verbose
Enable various verbose messages while splitting, showing how the splitting
is being done.

.TP
.PD 0
.B \-S
.TP
.PD
.B \-\-system-hidden
[MSDOS, OS/2, WIN32 and ATARI] Include system and hidden files.
.RS
[MacOS] Includes finder invisible files, which are ignored otherwise.
.RE

.TP
.PD 0
.B \-SI\ \fInewname\fR
.TP
.PD
.B \-\-rename-stdin\ \fInewname\fR
Rename stdin.  Normally when \fBzip\fR receives input from stdin, the
resulting archive entry is named "\fB-\fR".  \fB-SI\fR renames "\fB-\fR"
to another name in the archive.

This can be useful when the receiver of the archive prefers a more
descriptive name for the content.  \fB-SI\fR can also be useful when
multiple entries are being added to an archive (at different times)
from stdin.  This option allows each content received from stdin to
have a unique name.

\fInewname\fR follows the same rules as used by \fB-pa\fR and \fB-pp\fR
to add a prefix to entries.  See \fB-pa\fR for more.

.TP
.PD 0
.BI \-t\ \fR\fImmddyyyy\fP
.TP
.PD
.B \-\-from\-date\ \fR\fImmddyyyy\fP
Do not operate on files modified prior to the specified date,
where
.I mm
is the month (01-12),
.I dd
is the day of the month (01-31),
and
.I yyyy
is the year.
The
.B ISO\ 8601
date format
.I yyyy\-mm\-dd
is also accepted.
For example:
.RS
.IP
\fCzip -rt 12071991 infamy foo\fP

\fCzip -rt 1991-12-07 infamy foo\fP
.RE
.IP
will add all the files in
.I foo
and its subdirectories that were last modified on or after 7 December 1991,
to the
.B zip
archive
\fIinfamy.zip\fP.

Both \fB-t\fP and \fB-tt\fP can be used together to set a date range to
include files between two dates:
.RS
.IP
\fCzip -r  -t 2017-01-01  -tt 2018-01-01  2017_files  foo\fP
.RE
.IP

In \fBzip 3.1\fP and later, times can be included to further refine the
date/time filtering.  Times are specified in the formats
.RS
.IP
\fC:hh:mm\fP

\fC:hh:mm:ss\fP
.RE
.IP
where \fIhh\fP is the hour (24 hour format from 00 to 23), \fImm\fP is the
minute (00 to 59), and \fIss\fP is the second (00 to 59).  Note that times
in a \fBzip\fP archive are in MSDOS format and have about 2 second resolution.

The leading colon (\fI:\fP) is required for a time.  If the date is left
off, the current date is assumed.

For example, the above examples including a time of 8 AM would be:
.RS
.IP
\fCzip -rt 12071991:08:00 infamy foo\fP

\fCzip -rt 1991-12-07:08:00 infamy foo\fP
.RE
.IP
The first colon can be replaced by "T" as in \fBISO 8601\fR:
.RS
.IP
\fCzip -rt 1991-12-07T08:00 infamy foo\fP
.RE
.IP
When using times, make sure to account for time zone and Daylight Saving Time
changes between where entries were added and where they are being listed or
extracted.  (As \fBzip\fR generally stores UT times and restores local times
from them, this seems mainly a problem with file systems that do not store
time in UT, such as FAT32.)  Other zips and unzips may also handle time
different from \fBzip\fR, depending on if they use UT time or rely on local
time.  If time issues develop, \fB-td\fR may help.

.TP
.PD 0
.BI \-td\ \fR\fItime_delta\fP
.TP
.PD
.B \-\-date\-diff\ \fR\fItime_delta\fP
Account for time zone change by also checking for a date/time match plus
or minus a given time delta, considering the file date/time to be a
match if the time exactly matches, or matches the time plus the delta or
the time minus the delta.

The \fB-td\fR option takes a time delta specified
the same as the time part of a date/time being supplied to \fB-t\fR.  Only
hours, minutes and optionally seconds can be specified, not year, month or
day, and the time must be preceeded by a T or a colon.  The delta must be
less than 24 hours.

\fB-td\fR may be useful to work around time issues caused by time zone changes
or switching to and from Daylight Saving Time, which can change the reported file
times on some file systems and create mismatches that \fB-u\fR or \fB-FS\fR, for
example, will see as file changes.  Using \fB-td\fR can remove these false
positives and so only files that actually changed are included in the archiving
operation.

Note that \fB-td\fR, when used with \fB-t\fR and/or \fB-tt\fR, increases the
date/time range to include the given delta.

See \fB-t\fP for how times are handled.

.TP
.PD 0
.BI \-tt\ \fR\fImmddyyyy\fP
.TP
.PD
.B \-\-before\-date\ \fR\fImmddyyyy\fP
Do not operate on files modified after or at the specified date,
where
.I mm
is the month (01-12),
.I dd
is the day of the month (01-31),
and
.I yyyy
is the year.
The
.B ISO\ 8601
date format
.I yyyy\-mm\-dd
is also accepted.
For example:
.RS
.IP
\fCzip -rtt 11301995 infamy foo\fP

\fCzip -rtt 1995-11-30 infamy foo\fP
.RE
.IP
will add all the files in
.I foo
and its subdirectories that were last modified before 30 November 1995,
to the
.B zip
archive
.IR infamy.zip .

See \fB-t\fP for how date ranges and times are handled.

.TP
.PD 0
.B \-T
.TP
.PD
.B \-\-test\ \ \ \
Test the integrity of the new zip file. If the check fails, the old zip file
is unchanged and, if \fB-m\fR was specified, no input files are removed.

The \fB\-T\fR option actually spawns a command like "\fIunzip -tqq tempname\fR"
to test the temporary archive (where tempname is replaced by \fBzip\fP with
the path to the temporary archive being tested).  Usually this uses the
default \fBunzip\fP on the system.  If this isn't compatible with the
archive being created (such as when a 5 GB archive is being created and the
system has an old \fBunzip\fR that can't test archives bigger than 2 GB), either
\fBunzip\fR should be updated or \fB-TU\fR or \fB\-TT\fR used
to specify what \fBunzip\fR to use for testing.

If multiple \fBunzip\fP programs are installed on the system, it may be
useful to change the (Unix) PATH or (VMS) symbol DCL$PATH so that
"unzip" runs the right program.

As of \fBzip 3.1\fR, any password given to \fBzip\fR is no longer
passed to \fBunzip\fR unless \fB-pu\fR is used.  This generally results
in \fBunzip\fR prompting for the password, which is usually safer than
including the password on the command line used to execute \fBunzip\fR to
perform the testing (as that command line may be visible to others).
Adding \fB-pu\fR to the command line restores passing the password to
\fBunzip\fR.

As \fB-T\fR passes the password on the command line, passwords including
more than basic 7-bit printable ASCII characters may fail.  Also, \fBzip\fR
uses various escapes to attempt to pass shell-recognized characters on the
command line for instance, but this can fail in some situations.  It's
generally safer (and more secure) to not use \fB-pu\fR and just enter the
password manually when prompted by \fBunzip\fR.

If other than the system default \fBunzip\fR needs to be used for testing,
use \fB-TU\fR instead of \fB-TT\fR when possible.  \fB-TU\fR provides full
\fBunzip\fR functionality, such as detailed error reporting, while any
utility can be specified in the \fB-TT\fR command string and so \fBzip\fR
provides only minimal support.

When \fB-TT\fR is not being used, including \fB-TV\fR on the command line
will tell \fBunzip\fR to be more verbose, providing the results of each
file test.  As of \fBzip 3.1\fR, the \fB-v\fR option is no longer used
for this purpose.

In previous versions of \fBzip\fR, the archive was created and then
\fBunzip\fR called to test the archive.  If \fBunzip\fR did not
have a capability needed to test the archive, the test would fail.
The archive may be fine, but the test failing may negate the creation
of a large archive that may have no issues.  As the test was done
after the archive was created, possibly hours might go by before the
\fBunzip\fR incompatibility was found.

\fBzip 3.1\fR now gathers the features \fBunzip\fR would need to test
the archive after the file scan but before the zip operation proceeds,
and compares that list of features to the features of the \fBunzip\fR
being used for the testing.  If the \fBunzip\fR is missing a needed
feature, \fBzip 3.1\fR will exit with an error before the archive is
created, noting the needed but missing features.  If \fBunzip\fR passes
this check, the odds are good that if an archive test fails it is because
of a bad archive rather than an incompatible \fBunzip\fR.  (At this point
\fBzip\fR is rather stable and we believe it unlikely it would create a
bad archive, unless some outside factor prevents it from doing so, and in
these cases \fBzip\fR generally reports the problem and exits with an error.)
If this check fails, consider creating the archive without -T and then
testing the resulting archive using \fBunzip\fR.

\fBzip 3.1\fR now splits the \fBZE_TEST\fR error code into two distinct error
codes.  Now the new error \fBZE_UNZIP\fR is returned if either \fBunzip\fR
(or whatever program is used with \fB-TT\fR) can't be found, is not
executable, or is incompatible with the planned archive.  \fBZE_TEST\fR now
is reserved for when an archive fails testing or a related testing issue
occurs.

As of \fBzip 3.1\fR the temp file is tested if the created archive is a
single disk archive and \fB--out\fR is not used.  If the created archive
is multi-disk (split), the output needs to be renamed to the final name
for \fBunzip\fR to find all the parts, so the final archive is generated
and that is tested.  If \fB--out\fR is used, the results of the archive
test will not impact the input archive, so the output archive is renamed
to the final output name before the archive is tested.  So if the output
is split or \fB--out\fR is used, there's only limited benefit using
\fB-T\fR to test the archive rather than finishing the
archiving operation and then testing the archive using \fBunzip -t\fR.
However, operations like \fB-m\fR that remove files are still aborted if
the test fails.

.TP
.PD 0
.B \-TT\ \fP\fIcmd\fP
.TP
.PD 0
.B \-\-unzip-command\ \fP\fIcmd\fP
.TP
.PD
.B \-\-test-command\ \fP\fIcmd\fP
Use command \fIcmd\fP instead of 'unzip -tqq' to test an archive when
\fB\-T\fR is used.

Where as this option can use any utility to do the testing, \fB-TU\fR
always uses \fBunzip\fR.  As \fB-TU\fR provides better \fBunzip\fR support,
that is preferred for testing over \fB-TT\fR.

On Unix, to use a copy of \fBunzip\fR in the current
directory instead of the standard system \fBunzip\fR one could use:
.RS
.IP
\fCzip archive file1 file2 -T -TT "./unzip -tqq"\fP
.RE
.IP
In \fIcmd\fR, "\fB{}\fP" is replaced by the name of the temporary archive, otherwise
the name of the archive is appended to the end of the command.  If a password
was provided to \fBzip\fP, the first "\fB{p}\fP" in the cmd string is replaced
by the password.  (See the password warning for \fB-T\fR.)  The return code
is checked for success (0 on Unix).

\fBzip 3.1\fR introduces additional string formats that can be used in a
\fB-TT\fR string.  One is a conditional format that is only filled in if the
item exists.  The basic format of this is:
.RS
.IP
{conditional: what to replace the {} expression with}
.RE
.IP
For example, "\fB{p: -P {p}}\fR" only inserts "-P password" into the
string if a password is being passed from \fBzip\fR.  This fixes the issue
where adding "\fB{p}\fR" to the command string required a password to always be
passed or the "\fB{p}\fR" would remain.

Keyfiles are supported using "\fB{k}\fR", which inserts the keyfile path, and
"\fB{k: -kf {k}}\fR", which acts similar to the conditional password inclusion
above.

The string "\fB{y}\fR" is also available, which passes the entire key on the
command line, but this should only be used for debugging purposes and may
not handle passwords with binary keyfile content.

For example (where \fIunziplarge\fP might be a copy of \fBunzip 6\fP or later
with large file support):
.RS
.IP
\fCzip -T -TT "unziplarge -tqq" big_archive.zip\fR

\fCzip -T -TT '/usr/local/bin/unzip6 -tqq' big_archive.zip\fR
.RE
.IP
Note that \fB-TT\fR specifies the whole \fBunzip\fR command (including
the \fB-t\fR and \fB-qq\fR options), not simply the \fBunzip\fR program
itself.  Carelessness here can cause "zip -T" to extract files from the
archive instead of merely testing it.  This is one reason \fB-TU\fR is
safer, as \fB-TU\fR takes care of the command details for you.

Another example:
.RS
.IP
\fCzip -T -pu -TT './unzip6 -tqq {p: -P {p}} {}' archive.zip\fR
.RE
.IP

\fB-TT\fP can be used with other programs to do the testing, not just
\fBunzip\fP.  However, the \fB-TT\fP option must specify a complete
command line to use the other program.  Also, the return code needs to
be compatible with what \fBzip\fP expects.

In general, use \fB-TU\fR unless a program other than \fBunzip\fR
must be used.

.TP
.PD 0
.B \-TU\ \fP\fIunzippath\fP
.TP
.PD
.B \-\-unzip-path\ \fP\fIunzippath\fP
Test using \fBunzip\fR as normal, but use \fIunzippath\fR as the \fBunzip\fR
to test with.  Unlike \fB-TT\fR, \fB-TU\fR only specifies the path to
\fBunzip\fR.  Specifying a password and/or a keyfile is automatically
handled by \fBzip\fR.  Also, as \fBunzip\fR must be used with \fB-TU\fR,
\fBzip\fR is able to provide detailed interpretation of \fBunzip\fR
errors, while \fB-TT\fR only returns error numbers.

On Unix, to use a copy of \fBunzip\fP in the current
directory instead of the standard system \fBunzip\fP, one could use:
.IP
\fC zip archive file1 file2 -T -TU ./unzip\fP
.IP
Note that only the \fBunzip\fR path is specified.

As less can go wrong with \fB-TU\fR than \fB-TT\fR, use of \fB-TU\fR
instead of \fB-TT\fR is highly recommended.

.TP
.PD 0
.B \-TV
.TP
.PD
.B \-\-unzip-verbose
When using \fBunzip\fR to test, adding \fB-TV\fR to the \fBzip\fR command line
removes the "qq" from the command line used to execute \fBunzip\fR, resulting
in the test results of each file being shown.  This can help determine what
issues exist in an archive that fails testing.

\fB-TV\fR replaces using \fB-v\fR to show the testing details of each file in
the archive.

\fB-TV\fR can't be used with \fB-TT\fR.

.TP
.PD 0
.B \-u
.TP
.PD
.B \-\-update
Replace (update) an existing entry in the
.B zip
archive only if it has been modified more recently
than the version already in the
.B zip
archive.
For example:
.RS
.IP
\fCzip -u stuff *\fP
.RE
.IP
will add any new files in the current directory,
and update any files which have been modified since the
.B zip
archive
.I stuff.zip
was last created/modified.  (Note that
.B zip
will not try to pack
.I stuff.zip
into itself when you do this.)
.IP
The
.B \-u
option with no input file arguments acts like the
.B \-f
(freshen) option.

\fB-u\fR will not catch if a file is replaced with an older one.  If all
changes to a directory need to be accounted for, consider using \fB-FS\fR
(file sync) instead.

\fB-u\fR can be impacted if entries were added under different time zones.
See \fB-f\fR for more on time zones.

.TP
.PD 0
.B \-U
.TP
.PD
.B \-\-copy\-entries
Copy entries from one archive to another.  Requires the \fB\-\-out\fP
option to specify a different output file than the input archive.  Copy
mode is the reverse of \fB\-d\fP delete.  When delete is being used
with \fB\-\-out\fP, the selected entries are skipped and all other
entries are copied to the new archive, while copy mode selects the
files to include in the new archive.  Unlike \fB\-u\fP update, input
patterns on the command line are matched against archive entries only
and not the file system files.  For instance,
.RS
.IP
\fCzip inarchive "*.c" --copy --out outarchive\fP
.RE
.IP
copies entries with names ending in \fB\.c\fP from \fIinarchive.zip\fP
to \fIoutarchive.zip\fP.  The wildcard \fImust\fP be escaped on some systems
to prevent the shell from substituting names of files from the
file system which may have no relevance to the entries in the archive.

If no input files appear on the command line and \fB\-\-out\fP is
used, copy mode is assumed:
.RS
.IP
\fCzip inarchive --out outarchive\fP
.RE
.IP
This is useful for changing split size for instance (by adding the
\fB\-s\fP option).  It also will
remove any data descriptors that are not needed.

Encrypting
and decrypting entries is not yet supported using copy mode.  Use
\fBzipcloak\fP for that.

.TP
.PD 0
.B \-UD
.TP
.PD
.B \-\-unicode-dont-use
Don't use Unicode extra fields found when reading an existing archive.

Only applies when Unicode extra fields are used, as when -UL was used
to create an archive.  Archives created by \fBzip 3.0\fR that use
Unicode may also have these extra fields.

This option essentially forces use of the local character set paths
in the main path fields.  This could cause issues if the archive is
being used where a different local character set is active.

If an archive has numerous Unicode extra field issues, \fB-UD\fR
can be used to ignore them and fall back to the local paths.  This option
throws away all Unicode extra field information, not just bad paths.
Typically there is no reason to use this option, except for test and debugging
purposes, and it's use may result in unreadable file names.

Note that main paths flagged as Unicode by the UTF-8 bit are still
handled as Unicode as that's what they are and there's nothing else.
This option only applies when UTF-8 extra fields are used and there is a local
character set path in the main path field.

.TP
.PD 0
.B \-UE
.TP
.PD
.B \-\-unicode-escapes
Replace Unicode characters with escapes.

Normally \fBzip\fP replaces Unicode characters not in the current local
character set with Unicode escapes (described below).  This option tells
\fBzip\fR to replace all but printable 7-bit ASCII with Unicode escapes.

Unicode escapes take the forms \fB#Uxxxx\fP and \fB#Lxxxxxx\fP, where
\fIx\fP is an ASCII character for a hex digit.  The first is used if a
16-bit character number is sufficient to represent the Unicode character
and the second if the character needs more than 16 bits to represent its
Unicode character code.

.TP
.PD 0
.B \-UL
.TP
.PD
.B \-\-unicode-local
Store the local character set path as the main path, and UTF-8 in
the Unicode Path extra field.

This was the default for \fBzip 3.0\fR, and allowed backward compatibility
with other existing utilities at the time.  However, modern zips and unzips
now use the UTF-8 bit to flag UTF-8 Unicode in the main path and no longer
include the local character set path.  This allows more consistent handling
of paths across applications and ports, but can cause older utilities
that don't know Unicode trouble.

This option restores the default \fBzip 3.0\fR behavior, which uses the
Unicode Path extra field to store the UTF-8 and puts the local character
set path in the main path field.  This allows for backward handling of
paths within a local character set environment, while still providing
UTF-8 Unicode paths for use by more modern utilities.

.TP
.PD 0
.B \-UN\ \fR\fIv\fP
.TP
.PD
.B \-\-unicode\ \fR\fIv\fP
Determine what \fBzip\fP should do when there is a mismatch between the
main path and a Unicode Path extra field in an existing archive.

This option is not applicable to entries that don't use the Unicode
Path extra field.  Archives created or updated with \fBzip 3.0\fR or with
\fBzip 3.1\fR while the \fB-UL\fR option is set may use the Unicode Path
extra field to store Unicode paths.

This option can be used to determine what \fBzip\fP should do
if there is a mismatch between the stored standard path and the stored
UTF-8 path (which can happen if the standard path was updated).  In all
cases, if there is a mismatch it is assumed that the standard path is
more current and \fBzip\fP should use that.

Values for \fIv\fP are:
.RS
.IP
q \- quit if paths do not match
.IP
w \- warn, continue with standard path
.IP
i \- ignore, continue with standard path
.RE
.IP
The default is to warn and continue.

.TP
.PD 0
.B \-US
.TP
.PD
.B \-\-unicode-show
Show Unicode in the console, even if support for it is not detected.

Normally \fBzip\fR detects if the output window can handle display of
Unicode and turns on Unicode output if supported.  This option forces output
of Unicode paths directly to the console/message stream.  (On Unix systems
Unicode generally means UTF-8.  On Windows systems Unicode generally means
wide characters.)

Option \fB-US\fR allows display of Unicode on systems where normally escapes
would be seen.  However, if \fBzip\fR does not automatically detect support
for display of Unicode, the results of using \fB-US\fR to force it may be mixed
at best.

Note that Windows 7 console windows do support Unicode, but just can't display
it due to lack of loaded fonts.  \fBzip\fR already outputs full Unicode to these
windows.  Windows 10 command prompt windows do fully support display of Unicode.

Also see \fB-lu\fR for putting UTF-8 in a log file.

.TP
.PD 0
.B \-UT
.TP
.PD
.B \-\-utest
Perform some quick Unicode tests.  These tests give a rough indication
of Unicode support on the current platform as compiled into \fBzip\fR.

This option is disabled by default, due to support of this feature falling
behind, and may be dropped before release.

.TP
.PD 0
.B \-v
.TP
.PD
.B \-\-verbose
Verbose mode or print diagnostic version info.

Normally, when applied to real operations, the \fB\-v\fR option enables the
display of a progress indicator during compression (see \fB\-dd\fR for more
on dots) and requests verbose diagnostic info about zipfile structure oddities
(\fB\-\-verbose\fR).

However, when
.B \-v
is the only command line argument the \fB\-\-version\fR command is executed
instead.
.RS
.IP
\fCzip -v\fP
.RE
.IP
The long option form \fB\-\-verbose\fR always executes the verbose option.

\fB\-\-verbose\fR is being updated and currently is of limited use.  See
\fB-ds\fR for more on the progress indicator and \fB-sd\fR for more on
debugging information.

On CYGWIN stdin and stdout are pipes, which prevents "\fBzip -v\fR" (Windows
binary) from showing version information.  Adding \fB--stdinout-tty\fR to
environment variable \fBZIPOPT\fR tells \fBzip\fR these are TTYs, allowing
"\fBzip -v\fR" to work as expected.  Another option is using winpty.  See
\fB--stdinout-tty\fR for more information.

.TP
.PD 0
.B \-v
.TP
.PD
.B \-\-version
When
.B \-v
is the only command line argument, or the long option form \fB\-\-version\fR is
used, a diagnostic screen is printed.  This should now work even if stdout is
redirected to a file, allowing easy saving of the information for sending with
bug reports to \fBInfo-ZIP\fP.  The version screen provides the help screen
header with program name, version, and release date, some pointers to the
\fBInfo-ZIP\fP
home and distribution sites, and shows information about the target environment
(compiler type and version, OS version, compilation date and the enabled
optional features used to create the \fBzip\fR executable as well as some
additional information).

When \fB-v\fP is not the only option given, the \fB\-\-verbose\fR command is
executed instead.

See \fB--verbose\fR for information regarding CYGWIN.

.TP
.PD 0
.B \-vq
.TP
.PD
.B \-\-quick-version
Output a quick version string and exit.  This can be used by a script to determine
the version of \fBzip\fP.  For example:
.RS
.IP
\fC zip -vq\fP
.RE
.IP
might result in:
.RS
.IP
\fCZip 3.1d-BETA (2015-08-12)  (c)2015 Info-ZIP  http://info-zip.org\fP
.RE
.IP
where \fBzip\ 3.1d-BETA\fR is the version (in this case BETA 3.1d), version date
is in \fByyyy-mm-dd\fR format, followed by the copyright and then a reference
to the \fBInfo-ZIP\fR site.

.TP
.PD 0
.B \-V
.TP
.PD
.B \-\-vms\-portable
[VMS] Save VMS file attributes.
(Files are  truncated at EOF.)   When a \fB-V\fP archive is unpacked on a
non-VMS system,  some file types (notably Stream_LF text files  and  pure
binary files  like fixed-512) should be extracted intact.  Indexed files
and file types with embedded record sizes (notably variable-length record
types) will probably be seen as corrupt elsewhere.

.TP
.PD 0
.B \-VV
.TP
.PD
.B \-\-vms\-specific
[VMS] Save VMS file attributes, and  all allocated
blocks in a file,  including  any  data beyond EOF.
Useful for moving ill-formed files  among  VMS systems.   When a \fB-VV\fP
archive is unpacked on a non-VMS system, almost all files will appear
corrupt.

.TP
.PD 0
.B \-w
.TP
.PD
.B \-\-vms\-versions
[VMS] Include file version numbers in the archive names.  By default,
version numbers are stripped from the archive names.  That is, "[.d]a.b;3"
is normally archived as "d/a.b", but with \fB\-w\fP, it would be archived
as "d/a.b;3".  (This might be inconvenient on a non-VMS system.  See also
\fB\-ww\fP, below.)

Note that \fBzip\fP normally processes only the highest version of a
file (";0"), but an explicit version wildcard (like ";*") can override
this.  \fB\-w\fP is required if multiple versions of a file are to be
stored in an archive; otherwise, when the version numbers are stripped
off as the files are stored in the archive, the duplicate names would
cause "cannot repeat names in zip file" errors.

Also see \fB-ww\fR for storing version using "." instead of ";".

.TP
.PD 0
.B \-wl
.TP
.PD
.B \-\-windows\-long\-paths
[WIN32] Windows platforms are generally limited to paths no longer than
260 characters.  \fB-wl\fP enables reading and storing paths longer than this.
The upper limit with this option enabled becomes roughly 32 KB.

A compatible unzip is needed to extract long paths.  In particular, an
archive with long paths will be seen as corrupted by Windows Explorer
under Windows 7 and earlier (and possibly Windows 8).  Do not save
long paths in an archive unless you know the unzip at the other end
can read and extract them.

\fBzip\fP issues a warning when the first Windows long path is encountered
and at the end of the \fBzip\fP operation.  If an archive without long paths
is needed, either exclude or remove the long paths, or don't use \fB-wl\fR.

\fB-wl\fP is now enabled by default.  Use \fB-wl-\fP to disable storing
Windows long paths.

.TP
.PD 0
.BI \-ws
.TP
.PD
.B \-\-wild\-stop\-dirs
Wildcards match only at a directory level.  Normally \fBzip\fP handles
paths as strings and given the paths
.RS
.IP
/foo/bar/\fIdir/file1.c\fP
.IP
/foo/bar/\fIfile2.c\fP
.RE
.IP
an input pattern such as
.RS
.IP
"/foo/bar/*"
.RE
.IP
normally would match both paths, the * matching \fIdir/file1.c\fP
and \fIfile2.c\fP.  Note that in the first case a directory
boundary (/) was crossed in the match.  With \fB\-ws\fP, no
directory bounds will be included in the match, making
wildcards local to a specific directory level.  So, with
\fB\-ws\fP enabled, only the second path would be matched.

Note that * specified in \fB-R\fR patterns never crosses
directory boundaries.

When using \fB\-ws\fP, use ** to match across directory boundaries as
* does normally.

.TP
.PD 0
.B \-ww
.TP
.PD
.B \-\-vms\-dot\-versions
[VMS] Like \fB\-w\fP, except that version numbers in archive names
use a "." separator instead of the default ";".  That is, with \fB\-w\fP,
"[.d]a.b;3" would be archived as "d/a.b;3", but with \fB\-ww\fP, it
would be archived as "d/a.b.3".  (This might be less inconvenient
on a non-VMS system.)

.TP
.PD 0
.B \-x\ \fR\fIfiles\fP
.TP
.PD
.B \-\-exclude\ \fR\fIfiles\fP
Explicitly exclude files that match the specified files/file patterns, as in:
.RS
.IP
\fCzip -r foo foo -x \\*.o\fP
.RE
.IP
which will include the contents of
.I foo
in
.I foo.zip
but exclude all the files that end in
\fI.o\fP.
The backslash avoids the shell filename substitution, so that the
name matching is performed by
.B zip
at all directory levels.  Quoting the patterns also works:
.RS
.IP
\fCzip -r foo foo -x "*.o"\fP
.RE
.IP
On Windows and other OS where the shell does not process wildcards, the
escaping or quoting is not needed:
.RS
.IP
\fCzip -r foo foo -x *.o\fP
.RE
.IP
A \fBfile pattern\fP is just a file path and name (generally relative to the
input root directory) with optional wildcards.

If wildcards are not acting as expected, check that they are escaped in the
command line.  Adding \fB-sc\fP to the command line to have
\fBzip\fP output the command line as \fBzip\fR sees it allows verifying if
any wildcards are being expanded by the shell.

Also possible:
.RS
.IP
\fCzip -r foo foo -x@exclude.lst\fP
.RE
.IP
which will include the contents of directory
.I foo
in
\fIfoo.zip\fP,
but exclude all files that match patterns in the text file
\fIexclude.lst\fP, one file/file pattern per line.  (Here, \fI@exclude.lst\fP
is a value of the \fB-x\fP option.  Do not confuse this with an argfile.
Argfiles never appear as values to options.  Also, \fB-AF\fR would need
to be used to enable argfile recognition.)  The paths and patterns in the file
must exactly fill each line.  For example, leading and trailing spaces are
significant and may prevent matching.

The long option forms of the above are
.RS
.IP
\fCzip -r foo foo --exclude \\*.o\fP
.RE
.IP
and
.RS
.IP
\fCzip -r foo foo --exclude=@exclude.lst\fP
.RE
.IP
Multiple patterns can be specified, as in:
.RS
.IP
\fCzip -r foo foo -x \\*.o \\*.c\fP
.RE
.IP
As of \fBzip 3.0\fP, \fB-x\fP (and \fB-i\fP) allow file lists that end
before the end of the command line.  The list is terminated with an
argument that is a single "@", the next option, or the end of the line.
So the above example could be rewritten as:
.RS
.IP
\fCzip foo foo -x \\*.o \\*.c @ -r\fP
.RE
.IP
where \fB-x \\*.o \\*.c @\fP is the exclude list.  Alternatively:
.RS
.IP
\fCzip foo foo -x "*.o" "*.c" @ -r\fP
.RE
.IP
If there is no space between \fB\-x\fP and
the pattern, just one value is assumed (no list):
.RS
.IP
\fCzip -r foo foo -x\\*.o\fP
.RE
.IP
To avoid confusion, the "=" form of this should be used, or this single value
form not used at all (use just the list version instead).
.RS
.IP
\fCzip -r foo foo -x=\\*.o\fP
.RE
.IP

See \fB-i\fR for more on include and exclude.

.TP
.PD 0
.B \-X
.TP
.PD
.B \-\-no\-extra
Do not save extra file attributes (Extended Attributes on OS/2, uid/gid
on Unix, etc.).  The zip format uses extra fields to include
additional information for each entry.  Some extra fields are specific
to particular systems while others are applicable to all systems.
Normally when \fBzip\fP reads entries from an existing archive, it
reads the extra fields it knows, strips the rest, and adds
the extra fields applicable to that system.  With \fB\-X\fP, \fBzip\fP strips
all old fields and only includes the Unicode and Zip64 extra fields
(if needed).  Currently these two extra fields cannot be disabled.
(As of \fBzip 3.1\fR, UTF-8 native mode is used by default, so the
Unicode extra fields are no longer used (by default).  The Zip64
extra fields are still used, regardless of \fB-X\fR, if Zip64 extensions
are needed.)

Negating this option, \fB\-X\-\fP, includes all the default extra fields,
but also copies over any unrecognized extra fields.  This could be useful
if the archive came from a utility that works with extra fields not known
to \fBzip\fP and you plan to use the archive with that utility again.

.TP
.PD 0
.B \-y
.TP
.PD
.B \-\-symlinks
For UNIX and VMS (V8.3 and later), store symbolic links as such in the
.B zip
archive, instead of compressing and storing the file referred to by
the link.  This can avoid multiple copies of files being included in
the archive as \fBzip\fP recurses the directory trees and accesses
files directly and by links.  However, this will exclude new contents
only available through a symlink.

[WIN32]  As of \fBzip 3.1\fP, Windows symlinks are now supported.  This
includes file symlinks as well as directory symlinks.  (Where as UNIX systems
do not distinguish between file and directory symlinks, Windows does.)
Windows symlinks are only supported on Windows XP or later.  \fBunzip 6.1\fP
or later is needed to recognize, list, and restore Windows symlinks in an
archive, otherwise they will be listed and restored as simple files or
directories.  Sufficient privilege is required to restore Windows symlinks
(such as Administrative access).

.TP
.PD 0
.B \-yy
.TP
.PD
.B \-\-mount-points
[WIN32]  For Windows Vista and later, \fBzip 3.1\fP now detects mount points
and will generally follow most quietly.  An exception are mount points to
off-line storage, which \fBzip\fP will warn about and skip.  \fB-yy\fP
disables following mount points on Windows, limiting the current zip
operation to the current mounted drive.  \fB-yy-\fP (negated \fB-yy\fP)
follows mount points as without \fB-yy\fP, but includes mount points that
look like off-line storage as well (which may require operator intervention
to mount the off-line storage).

Unix mount points not yet supported.

Storage of and restoring mount points not yet supported.

.TP
.PD 0
.B \-Y\ \fR\fIem\fP
.TP
.PD
.B \-\-encryption\-method\ \fR\fIem\fP
Set the encryption method.  Supported methods are \fBTraditional\fP
(also called \fBZipCrypto\fR, considered weak by current encryption
standards),
and WinZip-compatible \fBAES\fP (relatively strong encryption) with various
key lengths: \fBAES128\fP, \fBAES192\fP, and \fBAES256\fP.  An unzipper
capable of decrypting WinZip AES entries (such as \fBunzip 6.1\fP) is
needed to extract AES-encrypted entries.  (\fBzip\fR AES encryption is
compatible with WinZip and 7-Zip, for example.)

Minimum password lengths are as follows:
.RS
.TP "\w'\fIEncryption\ Method\fR'u+1n"
.I EncryptionMethod
\ \ \ \fIMinPassLength\fR
.TP
Traditional
\ \ \ \ \ \ \ \ \ 1
.TP
AES WG 128
\ \ \ \ \ \ \ \ 16
.TP
AES WG 192
\ \ \ \ \ \ \ \ 20
.TP
AES WG 256
\ \ \ \ \ \ \ \ 24
.RE
.IP
Password lengths should be much longer than this to match the security
provided by the key lengths, preferrably approaching the length of the
key used.  The less predictable the password the better.

The maximum AES password length is 128 bytes (characters if 7-bit ASCII).
This limit is in part a result of how passwords are hashed.

See \fB-kf\fR for how to use keyfiles to set binary passwords.

.TP
.PD 0
.B \-z
.TP
.PD
.B \-\-archive\-comment
Prompt for a multi-line comment for the entire
zip archive.  Also known as the zipfile comment.

The comment is ended by a line containing just a period,
or an end of file condition (^D on Unix, ^Z on MSDOS, OS/2, and VMS).
The comment can be taken from a file:
.RS
.IP
\fCzip -z foo < foowhat\fP
.RE
.IP
Alternatively, \fBzip 3.1\fR now provides \fB\-\-zz\fR to specify the
file to read the comment from.

As of \fBzip 3.1\fR, the comment can also be set as an optional value
to \fB-z\fR:
.RS
.IP
\fCzip foo -z="this is my comment"\fP
.RE
.IP
The archive comment is generally limited to about 32,765 characters.
However, most unzips don't handle multi-line zip file comments well,
if at all.  Probably best to keep to a single line no longer than
80 characters.  Zip will look for "\\n", "\\r", and "\\r\\n" escapes
in the value string provided to -z and convert these to newlines.
\fBunzip\fR will display a multi-line comment.

As of \fBzip 3.1\fP, when interacting with a terminal, \fBzip\fP will
show the current archive comment and allow keeping that or replacing
it with a new comment.

See also \fB\-zz\fR, \fB\-zc\fR, \fB\-c\fR and \fB\-cc\fR.

.TP
.PD 0
.B \-zc
.TP
.PD
.B \-\-show-zip-comment
Output archive (zipfile) comment and exit.

.TP
.PD 0
.B \-zz=archive_comment_file
.TP
.PD
.B \-\-comment-file=archive_comment_file
As \fB\-z="archive comment"\fR, but the comment is read from the given
file.

.TP
.PD 0
.B \-Z\ \fR\fIcm\fP
.TP
.PD
.B \-\-compression\-method\ \fR\fIcm\fP
Set the default compression method.  Currently the main methods supported
by \fBzip\fP are \fBStore\fP and \fBDeflate\fP; however, as of
\fBzip 3.1\fR all of the below methods are shipped in the \fBzip\fR source
kit and are compiled in by the standard build.  (Some ports do not support
all of the additional compression methods.  See the file \fBINSTALL\fR for
details.)  So, for a standard build, compression method can be set to (these
are case insensitive):

\fBStore\fP \- Setting the compression method to \fBStore\fP forces
\fBzip\fP to store entries with no compression.  This is generally
faster than compressing entries, but results in no space savings.
This is the same as using \fB\-0\fP (compression level zero).

\fBDeflate\fP \- This is the default method for \fBzip\fP.  If \fBzip\fP
determines that using \fBStore\fR will result in a smaller entry than
using \fBDeflate\fR, the entry will be stored instead.

\fBBzip2\fP \- If \fBBzip2\fP support is compiled in, this compression
method also becomes available.  \fBBzip2\fP tends to compress some data
a little better but generally takes longer than \fBDeflate\fR.

\fBLZMA\fP \- If \fBLZMA\fP support is compiled in, this compression
method also becomes available.  \fBLZMA\fP can provide better compression
of some types of files than \fBDeflate\fR, with a minor time impact.

\fBPPMd\fP \- If \fBPPMd\fP support is compiled in, this compression
method also becomes available.  \fBPPMd\fP can provide better compression
in many cases, but may take much longer than \fBDeflate\fR.

\fBCD_ONLY\fP \- This method removes all data, only storing entry
metadata.  It can only be selected when using \fB\-\-copy\fR mode.
\fBCD_ONLY\fR can be used to create essentially a list of entries in
an archive that can be used by the backup (\fB-BT\fR) and difference
(\fB-DF\fR) options to create a difference archive against.  The resulting
\fBCD_ONLY\fR archive is quite small (as it doesn't contain file data),
and can be used as a baseline against which later difference archives
are created.  Again, this method stores no actual file data and can't
be used to archive or restore files.  See \fB-DF\fR and \fB-BT\fR for
more information.

Note:  We are considering adding Deflate64 (Enhanced Deflate) and XZ
compression to \fBzip\fR shortly.

Many older unzip programs do not support the newer compression methods,
\fBBzip2\fP (method 12), \fBLZMA\fP (method 14), and/or \fBPPMd\fP
(method 98), so test the unzip you will be using before relying on
archives using these methods.

All compression methods (except \fBLZMA\fP) will test compression of
a file and switch to \fBStore\fP if the size grows instead of shrinks.
This automatic switchover has not been implemented for \fBLZMA\fP yet
but is planned.

For example, to add \fBbar.c\fP to archive \fBfoo\fP using \fBBzip2\fP
compression:
.RS
.IP
zip  -Z bzip2  foo  bar.c
.RE
.IP
The compression method can be abbreviated:
.RS
.IP
zip  -Zb  foo  bar.c
.RE
.IP

As of \fBzip 3.1\fP it is possible to control the compression method used
on a particular type of file with finer granularity.  See \fB\-n\fP and
\fB-0, -1, ..., -9\fP for details.

.\".TP
.\".PD 0
.\".BI \-#
.TP
.PD
.B \-0, \-1, \-2, \-3, \-4, \-5, \-6, \-7, \-8, \-9
Regulate the speed of compression using the specified digit,
.\".BR # ,
where
.B \-0
indicates no compression (store all files),
.B \-1
indicates the fastest compression speed (less compression)
and
.B \-9
indicates the slowest compression speed (optimal compression). The default
compression level is
.BR \-6.

This setting controls compression level for all methods (except \fBStore\fR).

With \fBzip 3.1\fP it is now possible to set a default compression level for
a specific compression method by providing an optional method list.  The format
is:
.RS
.IP
\-\fILevel\fP=\fIMethodList\fP
.RE
.IP
where \fILevel\fP is a single digit from 1 to 9 and \fIMethodList\fP is a
list of methods as would be provided to \fB\-Z\fP.  Multiple methods can be
specified, separated by colons (or semi-colons).

For example:
.RS
.IP
\fCzip -9=LZMA:PPMD\fP
.RE
.IP
will use compression level 9 as the default when compression methods LZMA or
PPMD are specified.  Note that associating methods with compression levels
does not set a compression method.  The default compression method is
\fBDeflate\fR unless changed by \fB-Z\fR, \fB-n\fR or \fB-0\fR.
.RS
.IP
\fCzip -9=LZMA:PPMD foo.zip -r . -5\fP
.RE
.IP
sets the default compression level to 9 when \fBLZMA\fP or \fBPPMd\fP is
used, but as the actual method to use is not specified, the default method
\fBDeflate\fP and the global compression level of 5 is used.

See options \fB\-Z\fP and \fB\-n\fP for more on setting compression methods
and levels.

.TP
.PD 0
.B \-!
.TP
.PD
.B \-\-use\-privileges
[WIN32] Use privileges (if granted) to obtain all aspects of WinNT security.

.TP
.PD 0
.B \-@
.TP
.PD
.B \-\-names\-stdin
Take a list of input files from standard input.  Only one filename per line.

.TP
.PD 0
.B \-@@ \fIfilepath\fP
.TP
.PD
.B \-\-names\-file \fIfilepath\fP
Same as \fB-@\fP, but take a list of input files from text file
\fIfilepath\fP.  Only one filename per line.  (Don't confuse this option
with using an argfile.)

.TP
.PD 0
.B @\fIargfilepath\fP
Open text file \fIargfilepath\fP and read arguments separated by white space,
replacing this argument with the read arguments.  This is not an option,
but listed here for comparison with \fB-@\fP and \fB-@@\fP.  \fIargfilepath\fP
is an argument file (argfile).  No space can be between \fB@\fP and
\fIargfilepath\fP.  See the subsection on \fBArgument Files\fP
for more on argument files.  Argfiles are not recognized as such unless the
\fB-AF\fR option is used to turn on argfiles, i.e. the default is for argfiles
to be turned off and so @somefile is just another file whose name happens to
starts with "@".

.TP
.PD 0
.B \-$
.TP
.PD
.B \-\-volume\-label
[MSDOS, OS/2, VMS, WIN32] Include the volume label for the drive/device
holding the first file to be added to the archive.  If you want to
include only the volume label (or to take the volume label from a
specific drive/device other than the one containing the first file), use
the drive/device name (including the terminating colon) as first file
name, as in:
.RS
.IP
\fCzip -$ foo a: c:bar               [MSDOS, ...]\fP

\fCzip -$ foo dka0: dkc0:[bar]*.*    [VMS]\fP
.RE
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH "EXAMPLES"
The simplest example:
.IP
\fCzip stuff *\fP
.LP
creates the archive
.I stuff.zip
(assuming it does not exist)
and puts all the files in the current directory in it, in compressed form
(the
\fB\&.zip\fP
suffix is added automatically, unless the archive name contains
a dot already;
this allows the explicit specification of other suffixes).
.LP
Because of the way the shell on Unix does filename substitution,
files starting with "." are not included;
to include these as well:
.IP
\fCzip stuff ".*" *\fP
.LP
("\fB.*\fR" needs to be quoted to allow \fBzip\fR to expand it, as the shell
will include ".." and provide the names of all files in the directory above.
\fBzip\fR will skip "..".  Actually,
.IP
\fCzip stuff "*"\fP
.LP
is enough to include all files, including .* files.)  Even this will not include
any subdirectories from the current directory.
.LP
To zip up an entire directory, the command:
.IP
\fCzip -r foo foo\fP
.LP
creates the archive
.IR foo.zip ,
containing all the files and directories in the directory \fIfoo\fR,
a directory in the current directory.
(\fB-r\fR recurses down directory trees provided as input files on the command
line.)
.LP
You may want to make a
.B zip
archive that contains the files in
.IR foo ,
without recording the directory name,
.IR foo .
You can use the
.B \-j
option to leave off the paths,
as in:
.IP
\fCzip -j foo foo/*\fP
.LP
If you are short on disk space,
you might not have enough room to hold both the original directory
and the corresponding compressed
.B zip
archive.
In this case, you can create the archive in steps using the
.B \-m
option.
If
.I foo
contains the subdirectories
.IR tom ,
.IR dick ,
and
.IR harry ,
you can:
.IP
\fCzip -rm foo foo/tom\fP
.br
\fCzip -rm foo foo/dick\fP
.br
\fCzip -rm foo foo/harry\fP
.LP
where the first command creates
.IR foo.zip ,
and the next two add to it.
At the completion of each
.B zip
command,
the files moved into the archive are deleted, as well as the last created
archive, making room for the next
.B zip
command to function.  (But read up on the \fB-m\fR option, especially the
potential risks, before using it.)

\fBzip\fP allows output from a program to be piped in and compressed.  For
example, to get a list of files in a directory tree and save the list in
compressed form in a \fBzip\fP archive:
.IP
ls -lR foo | zip foo_ls -
.LP
Normally this saves the content as the entry "-" in the archive.  \fB-SI\fR
can be used to rename this:
.IP
ls -lR foo | zip foo_ls - -SI ls_output.txt
.LP
To get a list of \fI.c\fP and \fI.h\fP files that would be archived and pipe
that list through \fBless\fP:
.IP
zip foo  -r .  -i "*.c" "*.h" @  -sf  |  less
.LP
This command would create/update the archive \fIfoo.zip\fR, recursing the
current directory (\fB-r\ .\fR) and including only files that match the
patterns "*.c" and "*.h" (\fB-i\ "*.c"\ "*.h"\ @\fR), the patterns quoted
to prevent shell expansion of "*", the list terminated by "@".
However, the \fB-sf\fR tells \fBzip\fR to do the file scan, but just list
the files that would have been operated on if \fB-sf\fR was not there.

Both input and output streaming can be done at the same time:
.IP
\fCtar cf - . | zip | dd of=/dev/nrst0 obs=16k\fP
.LP
See the subsection "\fBStreaming input and output\fR" above for more on streaming.

\fB\-s\fP allows you to create split archives that can be saved on removable
media.  For instance,
.IP
\fCzip -s 2g -r split.zip foo\fP
.LP
creates a split archive of directory foo with splits no bigger than 2 GB
each.  If \fIfoo\fP contained 5 GB of contents and the contents were stored in the
split archive without compression (to make this example simple), this would
create three splits, \fIsplit.z01\fP at 2 GB, \fIsplit.z02\fP at 2 GB, and
\fIsplit.zip\fP at a little over 1 GB.

\fBzip\fR provides various ways to track progress.  A log of what
\fBzip\fR does can also be made.  For instance
.IP
\fCzip foo -r foo  -dbdcds 1g  -lFlila\fP
.LP
would zip up the directory \fIfoo\fR and put the contents in the \fIfoo.zip\fR
archive.  \fBzip\fR displays the bytes processed and bytes to go (\fB-db\fR),
the entries processed and to go (\fB-dc\fR), and progress dots for each entry
where each dot represents 1 GiB of bytes processed (\fB-ds 1g\fR).  (Progress
dots avoid long periods of quiet while large entries are processed.)  A log is
opened with name \fIfoo.log\fR (\fB-lF\fR), and log entries are appended to
any existing log content (\fB-la\fR) rather than the existing content
deleted first (the default).  Normally \fBzip\fR logs just the command line
used, any warnings or errors, and the final status.  Using \fB-li\fR tells
\fBzip\fR to also include informational messages such as the path of each
entry processed and the compression achieved.

A more complex Windows example:
.IP
\fCzip backup  -ry  -dbdcdude  -lilalF  -S!  -3  -wl  c:/\fP
.LP
This zips up the contents of \fIc:\fR and any subdirectories (\fB\-r\fR) into
archive \fIbackup.zip\fR.  Any symbolic links will be stored as such in the
archive (\fB\-y\fR) rather than the link traversed and the files at the
linked-to location included.

\fBzip\fR will display bytes and entries processed (\fB\-db\fR and \fB\-dc\fR),
the uncompressed size of each entry before starting to process it (\fB\-du\fR)
and an estimate of the time left until the archive is done based on current
throughput rates (\fB\-de\fR).

Logfile \fIbackup.log\fR will be either created or appended to and will
include informational messages such as the paths of entries processed.

System and hidden files will be included (\fB\-S\fR).  As needed, \fBzip\fR
will try to elevate user privileges to zip up all files (\fB\-!\fR).

Compression level 3 will be used (\fB\-3\fR), which attempts to compress
files, but focuses on fast compression rather than better compression.  As
no compression method was specified (\fB\-Z\fR), standard \fBdeflate\fR
compression will be used, except when a file extension is in the default
\fBstore\fR list (\fB\-n\fR), in which case those files (such as \fB.gz\fR
and \fB.zip\fR files) will be stored without attempting additional compression.

Any Windows file paths longer than roughly 256 characters will be stored
(\fB\-wl\fR).  This is now the default and \fB\-wl\fR
(\fB\-\-windows-long-paths\fR) is no longer needed.  Some utilities can't
process Windows long paths, and such paths can be excluded from the archive
(\fB\-wl\-\fR), but then some files will be missing.  \fBzip\fR will issue
a warning when a long path is encountered.
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH "PATTERN MATCHING"
This section mostly applies only to Unix.
Watch this space for details on MSDOS/Windows and VMS operation.
However, the special wildcard characters \fB*\fR and \fB[]\fR below apply
to at least MSDOS/Windows also.

The Unix shells (\fIsh\fP, \fIcsh\fP, \fIbash\fP, and others) normally
do filename substitution (also called "globbing") on command arguments.
Generally the special characters are:
.TP
.B ?
match any single character
.TP
.B *
match any number of characters (including none)
.TP
.B []
match any character in the range indicated within the brackets
(example: [a\-f], [0\-9]).  This form of wildcard matching
allows a user to specify a list of characters between square brackets and
if any of the characters match the character at that position the
expression matches.  For example:
.RS
.IP
\fCzip archive *.[hc]\fP
.RE
.IP
would archive all files in the current directory that end in
\fB.h\fP or \fB.c\fP.  (This example is allowing the Unix shell
to process wildcards, so the wildcards are not escaped or quoted.  On
MSDOS/Windows, the shell does not do globbing so \fBzip\fR processes
the wildcards in a similar way.  If, on Unix, quotes were used:
.RS
.IP
\fCzip archive "*.[hc]"  -RE\fP
.RE
.IP
\fBzip\fR would process the wildcards.  But note that \fB[]\fR matching
is internally disabled in \fBzip\fR (to avoid confusion when names
include '[' and ']') unless \fB-RE\fR is used to enable it.  The
need for \fB-RE\fR also applies if the above is run on MSDOS/Windows.)

Ranges of characters are supported:
.RS
.IP
\fCzip archive [a\-f]*\fP
.RE
.IP
would add to the archive all files starting with "a" through "f".

Negation is also supported, where any character in that position not in
the list matches.  Negation is supported by adding \fB!\fP or \fB^\fP
to the beginning of the list:
.RS
.IP
\fCzip archive *.[!o]\fP
.RE
.IP
matches files that don't end in ".o".

On Unix, when wildcards are escaped or quoted, \fBzip\fR performs the wildcard
processing.  (\fB-RE\fR is needed for \fBzip\fR to recognize and process
\fB[]\fR lists.)  A notable difference, though, is the shell generally only
searches the current directory for matches, while \fBzip\fR can match within
subdirectories depending on the command.

The same examples should work on Windows.  For
example:
.RS
.IP
\fCzip -RE archive *.[!o]\fP
.RE
.IP
As of \fBzip 3.0\fP, on WIN32 \fB[]\fR matching needs to be turned on with the
\fB-RE\fP option to avoid the confusion that names with [ or ] have caused.
As of \fBzip 3.1\fP, \fB-RE\fP is needed on all platforms to enable
use of \fB[]\fR for character ranges.  This is only needed on Unix if \fB[]\fP
is escaped (not handled by the shell).

Prior to \fBzip 3.1\fR, on Unix \fBzip\fP only provides wildcard support of
\fB-i\fP,
\fB-x\fP and \fB-R\fP patterns, not of input files.  (Full wildcard support
is provided for internal modes such as delete and copy that match internal
archive entries.)  The idea was to allow
the shell to provide that support on Unix.  (Full wildcard support is provided
by \fBzip\fP on Windows.)  \fBzip 3.1\fR now provides full Unix wildcard
support internally when wildcards are escaped from shell processing.

.LP
On Unix, when these wildcard characters are encountered
(without being escaped with a backslash or quotes),
the shell will look for files relative to the current path
that match the pattern,
and replace the argument with a list of the names that matched.

The
.B zip
program can do the same matching on names that are in the
.B zip
archive being modified or, in the case of the
.B \-x
(exclude) or
.B \-i
(include) options, on the list of files to be operated on, by using
backslashes or quotes to tell the shell not to do the name expansion.
In general, when
.B zip
encounters a name in the list of files to do, it first looks for the name in
the file system.  If it finds it, it then adds it to the list of files to do.
If it does not find it, it looks for the name in the
.B zip
archive being modified (if it exists), using the pattern matching characters
described above, if present.  For each match, it will add that name to the
list of files to be processed, unless this name matches one given
with the
.B \-x
option, or does not match any name given with the
.B \-i
option.
.LP
The pattern matching includes the path, and so patterns like \\*.o
match names that end in ".o", no matter what the path prefix is.
(The default is for \fBzip\fP to match * across directory boundaries.
See \fB-ws\fP for more on this.)
Note that the backslash must precede every special character
(i.e. ?, *, [, and ] for Unix), or the entire argument must be enclosed in
double quotes ("").  (Some systems also permit quoting using single quotes
('') as well as quoting just the special characters, as in
foo"*"bar.c, which matches all paths that start with "foo" and end
with "bar.c".)  Follow the specific rules for the OS and shell you
are using.

In general, use backslashes or double quotes for paths that have
wildcards to make
.B zip
do the pattern matching for file paths, and always for
paths and strings that have spaces or wildcards for
\fB\-i\fP (include), \fB\-x\fP (exclude), \fB\-R\fP (recurse patterns),
\fB\-d\fP (delete), and \fB\-U\fP (copy) and anywhere \fBzip\fP needs
to process the wildcards.
.\"
.\"
.SS Filters
.\"
The options \fB-i\fR, \fB-x\fR and \fB-R\fR are considered filters.  When
used, \fBzip\fR first gathers all file names referenced by the input files
during the file scan, recursing into directories if requested as needed.
Then the filters are applied to remove files from this list.  So, for:
.RS 0
.IP
\fCzip foo.zip -r bar -RE -i "*.[ch]"\fR
.RE
.LP 0
the entire \fIbar\fR directory will be scanned, then any files not ending
in \fI.c\fR or \fI.h\fR will be dropped.  If \fIbar\fR is large, this could
take awhile to scan.  When possible, narrow the scope of the input scan
as much as possible to minimize what \fBzip\fR needs to look at to speed
up the file scan.
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH "LIBRARIES/API"
.LP
The \fBzip\fP source can be used to build both static and dynamic libraries.
On Unix a static library can be built using Makefile, and the resulting
library is named libizzip.a.  The static library is also available for VMS.
A dynamic version of the Unix library should be coming shortly.  On Windows
both static and dynamic libraries can be built, these libraries having names
such as zip32_dll.dll.  The source kit also includes example programs that
demonstrate using the static and dynamic libraries.

The \fBzip\fR LIB and DLL libraries have evolved since \fBzip 3.0\fR.  The
\fBzip 3.1\fR application programming interface (API) is not directly
compatible with the old \fBzip 3.0\fR interface (and neither are compatible
with the old \fBzip 2.32\fR interface) and programs using the old
interface will need updating to use the new interface.  The API now seems
stable and no further changes are expected that would be incompatible with
the current interface.

See \fIReadLibDll.txt\fR in the \fBzip\fP source kit for more information.  Also
see the Unix example program \fIizzip_example.c\fR in the source kit for a quick
look at how to use the Unix \fBzip\fR library.  There is also a Windows Visual
Basic 10 example in the source kit (under windll/examples/vb10) showing how to
use the DLL from a form-based application.
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH "ENVIRONMENT"
.LP
The following environment variables are read and used by
.B zip
as described.

.TP
.B ZIPOPT\ \
Contains default options that will be used when running \fBzip\fR.  The
contents of this environment variable will get added to the \fBzip\fR command
line before any command line arguments.  \fB-sc\fR can be used to see the
processed command line, including any arguments from the environment.
"\fBzip -v\fR" shows what is currently in \fBZIPOPT\fR.

.TP
.B ZIP\ \ \ \ \
[Not on RISC OS and VMS] See ZIPOPT.

.TP
.B Zip$Options
[RISC OS] See ZIPOPT.

.TP
.B Zip$Exts
[RISC OS] Contains extensions separated by a : that will cause
native filenames with one of the specified extensions to
be added to the \fBzip\fP file with basename and extension swapped.

.TP
.B ZIP_OPTS
[VMS] See ZIPOPT.
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH "SEE ALSO"
bzip2(1),
compress(1),
gzip(1),
shar(1),
tar(1),
unzip(1),
zipcloak(1),
zipnote(1),
zipsplit(1)
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH DIAGNOSTICS
The exit status (or error level) approximates the exit codes defined by PKWARE
(where applicable) and takes on the following values, except under VMS:
.RS
.IP 0
(OK)  Normal successful completion.
.IP 2
(EOF)  Unexpected end of zipfile.
.IP 3
(FORM)  A generic error in the zipfile format was detected.  Processing may have
completed successfully anyway; some broken zipfiles created by other
archivers have simple work-arounds.
.IP 4
(MEM)  \fBzip\fP was unable to allocate memory for one or more buffers.
.IP 5
(LOGIC)  Internal logic error.
.IP 6
(BIG)  Entry too large to be processed (such as input files larger than 2 GB when
not using Zip64 or trying to read an existing archive that is too large) or
entry too large to be split with \fBzipsplit\fP.
.IP 7
(NOTE)  Invalid comment format to \fBzipnote\fR.
.IP 8
(TEST)  "zip -T" archive test failed.
.IP 9
(ABORT)  The user aborted \fBzip\fP prematurely with control-C (or similar).
Also can be result of internal error.
.IP 10
(TEMP)  \fBzip\fP encountered an error while using a temp file.
.IP 11
(READ)  Read or seek error.
.IP 12
(NONE)  \fBzip\fP has nothing to do.  This may be the result of no files
matching provided file list.
.IP 13
(NAME)  Missing (name not matched) or empty zip file.
.IP 14
(WRITE)  Error writing to a file.
.IP 15
(CREAT)  \fBzip\fP was unable to create a file to write to.
.IP 16
(PARMS)  Bad command line parameters.
.IP 18
(OPEN)  \fBzip\fP could not open a specified file to read.
.IP 19
(COMPILE)  Error in compilation options.  For instance, large file support
was compiled in, but the OS does not support it.
.IP 20
(ZIP64)  Zip64 not supported.
.IP 21
(CRYPT)  Encryption related error.  As of \fBzip 3.1\fR, password errors
now also return this.
.IP 22
(COMPRESS)  Compression error.  This is an error specific to a compression
method.
.IP 23
(BACKUP)  Backup error.  An error specific to backup mode (\fB-BT\fP).
.IP 24
(DEPTH)  Recursion depth limit exceeded.  (E.g. argfile recursion.)
.IP 25
(SPLIT)  Attempt to read unsupported split archive.
.IP 26
(UNZIP)  When testing archive, could not run unzip or incompatible unzip.
.RE

These error codes are also used by the utilities \fBzipcloak\fR,
\fBzipnote\fR  and \fBzipsplit\fR.
.PP
VMS interprets standard Unix (or PC) return values as other, scarier-looking
things, so \fBzip\fP instead maps them into VMS-style status codes.  In
general, \fBzip\fP sets VMS Facility = 1955 (0x07A3), Code = 2 * Unix_status,
and an appropriate Severity (as specified in ziperr.h).  More details are
included in the VMS-specific documentation.  See [.vms]NOTES.TXT and
[.vms]vms_msg_gen.c.

In some cases, the actual error code returned depends on various factors.
See below examples:
.RS 0
.IP -
When deleting from an archive (using \fB-d\fP), if none of the files to
delete are found in the archive, error code 12 (nothing to do) is returned.
However, if the archive is empty, error code 13 (empty zip file) is returned
instead.  (This is a change from \fBzip 3.0\fP, which always returned error
code 12 in this case.)
.IP -
When freshening or updating an archive, if a file can't be found error code 12
is returned.  However, if the archive is empty, error code 13 is returned.
(This is also a change from \fBzip 3.0\fP, which always returned error code 12.)
.IP -
When using backup mode (\fB-BT\fP), if an error involving opening or reading
files is encountered, the appropriate file error is returned (such as
error code 18 if a file can't be opened).  However, if the contents of the
backup control file are not appropriate for the requested backup operation,
error code 23 (backup error) is returned.
.RE
.PP
In addition, \fBzip\fP issues warning messages if non-fatal errors occur.
Most do not impact the return code, but some do.
.PD
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH BUGS
\fBzip 2.x\fP and later are not compatible with PKUNZIP 1.10. Use
\fBzip 1.1\fP to produce
.B zip
files which can be extracted by PKUNZIP 1.10.
.PP
.B zip
files produced by
\fBzip 2.x\fP and later must not be
.I updated
by
\fBzip 1.1\fP or PKZIP 1.10, if they contain
encrypted members or if they have been produced in a pipe or on a non-seekable
device. The old versions of
\fBzip\fP
or PKZIP would create an archive with an incorrect format.
The old versions can list the contents of the zip file
but cannot extract it anyway (because of the new compression algorithm).
If you do not use encryption and use regular disk files, you do
not have to care about this problem.
.LP
On VMS, \fBzip\fP archives should have record format Stream_LF or
Fixed-512 (the usual Unix-like formats).  It may be possible to convert
archives with other formats using Rahul Dhesi's BILF program.
This version of
\fBzip\fP
handles some of the conversion internally.
When using Kermit to transfer zip files from VMS to MSDOS, type
"set file type block" on VMS.  When transferring from MSDOS to VMS, type
"set file type fixed" on VMS.  In both cases, type
"set file type binary" on MSDOS.
.LP
On some older VMS versions, \fBzip\fP may hang for file
specifications that use DECnet syntax
.I foo::*.*.
.LP
On OS/2, \fBzip\fP cannot match some names, such as those including an
exclamation mark or a hash sign.  This is a bug in OS/2 itself: the
32-bit DosFindFirst/Next don't find such names.  Other programs such
as GNU tar are also affected by this bug.
.LP
Under OS/2, the amount of Extended Attributes displayed by DIR is (for
compatibility) the amount returned by the 16-bit version of
DosQueryPathInfo(). Otherwise OS/2 1.3 and 2.0 would report different
EA sizes when DIRing a file.
However, the structure layout returned by the 32-bit DosQueryPathInfo()
is a bit different, it uses extra padding bytes and link pointers (it's
a linked list) to have all fields on 4-byte boundaries for portability
to future RISC OS/2 versions. Therefore the value reported by
.B zip
(which uses this 32-bit-mode size) differs from that reported by DIR.
.B zip
stores the 32-bit format for portability, even the 16-bit
MS-C-compiled version running on OS/2 1.3, so even this one shows the
32-bit-mode size.
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH AUTHORS
Copyright (C) 1997-2018 Info-ZIP.
.LP
Currently distributed under the Info-ZIP license.  A copy of the license is
included in the \fBzip\fR source kit and can also be found on the
Info-ZIP web sites (\fIwww.info-zip.org/license.html\fR and
\fIinfozip.sourceforge.net/license.html\fR.)
.LP
Copyright (C) 1990-1997 Mark Adler, Richard B. Wales, Jean-loup Gailly,
Onno van der Linden, Kai Uwe Rommel, Igor Mandrichenko, John Bush and
Paul Kienitz.
.LP
Original copyright:
.LP
Permission is granted to any individual or institution to use, copy, or
redistribute this software so long as all of the original files are included,
that it is not sold for profit, and that this copyright notice
is retained.
.LP
LIKE ANYTHING ELSE THAT'S FREE, ZIP AND ITS ASSOCIATED UTILITIES ARE
PROVIDED AS IS AND COME WITH NO WARRANTY OF ANY KIND, EITHER EXPRESSED OR
IMPLIED. IN NO EVENT WILL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DAMAGES
RESULTING FROM THE USE OF THIS SOFTWARE.
.LP
Please send bug reports and comments using our Bug Report web page at:
\fIwww.info-zip.org/zip-bug.html\fR.
For bug reports, please include the information on the version
page of
.BR zip
(\fBzip\ \-v\fR),
the machine and operating system in use,
and as much additional information as possible.  Bugs can also be reported
via the Info-ZIP user forum using the link on the above web site
(\fIwww.info-zip.org\fR).
.\"
.\"
.\"
.\" --------------------------------------------------------------------------
.\"
.SH ACKNOWLEDGEMENTS
Thanks to R. P. Byrne for his
.I Shrink.Pas
program, which inspired this project,
and from which the shrink algorithm was stolen;
to Phil Katz for placing in the public domain the
.B zip
file format, compression format, and .ZIP filename extension, and for
accepting minor changes to the file format; to Steve Burg for
clarifications on the deflate format; to Haruhiko Okumura and Leonid
Broukhis for providing some useful ideas for the compression
algorithm; to Keith Petersen, Rich Wales, Hunter Goatley and Mark
Adler for providing a mailing list and
.B ftp
site for the \fBInfo-ZIP\fP group to use; and most importantly, to the
\fBInfo-ZIP\fP group itself (listed in the file
.IR infozip.who )
without whose tireless testing and bug-fixing efforts a portable
.B zip
would not have been possible.
Finally we should thank (blame) the first \fBInfo-ZIP\fP moderator,
David Kirschbaum,
for getting us into this mess in the first place.
The manual page was rewritten for Unix by R. P. C. Rodgers and
updated by E. Gordon for \fBzip 3.0\fR and \fBzip 3.1\fR.
.\" end of file
