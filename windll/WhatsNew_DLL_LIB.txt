WhatsNew_DLL_LIB.txt

This file describes what's changed and new regarding the Zip 3.1 LIB/DLL
interface.  More detailed information can be found in the api.h and api.c
files.

Overview of changes:

  Added functionality.  The updated LIB/DLL interface now includes more robost
  control of zip operations.  Most significantly, the options structure
  previously used to tell Zip what to do is no longer used, replaced by simple
  command line and argv[] interfaces.  The user just passes the command line
  to execute to the Zip 3.1 LIB/DLL via the new ZpZip() entry point and Zip
  will parse the command line and call zipmain() to perform the actual zipping.
  This interface allows access to features previously excluded from LIB/DLL
  use, such as viewing Help and License information.  An alternative entry
  point, ZpZipArgs(), is also provided, which takes an argv[] array instead
  of a command line string.  Each has its own benefits and limitations.  Some
  Zip operations are still not appropriate for LIB/DLL use, however.  We have
  tried to lock all of these out from LIB/DLL use, but it's likely the LIB/DLL
  caller can still request operations from the LIB/DLL that give strange
  results, or even crash the LIB or DLL.  Be careful when asking the LIB/DLL
  to perform non-standard actions and please report any issues to us.

  Flexible interface.  Additional callbacks are now provided that give the
  caller more control over things like just what output to receive and
  terminating an operation in progress.  However, many are not needed for
  basic operation.  Define only those callbacks you need.  Also be aware that
  callbacks eat time and the more control and feedback you request the more
  the LIB/DLL interface may slow down your application.

  Migrating to Zip 3.1 DLL.  It should be simple to convert a program using
  zip32.dll or one of the Zip 3.1 beta interfaces to zip32_dll.dll but some
  significant changes are needed.  As the basic operations remain the same,
  the conversion should be straight forward.  Note that the Zip 3.1 LIB/DLL
  interface now requires support of 64-bit integers to fully use some of the
  callbacks.  See the VB 6 example for how these callbacks can be used without
  64-bit integers.

The LIB and DLL now use the same entry points.  When Zip is compiled as a LIB,
these are standard function calls.  api.h has the function prototypes needed to
use these functions.  When Zip is compiled as a DLL, these become exported
entry points available to the caller.

Exported DLL entry points:

  These are the main function interface/entry points in the Zip 3.1 LIB/DLL:

     ZpVersion            - Returns version of LIB/DLL.  When using the DLL,
                            this should be called first to verify the version
                            of the DLL is compatible with the caller.

     ZpZip                - Single call main entry point for calling Zip with
                            command line to execute.  This one call now sets
                            up the callback functions and calls Zip with the
                            provided command line string.

     ZpZipArgs            - Single call main entry point for calling Zip with
                            argv[] array to execute.  This one call now sets
                            up the callback functions and calls Zip with the
                            provided set of command line arguments.  The
                            arguments passed to Zip should be mostly the same
                            as would be passed to the stand alone version of
                            Zip by the shell.

  The following are test entry points that can be used to determine the caller
  is properly interfacing with the LIB/DLL:

     ZpZipTest            - Single call main entry point for testing Zip API
                            interfaces.

     ZpTestComParse       - Single call that tests command line parsing.

     ZpTestCallback       - A simple test of calling a user callback.

     ZpTestCallbackStruct - A callback test, but also tests providing the
                            callback addresses to the API using a structure.

  The VB 10 example shows how to use these.
  
  These are now deprecated and should not be used:

     ZpInit               - Initializes the function callbacks.  This is now
                            done by ZpZip or ZpZipArgs.

     ZpArchive            - Call the DLL or LIB using the old options
                            structure.  This is replaced by ZpZip or ZpZipArgs.
                            Be warned that this code has not been recently
                            updated or tested.  It also greatly limits what
                            you can tell Zip to do.

   Previous LIB examples have called ZpInit to set up the callbacks, then
   called zipmain() directly to execute a Zip operation.  The preference now
   is to call ZpZip or ZpZipArgs for both LIB and DLL.  You may notice that
   the Windows LIB and DLL C examples are almost identical, which is by
   design.  But there are some subtle differences.

   All interactions with the LIB/DLL once ZpZip() or ZpZipArgs() is called is
   through callbacks and the final return code.

   When the LIB is linked in, many of the DLL context issues do not apply.
   In this case ZpInit() could be used to set the function callbacks once and
   the local function zipmain() used to actually call Zip.  Unlike the DLL,
   the LIB inherits the caller's stdin, stdout, and stderr.  However, the
   preference is now to use ZpZip() or ZpZipArgs() with the LIB as it
   establishes the Zip context with one call.

ZpVersion() now returns a more complete set of data on the DLL or LIB library.
One major addition is the features string, where a list of supported features
and compilation selections is provided.  If a specific feature is needed, the
caller should check that it's listed in this string.  Also, the version of the
LIB/DLL interface is now included.   This interface version is the earliest
version of Zip where the current interface was supported.  This is currently
set to 3.1.0 (Zip version 3.1.0).  In later releases of Zip (such as Zip 3.2)
the LIB/DLL interface version should remain 3.1.0 unless changes are made in
Zip 3.2 to make it incompatible.  If the LIB/DLL version remains 3.1.0, then
the 3.1.0 examples should still work.  Additional features may be available,
but the 3.1.0 features should still work as before.  It's up to the caller to
check the feature list to see if a particular feature is updated or removed.

Callback functions are used when the LIB/DLL needs to pass information to the
caller or needs information from the caller such as a password.  The following
callbacks can be defined.  The callback name is given, and under it is the
name of the function pointer to set.  (See the examples for how to set these.)
Any callback not used should be set to NULL:

     DLLPRNT             - Called to print strings.  Nearly all display
     (print)               output of Zip is routed through this callback.

     DLLPASSWORD         - If a password is needed by Zip, this function is
     (password)            called.  If the user will be encrypting entries,
                           this callback must be defined to set the password
                           or an error will occur.  Note that -P can be used
                           on the command line to set the password, which
                           should be safe in this context (LIB/DLL); in this
                           case this callback may not be needed.

     DLLSERVICE          - Called as each entry is processed.  This callback
     (service)             provides stats at the entry level, once processing
                           for the entry is finished.  It also allows the Zip
                           operation to be aborted by setting the callback
                           return code to 1.

     DLLSERVICE_NO_INT64 - A version of DLLSERVICE that does not use 64-bit
     (service_no_int64)    args for file size, but instead uses high and low
                           32-bit parts.  This was needed for Visual Basic 6,
                           for instance, which doesn't know how to handle
                           64-bit arguments.  (Well, there is a way around
                           this.  See the vb6 example and how the progress
                           callback was implemented.)  This callback is now
                           only available on WIN32 (for supporting the old
                           VB 6 example) and should be considered deprecated.

     DLLSPLIT            - Called to request split destination if splitting.
     (split)               This is not yet implemented.  DO NOT USE the split
                           pause feature (-sp) with the DLL until this is
                           implemented.  Normal automatic splitting using -s
                           does not need user interaction and is supported.

     DLLECOMMENT         - Called to request a comment for an entry.  If the
     (ecomment)            caller will be working with entry comments this
                           callback must be defined or an error will result.
                           The new options -c= and -cc allow setting entry
                           comments in many cases using the command line.

     DLLACOMMENT         - Called to request the archive zipfile comment.  If
     (acomment)            the caller will be working with archive comments
                           this callback must be defined or an error will
                           result.  The exception is if the new z="comment"
                           or -zz option formats are used, which set the
                           archive comment without the need of prompting.

     DLLPROGRESS         - If defined, this callback is called to report
     (progress)            progress during the Zip operation.  It returns:
                           - entry name (path)
                           - UTF-8 entry name (upath)
                           - % entry bytes processed
                           - % all bytes processed
                           - uncompressed file size in bytes
                           - uncompressed file size as string (such as 7.7m)
                           - action (such as "Add")
                           - method (such as "Deflate", which can change)
                           - info (additional info, such as "AES256")

                           This callback is called at the start and end of
                           processing of each entry as well as after so many
                           bytes processed for that entry.  The processing
                           chunk size is set as an argument to ZpZip() or
                           ZpZipArgs().  This feature has not been tested
                           when ZpZip() or ZpZipArgs() is not used; the global
                           variable progress_chunk_size would need to be set
                           to the number of bytes that will be the chunk size
                           (how many bytes to process before putting out
                           another progress report).  The chunk size should be
                           at least 1K bytes.  The smaller the chunk size, the
                           more fine the control and reporting, but the slower
                           the execution (as callbacks take time).  100m
                           (100 MiB) may be a good compromise.  Setting return
                           code to 1 aborts the zip operation.  This allows
                           aborting the compression of a file in progress.
                           The Service callback is only called between files,
                           so there could be a long delay when compressing a
                           very large file before Service is called.  The
                           Progress callback allows aborting the operation
                           almost immediately.  The Visual Basic 2010 example
                           shows how this could be done.

     DLLERROR            - This callback is called when a Zip warning or error
     (error)               is generated.  The user should define either
                           DLLPRNT or DLLERROR to see any warnings or errors
                           generated by Zip.  This callback is provided so
                           that DLLPRNT can be NULL (ignoring any normal Zip
                           output) while still getting any generated warnings
                           and errors.

     DLLFINISH           - Called at end of zip operation to provide stats.
     (finish)

   Unused callbacks should be set to NULL.  Zip will skip any callbacks where
   the address is set to NULL.

   As a minimum, the DLLPRNT call back should be defined to see what's going
   on.  Alternatively, the DLLSERVICE and DLLERROR callbacks could be used to
   track progress and handle any warnings or errors.  If passwords or comments
   are being worked with, those callbacks must be defined to provide the
   passwords or comments.  (-P could be used instead of the Password callback.)
   If large files are being processed, the DLLPROGRESS callback can provide
   status updates during what otherwise might be long periods of quiet and
   allows aborting the processing of large files in progress.

   Callbacks that include a file size (Service, Progress and Finish) now use
   API_FILESIZE_T for the sizes.  On most ports supporting the LIB/DLL this
   is "unsigned long long" (64-bit).  The exception is VAX VMS, which uses
   "unsigned long" (32-bit).  Including #include "api.h" in the caller should
   make this visible.

The ZPOPT structure was used to pass settings, such as root directory, to
Zip via the ZpArchive() call.  As ZpArchive() is now obsolete, this
structure should no longer be used and is no longer being updated.  DLL
users should only use ZpZip() or ZpZipArgs().  LIB users should also use
ZpZip() or ZpZipArgs(), but could use ZpInit() instead to set callbacks,
then call zipmain() directly.

The DLL is currently supported only on Windows, though we are working to
make a dynamic library available on Unix.  On Windows, most testing has
been done with Visual Studio 2010, but some testing has been done through
the latest versions of Visual Studio.  Some support for Visual Studio 6
remains, but that platform is getting very old and we think we should be
focusing on more modern environments.  That said, we recently built the
LIBs and DLLs on Windows XP and tested the VC 6 and VB 6 examples there.
Everything still works.  If issues are found with the VC 6 DLL or LIB or
the VC 6 or VB 6 examples under XP or with other similar age environments,
let us know and we'll try to fix them.  Porting to versions of Visual Studio
later than 2010 should be straight forward, and we have done some successful
testing on them.  Let us know if you find any issues using later Visual
Studio environments.

See api.h and api.c for additional information.  The definitive Zip API
definitions are at the top of api.h.

Unix line ends.  Note that files may be saved in Unix format with carriage
returns stripped.  These may need to be restored before the project can be
successfully used.  This can be done by using the -a option to UnZip.  Another
way to do this is to open each file in WordPad, select and cut a line, paste
the line back, and save the file.  This will force WordPad to change the line
ends in the entire file.  Newer versions of WordPad may not do this.  Unix
line ends don't seem to be a problem with Visual Studio 2010.

5 February 2019

